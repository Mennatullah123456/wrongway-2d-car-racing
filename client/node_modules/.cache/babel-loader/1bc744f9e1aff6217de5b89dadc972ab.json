{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar TextureGCSystem = /*#__PURE__*/function () {\n  function TextureGCSystem(renderer) {\n    _classCallCheck(this, TextureGCSystem);\n    this.renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n    this.maxIdle = settings.GC_MAX_IDLE;\n    this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n    this.mode = settings.GC_MODE;\n  }\n  _createClass(TextureGCSystem, [{\n    key: \"postrender\",\n    value: function postrender() {\n      if (!this.renderer.objectRenderer.renderingToScreen) {\n        return;\n      }\n      this.count++;\n      if (this.mode === GC_MODES.MANUAL) {\n        return;\n      }\n      this.checkCount++;\n      if (this.checkCount > this.checkCountMax) {\n        this.checkCount = 0;\n        this.run();\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var tm = this.renderer.texture;\n      var managedTextures = tm.managedTextures;\n      var wasRemoved = false;\n      for (var i = 0; i < managedTextures.length; i++) {\n        var texture = managedTextures[i];\n        if (!texture.framebuffer && this.count - texture.touched > this.maxIdle) {\n          tm.destroyTexture(texture, true);\n          managedTextures[i] = null;\n          wasRemoved = true;\n        }\n      }\n      if (wasRemoved) {\n        var j = 0;\n        for (var _i = 0; _i < managedTextures.length; _i++) {\n          if (managedTextures[_i] !== null) {\n            managedTextures[j++] = managedTextures[_i];\n          }\n        }\n        managedTextures.length = j;\n      }\n    }\n  }, {\n    key: \"unload\",\n    value: function unload(displayObject) {\n      var tm = this.renderer.texture;\n      var texture = displayObject._texture;\n      if (texture && !texture.framebuffer) {\n        tm.destroyTexture(texture);\n      }\n      for (var i = displayObject.children.length - 1; i >= 0; i--) {\n        this.unload(displayObject.children[i]);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return TextureGCSystem;\n}();\nTextureGCSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"textureGC\"\n};\nextensions.add(TextureGCSystem);\nexport { TextureGCSystem };","map":null,"metadata":{},"sourceType":"module"}