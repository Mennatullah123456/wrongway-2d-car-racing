{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar uniformParsers = [{\n  test: function test(data) {\n    return data.type === \"float\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n            if(uv[\\\"\".concat(name, \"\\\"] !== ud[\\\"\").concat(name, \"\\\"].value)\\n            {\\n                ud[\\\"\").concat(name, \"\\\"].value = uv[\\\"\").concat(name, \"\\\"]\\n                gl.uniform1f(ud[\\\"\").concat(name, \"\\\"].location, uv[\\\"\").concat(name, \"\\\"])\\n            }\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return (data.type === \"sampler2D\" || data.type === \"samplerCube\" || data.type === \"sampler2DArray\") && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== void 0);\n  },\n  code: function code(name) {\n    return \"t = syncData.textureCount++;\\n\\n            renderer.texture.bind(uv[\\\"\".concat(name, \"\\\"], t);\\n\\n            if(ud[\\\"\").concat(name, \"\\\"].value !== t)\\n            {\\n                ud[\\\"\").concat(name, \"\\\"].value = t;\\n                gl.uniform1i(ud[\\\"\").concat(name, \"\\\"].location, t);\\n; // eslint-disable-line max-len\\n            }\");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"mat3\" && data.size === 1 && !data.isArray && uniform.a !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n            gl.uniformMatrix3fv(ud[\\\"\".concat(name, \"\\\"].location, false, uv[\\\"\").concat(name, \"\\\"].toArray(true));\\n            \");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                var \".concat(name, \"_matrix = uv.\").concat(name, \".toArray(true);\\n\\n                data[offset] = \").concat(name, \"_matrix[0];\\n                data[offset+1] = \").concat(name, \"_matrix[1];\\n                data[offset+2] = \").concat(name, \"_matrix[2];\\n        \\n                data[offset + 4] = \").concat(name, \"_matrix[3];\\n                data[offset + 5] = \").concat(name, \"_matrix[4];\\n                data[offset + 6] = \").concat(name, \"_matrix[5];\\n        \\n                data[offset + 8] = \").concat(name, \"_matrix[6];\\n                data[offset + 9] = \").concat(name, \"_matrix[7];\\n                data[offset + 10] = \").concat(name, \"_matrix[8];\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"vec2\" && data.size === 1 && !data.isArray && uniform.x !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    gl.uniform2f(ud[\\\"\").concat(name, \"\\\"].location, v.x, v.y);\\n                }\");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                v = uv.\".concat(name, \";\\n\\n                data[offset] = v.x;\\n                data[offset+1] = v.y;\\n            \");\n  }\n}, {\n  test: function test(data) {\n    return data.type === \"vec2\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    gl.uniform2f(ud[\\\"\").concat(name, \"\\\"].location, v[0], v[1]);\\n                }\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"vec4\" && data.size === 1 && !data.isArray && uniform.width !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    cv[2] = v.width;\\n                    cv[3] = v.height;\\n                    gl.uniform4f(ud[\\\"\").concat(name, \"\\\"].location, v.x, v.y, v.width, v.height)\\n                }\");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                    v = uv.\".concat(name, \";\\n\\n                    data[offset] = v.x;\\n                    data[offset+1] = v.y;\\n                    data[offset+2] = v.width;\\n                    data[offset+3] = v.height;\\n                \");\n  }\n}, {\n  test: function test(data) {\n    return data.type === \"vec4\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    cv[2] = v[2];\\n                    cv[3] = v[3];\\n\\n                    gl.uniform4f(ud[\\\"\").concat(name, \"\\\"].location, v[0], v[1], v[2], v[3])\\n                }\");\n  }\n}];\nexports.uniformParsers = uniformParsers;","map":null,"metadata":{},"sourceType":"script"}