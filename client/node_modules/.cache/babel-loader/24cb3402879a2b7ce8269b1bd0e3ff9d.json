{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar TEMP_RECT = new core.Rectangle();\nvar BYTES_PER_PIXEL = 4;\nvar _Extract = /*#__PURE__*/function () {\n  function _Extract(renderer) {\n    _classCallCheck(this, _Extract);\n    this.renderer = renderer;\n  }\n  _createClass(_Extract, [{\n    key: \"image\",\n    value: function () {\n      var _image = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(target, format, quality) {\n        var image;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                image = new Image();\n                _context.next = 3;\n                return this.base64(target, format, quality);\n              case 3:\n                image.src = _context.sent;\n                return _context.abrupt(\"return\", image);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function image(_x, _x2, _x3) {\n        return _image.apply(this, arguments);\n      }\n      return image;\n    }()\n  }, {\n    key: \"base64\",\n    value: function () {\n      var _base = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(target, format, quality) {\n        var canvas, blob;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                canvas = this.canvas(target);\n                if (!(canvas.toDataURL !== void 0)) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", canvas.toDataURL(format, quality));\n              case 3:\n                if (!(canvas.convertToBlob !== void 0)) {\n                  _context2.next = 10;\n                  break;\n                }\n                _context2.next = 6;\n                return canvas.convertToBlob({\n                  type: format,\n                  quality: quality\n                });\n              case 6:\n                blob = _context2.sent;\n                _context2.next = 9;\n                return new Promise(function (resolve) {\n                  var reader = new FileReader();\n                  reader.onload = function () {\n                    return resolve(reader.result);\n                  };\n                  reader.readAsDataURL(blob);\n                });\n              case 9:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 10:\n                throw new Error(\"Extract.base64() requires ICanvas.toDataURL or ICanvas.convertToBlob to be implemented\");\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function base64(_x4, _x5, _x6) {\n        return _base.apply(this, arguments);\n      }\n      return base64;\n    }()\n  }, {\n    key: \"canvas\",\n    value: function canvas(target, frame) {\n      var renderer = this.renderer;\n      var resolution;\n      var flipY = false;\n      var renderTexture;\n      var generated = false;\n      if (target) {\n        if (target instanceof core.RenderTexture) {\n          renderTexture = target;\n        } else {\n          renderTexture = this.renderer.generateTexture(target);\n          generated = true;\n        }\n      }\n      if (renderTexture) {\n        resolution = renderTexture.baseTexture.resolution;\n        frame = frame ?? renderTexture.frame;\n        flipY = false;\n        renderer.renderTexture.bind(renderTexture);\n      } else {\n        resolution = renderer.resolution;\n        if (!frame) {\n          frame = TEMP_RECT;\n          frame.width = renderer.width;\n          frame.height = renderer.height;\n        }\n        flipY = true;\n        renderer.renderTexture.bind(null);\n      }\n      var width = Math.round(frame.width * resolution);\n      var height = Math.round(frame.height * resolution);\n      var canvasBuffer = new core.utils.CanvasRenderTarget(width, height, 1);\n      var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n      var gl = renderer.gl;\n      gl.readPixels(Math.round(frame.x * resolution), Math.round(frame.y * resolution), width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n      var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n      _Extract.arrayPostDivide(webglPixels, canvasData.data);\n      canvasBuffer.context.putImageData(canvasData, 0, 0);\n      if (flipY) {\n        var target2 = new core.utils.CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n        target2.context.scale(1, -1);\n        target2.context.drawImage(canvasBuffer.canvas, 0, -height);\n        canvasBuffer.destroy();\n        canvasBuffer = target2;\n      }\n      if (generated) {\n        renderTexture.destroy(true);\n      }\n      return canvasBuffer.canvas;\n    }\n  }, {\n    key: \"pixels\",\n    value: function pixels(target, frame) {\n      var renderer = this.renderer;\n      var resolution;\n      var renderTexture;\n      var generated = false;\n      if (target) {\n        if (target instanceof core.RenderTexture) {\n          renderTexture = target;\n        } else {\n          renderTexture = this.renderer.generateTexture(target);\n          generated = true;\n        }\n      }\n      if (renderTexture) {\n        resolution = renderTexture.baseTexture.resolution;\n        frame = frame ?? renderTexture.frame;\n        renderer.renderTexture.bind(renderTexture);\n      } else {\n        resolution = renderer.resolution;\n        if (!frame) {\n          frame = TEMP_RECT;\n          frame.width = renderer.width;\n          frame.height = renderer.height;\n        }\n        renderer.renderTexture.bind(null);\n      }\n      var width = Math.round(frame.width * resolution);\n      var height = Math.round(frame.height * resolution);\n      var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n      var gl = renderer.gl;\n      gl.readPixels(Math.round(frame.x * resolution), Math.round(frame.y * resolution), width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n      if (generated) {\n        renderTexture.destroy(true);\n      }\n      _Extract.arrayPostDivide(webglPixels, webglPixels);\n      return webglPixels;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }], [{\n    key: \"arrayPostDivide\",\n    value: function arrayPostDivide(pixels, out) {\n      for (var i = 0; i < pixels.length; i += 4) {\n        var alpha = out[i + 3] = pixels[i + 3];\n        if (alpha !== 0) {\n          out[i] = Math.round(Math.min(pixels[i] * 255 / alpha, 255));\n          out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255 / alpha, 255));\n          out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255 / alpha, 255));\n        } else {\n          out[i] = pixels[i];\n          out[i + 1] = pixels[i + 1];\n          out[i + 2] = pixels[i + 2];\n        }\n      }\n    }\n  }]);\n  return _Extract;\n}();\nvar Extract = _Extract;\nExtract.extension = {\n  name: \"extract\",\n  type: core.ExtensionType.RendererSystem\n};\ncore.extensions.add(Extract);\nexports.Extract = Extract;","map":null,"metadata":{},"sourceType":"script"}