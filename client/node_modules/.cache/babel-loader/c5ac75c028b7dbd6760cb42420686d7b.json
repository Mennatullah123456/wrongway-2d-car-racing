{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { Runner } from '@pixi/runner';\nimport { EventEmitter } from '@pixi/utils';\nvar SystemManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SystemManager, _EventEmitter);\n  function SystemManager() {\n    var _this;\n    _classCallCheck(this, SystemManager);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SystemManager).apply(this, arguments));\n    _this.runners = {};\n    _this._systemsHash = {};\n    return _this;\n  }\n  _createClass(SystemManager, [{\n    key: \"setup\",\n    value: function setup(config) {\n      this.addRunners.apply(this, _toConsumableArray(config.runners));\n      var priority = (config.priority ?? []).filter(function (key) {\n        return config.systems[key];\n      });\n      var orderByPriority = [].concat(_toConsumableArray(priority), _toConsumableArray(Object.keys(config.systems).filter(function (key) {\n        return !priority.includes(key);\n      })));\n      var _iterator = _createForOfIteratorHelper(orderByPriority),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          this.addSystem(config.systems[i], i);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"addRunners\",\n    value: function addRunners() {\n      var _this2 = this;\n      for (var _len = arguments.length, runnerIds = new Array(_len), _key = 0; _key < _len; _key++) {\n        runnerIds[_key] = arguments[_key];\n      }\n      runnerIds.forEach(function (runnerId) {\n        _this2.runners[runnerId] = new Runner(runnerId);\n      });\n    }\n  }, {\n    key: \"addSystem\",\n    value: function addSystem(ClassRef, name) {\n      var system = new ClassRef(this);\n      if (this[name]) {\n        throw new Error(\"Whoops! The name \\\"\".concat(name, \"\\\" is already in use\"));\n      }\n      this[name] = system;\n      this._systemsHash[name] = system;\n      for (var i in this.runners) {\n        this.runners[i].add(system);\n      }\n      return this;\n    }\n  }, {\n    key: \"emitWithCustomOptions\",\n    value: function emitWithCustomOptions(runner, options) {\n      var _this3 = this;\n      var systemHashKeys = Object.keys(this._systemsHash);\n      runner.items.forEach(function (system) {\n        var systemName = systemHashKeys.find(function (systemId) {\n          return _this3._systemsHash[systemId] === system;\n        });\n        system[runner.name](options[systemName]);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      Object.values(this.runners).forEach(function (runner) {\n        runner.destroy();\n      });\n      this._systemsHash = {};\n    }\n  }]);\n  return SystemManager;\n}(EventEmitter);\nexport { SystemManager };","map":null,"metadata":{},"sourceType":"module"}