{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar BezierUtils = /*#__PURE__*/function () {\n  function BezierUtils() {\n    _classCallCheck(this, BezierUtils);\n  }\n  _createClass(BezierUtils, null, [{\n    key: \"curveLength\",\n    value: function curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n      var n = 10;\n      var result = 0;\n      var t = 0;\n      var t2 = 0;\n      var t3 = 0;\n      var nt = 0;\n      var nt2 = 0;\n      var nt3 = 0;\n      var x = 0;\n      var y = 0;\n      var dx = 0;\n      var dy = 0;\n      var prevX = fromX;\n      var prevY = fromY;\n      for (var i = 1; i <= n; ++i) {\n        t = i / n;\n        t2 = t * t;\n        t3 = t2 * t;\n        nt = 1 - t;\n        nt2 = nt * nt;\n        nt3 = nt2 * nt;\n        x = nt3 * fromX + 3 * nt2 * t * cpX + 3 * nt * t2 * cpX2 + t3 * toX;\n        y = nt3 * fromY + 3 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n        dx = prevX - x;\n        dy = prevY - y;\n        prevX = x;\n        prevY = y;\n        result += Math.sqrt(dx * dx + dy * dy);\n      }\n      return result;\n    }\n  }, {\n    key: \"curveTo\",\n    value: function curveTo(cpX, cpY, cpX2, cpY2, toX, toY, points) {\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      points.length -= 2;\n      var n = _const.GRAPHICS_CURVES._segmentsCount(BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY));\n      var dt = 0;\n      var dt2 = 0;\n      var dt3 = 0;\n      var t2 = 0;\n      var t3 = 0;\n      points.push(fromX, fromY);\n      for (var i = 1, j = 0; i <= n; ++i) {\n        j = i / n;\n        dt = 1 - j;\n        dt2 = dt * dt;\n        dt3 = dt2 * dt;\n        t2 = j * j;\n        t3 = t2 * j;\n        points.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);\n      }\n    }\n  }]);\n  return BezierUtils;\n}();\nexports.BezierUtils = BezierUtils;","map":null,"metadata":{},"sourceType":"script"}