{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar EventBoundary = require('./EventBoundary.js');\nvar FederatedPointerEvent = require('./FederatedPointerEvent.js');\nvar FederatedWheelEvent = require('./FederatedWheelEvent.js');\nvar core = require('@pixi/core');\nvar MOUSE_POINTER_ID = 1;\nvar TOUCH_TO_POINTER = {\n  touchstart: \"pointerdown\",\n  touchend: \"pointerup\",\n  touchendoutside: \"pointerupoutside\",\n  touchmove: \"pointermove\",\n  touchcancel: \"pointercancel\"\n};\nvar EventSystem = /*#__PURE__*/function () {\n  function EventSystem(renderer) {\n    _classCallCheck(this, EventSystem);\n    this.supportsTouchEvents = \"ontouchstart\" in globalThis;\n    this.supportsPointerEvents = !!globalThis.PointerEvent;\n    this.domElement = null;\n    this.resolution = 1;\n    this.renderer = renderer;\n    this.rootBoundary = new EventBoundary.EventBoundary(null);\n    this.autoPreventDefault = true;\n    this.eventsAdded = false;\n    this.rootPointerEvent = new FederatedPointerEvent.FederatedPointerEvent(null);\n    this.rootWheelEvent = new FederatedWheelEvent.FederatedWheelEvent(null);\n    this.cursorStyles = {\n      default: \"inherit\",\n      pointer: \"pointer\"\n    };\n    this.onPointerDown = this.onPointerDown.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.onPointerUp = this.onPointerUp.bind(this);\n    this.onPointerOverOut = this.onPointerOverOut.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n  _createClass(EventSystem, [{\n    key: \"init\",\n    value: function init() {\n      var _this$renderer = this.renderer,\n        view = _this$renderer.view,\n        resolution = _this$renderer.resolution;\n      this.setTargetElement(view);\n      this.resolution = resolution;\n    }\n  }, {\n    key: \"resolutionChange\",\n    value: function resolutionChange(resolution) {\n      this.resolution = resolution;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.setTargetElement(null);\n      this.renderer = null;\n    }\n  }, {\n    key: \"setCursor\",\n    value: function setCursor(mode) {\n      mode = mode || \"default\";\n      var applyStyles = true;\n      if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas) {\n        applyStyles = false;\n      }\n      if (this.currentCursor === mode) {\n        return;\n      }\n      this.currentCursor = mode;\n      var style = this.cursorStyles[mode];\n      if (style) {\n        switch (typeof style) {\n          case \"string\":\n            if (applyStyles) {\n              this.domElement.style.cursor = style;\n            }\n            break;\n          case \"function\":\n            style(mode);\n            break;\n          case \"object\":\n            if (applyStyles) {\n              Object.assign(this.domElement.style, style);\n            }\n            break;\n        }\n      } else if (applyStyles && typeof mode === \"string\" && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n        this.domElement.style.cursor = mode;\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(nativeEvent) {\n      this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n      if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n      var events = this.normalizeToPointerData(nativeEvent);\n      if (this.autoPreventDefault && events[0].isNormalized) {\n        var cancelable = nativeEvent.cancelable || !(\"cancelable\" in nativeEvent);\n        if (cancelable) {\n          nativeEvent.preventDefault();\n        }\n      }\n      for (var i = 0, j = events.length; i < j; i++) {\n        var nativeEvent2 = events[i];\n        var federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent2);\n        this.rootBoundary.mapEvent(federatedEvent);\n      }\n      this.setCursor(this.rootBoundary.cursor);\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(nativeEvent) {\n      this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n      if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n      var normalizedEvents = this.normalizeToPointerData(nativeEvent);\n      for (var i = 0, j = normalizedEvents.length; i < j; i++) {\n        var event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n        this.rootBoundary.mapEvent(event);\n      }\n      this.setCursor(this.rootBoundary.cursor);\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(nativeEvent) {\n      this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n      if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n      var target = nativeEvent.target;\n      if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0) {\n        target = nativeEvent.composedPath()[0];\n      }\n      var outside = target !== this.domElement ? \"outside\" : \"\";\n      var normalizedEvents = this.normalizeToPointerData(nativeEvent);\n      for (var i = 0, j = normalizedEvents.length; i < j; i++) {\n        var event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n        event.type += outside;\n        this.rootBoundary.mapEvent(event);\n      }\n      this.setCursor(this.rootBoundary.cursor);\n    }\n  }, {\n    key: \"onPointerOverOut\",\n    value: function onPointerOverOut(nativeEvent) {\n      this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n      if (this.supportsTouchEvents && nativeEvent.pointerType === \"touch\") return;\n      var normalizedEvents = this.normalizeToPointerData(nativeEvent);\n      for (var i = 0, j = normalizedEvents.length; i < j; i++) {\n        var event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n        this.rootBoundary.mapEvent(event);\n      }\n      this.setCursor(this.rootBoundary.cursor);\n    }\n  }, {\n    key: \"onWheel\",\n    value: function onWheel(nativeEvent) {\n      var wheelEvent = this.normalizeWheelEvent(nativeEvent);\n      this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n      this.rootBoundary.mapEvent(wheelEvent);\n    }\n  }, {\n    key: \"setTargetElement\",\n    value: function setTargetElement(element) {\n      this.removeEvents();\n      this.domElement = element;\n      this.addEvents();\n    }\n  }, {\n    key: \"addEvents\",\n    value: function addEvents() {\n      if (this.eventsAdded || !this.domElement) {\n        return;\n      }\n      var style = this.domElement.style;\n      if (style) {\n        if (globalThis.navigator.msPointerEnabled) {\n          style.msContentZooming = \"none\";\n          style.msTouchAction = \"none\";\n        } else if (this.supportsPointerEvents) {\n          style.touchAction = \"none\";\n        }\n      }\n      if (this.supportsPointerEvents) {\n        globalThis.document.addEventListener(\"pointermove\", this.onPointerMove, true);\n        this.domElement.addEventListener(\"pointerdown\", this.onPointerDown, true);\n        this.domElement.addEventListener(\"pointerleave\", this.onPointerOverOut, true);\n        this.domElement.addEventListener(\"pointerover\", this.onPointerOverOut, true);\n        globalThis.addEventListener(\"pointerup\", this.onPointerUp, true);\n      } else {\n        globalThis.document.addEventListener(\"mousemove\", this.onPointerMove, true);\n        this.domElement.addEventListener(\"mousedown\", this.onPointerDown, true);\n        this.domElement.addEventListener(\"mouseout\", this.onPointerOverOut, true);\n        this.domElement.addEventListener(\"mouseover\", this.onPointerOverOut, true);\n        globalThis.addEventListener(\"mouseup\", this.onPointerUp, true);\n      }\n      if (this.supportsTouchEvents) {\n        this.domElement.addEventListener(\"touchstart\", this.onPointerDown, true);\n        this.domElement.addEventListener(\"touchend\", this.onPointerUp, true);\n        this.domElement.addEventListener(\"touchmove\", this.onPointerMove, true);\n      }\n      this.domElement.addEventListener(\"wheel\", this.onWheel, {\n        passive: true,\n        capture: true\n      });\n      this.eventsAdded = true;\n    }\n  }, {\n    key: \"removeEvents\",\n    value: function removeEvents() {\n      if (!this.eventsAdded || !this.domElement) {\n        return;\n      }\n      var style = this.domElement.style;\n      if (globalThis.navigator.msPointerEnabled) {\n        style.msContentZooming = \"\";\n        style.msTouchAction = \"\";\n      } else if (this.supportsPointerEvents) {\n        style.touchAction = \"\";\n      }\n      if (this.supportsPointerEvents) {\n        globalThis.document.removeEventListener(\"pointermove\", this.onPointerMove, true);\n        this.domElement.removeEventListener(\"pointerdown\", this.onPointerDown, true);\n        this.domElement.removeEventListener(\"pointerleave\", this.onPointerOverOut, true);\n        this.domElement.removeEventListener(\"pointerover\", this.onPointerOverOut, true);\n        globalThis.removeEventListener(\"pointerup\", this.onPointerUp, true);\n      } else {\n        globalThis.document.removeEventListener(\"mousemove\", this.onPointerMove, true);\n        this.domElement.removeEventListener(\"mousedown\", this.onPointerDown, true);\n        this.domElement.removeEventListener(\"mouseout\", this.onPointerOverOut, true);\n        this.domElement.removeEventListener(\"mouseover\", this.onPointerOverOut, true);\n        globalThis.removeEventListener(\"mouseup\", this.onPointerUp, true);\n      }\n      if (this.supportsTouchEvents) {\n        this.domElement.removeEventListener(\"touchstart\", this.onPointerDown, true);\n        this.domElement.removeEventListener(\"touchend\", this.onPointerUp, true);\n        this.domElement.removeEventListener(\"touchmove\", this.onPointerMove, true);\n      }\n      this.domElement.removeEventListener(\"wheel\", this.onWheel, true);\n      this.domElement = null;\n      this.eventsAdded = false;\n    }\n  }, {\n    key: \"mapPositionToPoint\",\n    value: function mapPositionToPoint(point, x, y) {\n      var rect;\n      if (!this.domElement.parentElement) {\n        rect = {\n          x: 0,\n          y: 0,\n          width: this.domElement.width,\n          height: this.domElement.height,\n          left: 0,\n          top: 0\n        };\n      } else {\n        rect = this.domElement.getBoundingClientRect();\n      }\n      var resolutionMultiplier = 1 / this.resolution;\n      point.x = (x - rect.left) * (this.domElement.width / rect.width) * resolutionMultiplier;\n      point.y = (y - rect.top) * (this.domElement.height / rect.height) * resolutionMultiplier;\n    }\n  }, {\n    key: \"normalizeToPointerData\",\n    value: function normalizeToPointerData(event) {\n      var normalizedEvents = [];\n      if (this.supportsTouchEvents && event instanceof TouchEvent) {\n        for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n          var touch = event.changedTouches[i];\n          if (typeof touch.button === \"undefined\") touch.button = 0;\n          if (typeof touch.buttons === \"undefined\") touch.buttons = 1;\n          if (typeof touch.isPrimary === \"undefined\") {\n            touch.isPrimary = event.touches.length === 1 && event.type === \"touchstart\";\n          }\n          if (typeof touch.width === \"undefined\") touch.width = touch.radiusX || 1;\n          if (typeof touch.height === \"undefined\") touch.height = touch.radiusY || 1;\n          if (typeof touch.tiltX === \"undefined\") touch.tiltX = 0;\n          if (typeof touch.tiltY === \"undefined\") touch.tiltY = 0;\n          if (typeof touch.pointerType === \"undefined\") touch.pointerType = \"touch\";\n          if (typeof touch.pointerId === \"undefined\") touch.pointerId = touch.identifier || 0;\n          if (typeof touch.pressure === \"undefined\") touch.pressure = touch.force || 0.5;\n          if (typeof touch.twist === \"undefined\") touch.twist = 0;\n          if (typeof touch.tangentialPressure === \"undefined\") touch.tangentialPressure = 0;\n          if (typeof touch.layerX === \"undefined\") touch.layerX = touch.offsetX = touch.clientX;\n          if (typeof touch.layerY === \"undefined\") touch.layerY = touch.offsetY = touch.clientY;\n          touch.isNormalized = true;\n          touch.type = event.type;\n          normalizedEvents.push(touch);\n        }\n      } else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n        var tempEvent = event;\n        if (typeof tempEvent.isPrimary === \"undefined\") tempEvent.isPrimary = true;\n        if (typeof tempEvent.width === \"undefined\") tempEvent.width = 1;\n        if (typeof tempEvent.height === \"undefined\") tempEvent.height = 1;\n        if (typeof tempEvent.tiltX === \"undefined\") tempEvent.tiltX = 0;\n        if (typeof tempEvent.tiltY === \"undefined\") tempEvent.tiltY = 0;\n        if (typeof tempEvent.pointerType === \"undefined\") tempEvent.pointerType = \"mouse\";\n        if (typeof tempEvent.pointerId === \"undefined\") tempEvent.pointerId = MOUSE_POINTER_ID;\n        if (typeof tempEvent.pressure === \"undefined\") tempEvent.pressure = 0.5;\n        if (typeof tempEvent.twist === \"undefined\") tempEvent.twist = 0;\n        if (typeof tempEvent.tangentialPressure === \"undefined\") tempEvent.tangentialPressure = 0;\n        tempEvent.isNormalized = true;\n        normalizedEvents.push(tempEvent);\n      } else {\n        normalizedEvents.push(event);\n      }\n      return normalizedEvents;\n    }\n  }, {\n    key: \"normalizeWheelEvent\",\n    value: function normalizeWheelEvent(nativeEvent) {\n      var event = this.rootWheelEvent;\n      this.transferMouseData(event, nativeEvent);\n      event.deltaMode = nativeEvent.deltaMode;\n      event.deltaX = nativeEvent.deltaX;\n      event.deltaY = nativeEvent.deltaY;\n      event.deltaZ = nativeEvent.deltaZ;\n      this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n      event.global.copyFrom(event.screen);\n      event.offset.copyFrom(event.screen);\n      event.nativeEvent = nativeEvent;\n      event.type = nativeEvent.type;\n      return event;\n    }\n  }, {\n    key: \"bootstrapEvent\",\n    value: function bootstrapEvent(event, nativeEvent) {\n      event.originalEvent = null;\n      event.nativeEvent = nativeEvent;\n      event.pointerId = nativeEvent.pointerId;\n      event.width = nativeEvent.width;\n      event.height = nativeEvent.height;\n      event.isPrimary = nativeEvent.isPrimary;\n      event.pointerType = nativeEvent.pointerType;\n      event.pressure = nativeEvent.pressure;\n      event.tangentialPressure = nativeEvent.tangentialPressure;\n      event.tiltX = nativeEvent.tiltX;\n      event.tiltY = nativeEvent.tiltY;\n      event.twist = nativeEvent.twist;\n      this.transferMouseData(event, nativeEvent);\n      this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n      event.global.copyFrom(event.screen);\n      event.offset.copyFrom(event.screen);\n      event.isTrusted = nativeEvent.isTrusted;\n      if (event.type === \"pointerleave\") {\n        event.type = \"pointerout\";\n      }\n      if (event.type.startsWith(\"mouse\")) {\n        event.type = event.type.replace(\"mouse\", \"pointer\");\n      }\n      if (event.type.startsWith(\"touch\")) {\n        event.type = TOUCH_TO_POINTER[event.type] || event.type;\n      }\n      return event;\n    }\n  }, {\n    key: \"transferMouseData\",\n    value: function transferMouseData(event, nativeEvent) {\n      event.isTrusted = nativeEvent.isTrusted;\n      event.srcElement = nativeEvent.srcElement;\n      event.timeStamp = performance.now();\n      event.type = nativeEvent.type;\n      event.altKey = nativeEvent.altKey;\n      event.button = nativeEvent.button;\n      event.buttons = nativeEvent.buttons;\n      event.client.x = nativeEvent.clientX;\n      event.client.y = nativeEvent.clientY;\n      event.ctrlKey = nativeEvent.ctrlKey;\n      event.metaKey = nativeEvent.metaKey;\n      event.movement.x = nativeEvent.movementX;\n      event.movement.y = nativeEvent.movementY;\n      event.page.x = nativeEvent.pageX;\n      event.page.y = nativeEvent.pageY;\n      event.relatedTarget = null;\n      event.shiftKey = nativeEvent.shiftKey;\n    }\n  }]);\n  return EventSystem;\n}();\nEventSystem.extension = {\n  name: \"events\",\n  type: [core.ExtensionType.RendererSystem, core.ExtensionType.CanvasRendererSystem]\n};\ncore.extensions.add(EventSystem);\nexports.EventSystem = EventSystem;","map":null,"metadata":{},"sourceType":"script"}