{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { mapWebGLBlendModesToPixi } from './utils/mapWebGLBlendModesToPixi.mjs';\nimport { State } from './State.mjs';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar BLEND = 0;\nvar OFFSET = 1;\nvar CULLING = 2;\nvar DEPTH_TEST = 3;\nvar WINDING = 4;\nvar DEPTH_MASK = 5;\nvar _StateSystem = /*#__PURE__*/function () {\n  function _StateSystem() {\n    _classCallCheck(this, _StateSystem);\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = BLEND_MODES.NONE;\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = new State();\n    this.defaultState.blend = true;\n  }\n  _createClass(_StateSystem, [{\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      this.gl = gl;\n      this.blendModes = mapWebGLBlendModesToPixi(gl);\n      this.set(this.defaultState);\n      this.reset();\n    }\n  }, {\n    key: \"set\",\n    value: function set(state) {\n      state = state || this.defaultState;\n      if (this.stateId !== state.data) {\n        var diff = this.stateId ^ state.data;\n        var i = 0;\n        while (diff) {\n          if (diff & 1) {\n            this.map[i].call(this, !!(state.data & 1 << i));\n          }\n          diff = diff >> 1;\n          i++;\n        }\n        this.stateId = state.data;\n      }\n      for (var _i = 0; _i < this.checks.length; _i++) {\n        this.checks[_i](this, state);\n      }\n    }\n  }, {\n    key: \"forceState\",\n    value: function forceState(state) {\n      state = state || this.defaultState;\n      for (var i = 0; i < this.map.length; i++) {\n        this.map[i].call(this, !!(state.data & 1 << i));\n      }\n      for (var _i2 = 0; _i2 < this.checks.length; _i2++) {\n        this.checks[_i2](this, state);\n      }\n      this.stateId = state.data;\n    }\n  }, {\n    key: \"setBlend\",\n    value: function setBlend(value) {\n      this.updateCheck(_StateSystem.checkBlendMode, value);\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n    }\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(value) {\n      this.updateCheck(_StateSystem.checkPolygonOffset, value);\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n    }\n  }, {\n    key: \"setDepthTest\",\n    value: function setDepthTest(value) {\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n    }\n  }, {\n    key: \"setDepthMask\",\n    value: function setDepthMask(value) {\n      this.gl.depthMask(value);\n    }\n  }, {\n    key: \"setCullFace\",\n    value: function setCullFace(value) {\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n    }\n  }, {\n    key: \"setFrontFace\",\n    value: function setFrontFace(value) {\n      this.gl.frontFace(this.gl[value ? \"CW\" : \"CCW\"]);\n    }\n  }, {\n    key: \"setBlendMode\",\n    value: function setBlendMode(value) {\n      if (value === this.blendMode) {\n        return;\n      }\n      this.blendMode = value;\n      var mode = this.blendModes[value];\n      var gl = this.gl;\n      if (mode.length === 2) {\n        gl.blendFunc(mode[0], mode[1]);\n      } else {\n        gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n      }\n      if (mode.length === 6) {\n        this._blendEq = true;\n        gl.blendEquationSeparate(mode[4], mode[5]);\n      } else if (this._blendEq) {\n        this._blendEq = false;\n        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      }\n    }\n  }, {\n    key: \"setPolygonOffset\",\n    value: function setPolygonOffset(value, scale) {\n      this.gl.polygonOffset(value, scale);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n      this.forceState(this.defaultState);\n      this._blendEq = true;\n      this.blendMode = -1;\n      this.setBlendMode(0);\n    }\n  }, {\n    key: \"updateCheck\",\n    value: function updateCheck(func, value) {\n      var index = this.checks.indexOf(func);\n      if (value && index === -1) {\n        this.checks.push(func);\n      } else if (!value && index !== -1) {\n        this.checks.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.gl = null;\n    }\n  }], [{\n    key: \"checkBlendMode\",\n    value: function checkBlendMode(system, state) {\n      system.setBlendMode(state.blendMode);\n    }\n  }, {\n    key: \"checkPolygonOffset\",\n    value: function checkPolygonOffset(system, state) {\n      system.setPolygonOffset(1, state.polygonOffset);\n    }\n  }]);\n  return _StateSystem;\n}();\nvar StateSystem = _StateSystem;\nStateSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"state\"\n};\nextensions.add(StateSystem);\nexport { StateSystem };","map":null,"metadata":{},"sourceType":"module"}