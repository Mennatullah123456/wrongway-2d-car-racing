{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Resource } from './Resource.mjs';\nimport { ALPHA_MODES } from '@pixi/constants';\nvar BufferResource = /*#__PURE__*/function (_Resource) {\n  _inherits(BufferResource, _Resource);\n  function BufferResource(source, options) {\n    var _this;\n    _classCallCheck(this, BufferResource);\n    var _ref = options || {},\n      width = _ref.width,\n      height = _ref.height;\n    if (!width || !height) {\n      throw new Error(\"BufferResource width or height invalid\");\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BufferResource).call(this, width, height));\n    _this.data = source;\n    return _this;\n  }\n  _createClass(BufferResource, [{\n    key: \"upload\",\n    value: function upload(renderer, baseTexture, glTexture) {\n      var gl = renderer.gl;\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n      var width = baseTexture.realWidth;\n      var height = baseTexture.realHeight;\n      if (glTexture.width === width && glTexture.height === height) {\n        gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);\n      } else {\n        glTexture.width = width;\n        glTexture.height = height;\n        gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);\n      }\n      return true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.data = null;\n    }\n  }], [{\n    key: \"test\",\n    value: function test(source) {\n      return source instanceof Float32Array || source instanceof Uint8Array || source instanceof Uint32Array;\n    }\n  }]);\n  return BufferResource;\n}(Resource);\nexport { BufferResource };","map":null,"metadata":{},"sourceType":"module"}