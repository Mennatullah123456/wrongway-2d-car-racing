{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Point } from './Point.mjs';\nimport { PI_2 } from './const.mjs';\nvar Matrix = /*#__PURE__*/function () {\n  function Matrix() {\n    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var tx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var ty = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    _classCallCheck(this, Matrix);\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  _createClass(Matrix, [{\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      this.a = array[0];\n      this.b = array[1];\n      this.c = array[3];\n      this.d = array[4];\n      this.tx = array[2];\n      this.ty = array[5];\n    }\n  }, {\n    key: \"set\",\n    value: function set(a, b, c, d, tx, ty) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.tx = tx;\n      this.ty = ty;\n      return this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(transpose, out) {\n      if (!this.array) {\n        this.array = new Float32Array(9);\n      }\n      var array = out || this.array;\n      if (transpose) {\n        array[0] = this.a;\n        array[1] = this.b;\n        array[2] = 0;\n        array[3] = this.c;\n        array[4] = this.d;\n        array[5] = 0;\n        array[6] = this.tx;\n        array[7] = this.ty;\n        array[8] = 1;\n      } else {\n        array[0] = this.a;\n        array[1] = this.c;\n        array[2] = this.tx;\n        array[3] = this.b;\n        array[4] = this.d;\n        array[5] = this.ty;\n        array[6] = 0;\n        array[7] = 0;\n        array[8] = 1;\n      }\n      return array;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(pos, newPos) {\n      newPos = newPos || new Point();\n      var x = pos.x;\n      var y = pos.y;\n      newPos.x = this.a * x + this.c * y + this.tx;\n      newPos.y = this.b * x + this.d * y + this.ty;\n      return newPos;\n    }\n  }, {\n    key: \"applyInverse\",\n    value: function applyInverse(pos, newPos) {\n      newPos = newPos || new Point();\n      var id = 1 / (this.a * this.d + this.c * -this.b);\n      var x = pos.x;\n      var y = pos.y;\n      newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n      newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n      return newPos;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(x, y) {\n      this.tx += x;\n      this.ty += y;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(x, y) {\n      this.a *= x;\n      this.d *= y;\n      this.c *= x;\n      this.b *= y;\n      this.tx *= x;\n      this.ty *= y;\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var a1 = this.a;\n      var c1 = this.c;\n      var tx1 = this.tx;\n      this.a = a1 * cos - this.b * sin;\n      this.b = a1 * sin + this.b * cos;\n      this.c = c1 * cos - this.d * sin;\n      this.d = c1 * sin + this.d * cos;\n      this.tx = tx1 * cos - this.ty * sin;\n      this.ty = tx1 * sin + this.ty * cos;\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(matrix) {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      this.a = matrix.a * a1 + matrix.b * c1;\n      this.b = matrix.a * b1 + matrix.b * d1;\n      this.c = matrix.c * a1 + matrix.d * c1;\n      this.d = matrix.c * b1 + matrix.d * d1;\n      this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n      this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n      return this;\n    }\n  }, {\n    key: \"setTransform\",\n    value: function setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n      this.a = Math.cos(rotation + skewY) * scaleX;\n      this.b = Math.sin(rotation + skewY) * scaleX;\n      this.c = -Math.sin(rotation - skewX) * scaleY;\n      this.d = Math.cos(rotation - skewX) * scaleY;\n      this.tx = x - (pivotX * this.a + pivotY * this.c);\n      this.ty = y - (pivotX * this.b + pivotY * this.d);\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(matrix) {\n      var tx1 = this.tx;\n      if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n        var a1 = this.a;\n        var c1 = this.c;\n        this.a = a1 * matrix.a + this.b * matrix.c;\n        this.b = a1 * matrix.b + this.b * matrix.d;\n        this.c = c1 * matrix.a + this.d * matrix.c;\n        this.d = c1 * matrix.b + this.d * matrix.d;\n      }\n      this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n      this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n      return this;\n    }\n  }, {\n    key: \"decompose\",\n    value: function decompose(transform) {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var d = this.d;\n      var pivot = transform.pivot;\n      var skewX = -Math.atan2(-c, d);\n      var skewY = Math.atan2(b, a);\n      var delta = Math.abs(skewX + skewY);\n      if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n        transform.rotation = skewY;\n        transform.skew.x = transform.skew.y = 0;\n      } else {\n        transform.rotation = 0;\n        transform.skew.x = skewX;\n        transform.skew.y = skewY;\n      }\n      transform.scale.x = Math.sqrt(a * a + b * b);\n      transform.scale.y = Math.sqrt(c * c + d * d);\n      transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n      transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n      return transform;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      var tx1 = this.tx;\n      var n = a1 * d1 - b1 * c1;\n      this.a = d1 / n;\n      this.b = -b1 / n;\n      this.c = -c1 / n;\n      this.d = a1 / n;\n      this.tx = (c1 * this.ty - d1 * tx1) / n;\n      this.ty = -(a1 * this.ty - b1 * tx1) / n;\n      return this;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      this.a = 1;\n      this.b = 0;\n      this.c = 0;\n      this.d = 1;\n      this.tx = 0;\n      this.ty = 0;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var matrix = new Matrix();\n      matrix.a = this.a;\n      matrix.b = this.b;\n      matrix.c = this.c;\n      matrix.d = this.d;\n      matrix.tx = this.tx;\n      matrix.ty = this.ty;\n      return matrix;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(matrix) {\n      matrix.a = this.a;\n      matrix.b = this.b;\n      matrix.c = this.c;\n      matrix.d = this.d;\n      matrix.tx = this.tx;\n      matrix.ty = this.ty;\n      return matrix;\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(matrix) {\n      this.a = matrix.a;\n      this.b = matrix.b;\n      this.c = matrix.c;\n      this.d = matrix.d;\n      this.tx = matrix.tx;\n      this.ty = matrix.ty;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[@pixi/math:Matrix a=\".concat(this.a, \" b=\").concat(this.b, \" c=\").concat(this.c, \" d=\").concat(this.d, \" tx=\").concat(this.tx, \" ty=\").concat(this.ty, \"]\");\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      return new Matrix();\n    }\n  }, {\n    key: \"TEMP_MATRIX\",\n    get: function get() {\n      return new Matrix();\n    }\n  }]);\n  return Matrix;\n}();\nexport { Matrix };","map":null,"metadata":{},"sourceType":"module"}