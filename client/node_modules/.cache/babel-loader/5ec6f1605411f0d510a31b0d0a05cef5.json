{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _TYPES_TO_BYTES_PER_C, _FORMATS_TO_COMPONENT, _TYPES_TO_BYTES_PER_P;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar _const = require('../const.js');\nrequire('../resources/index.js');\nvar CompressedTextureResource = require('../resources/CompressedTextureResource.js');\nvar FILE_IDENTIFIER = [171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10];\nvar ENDIANNESS = 67305985;\nvar KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n};\nvar FILE_HEADER_SIZE = 64;\nvar TYPES_TO_BYTES_PER_COMPONENT = (_TYPES_TO_BYTES_PER_C = {}, _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_BYTE, 1), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_SHORT, 2), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.INT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_INT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.FLOAT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.HALF_FLOAT, 8), _TYPES_TO_BYTES_PER_C);\nvar FORMATS_TO_COMPONENTS = (_FORMATS_TO_COMPONENT = {}, _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RGBA, 4), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RGB, 3), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RG, 2), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RED, 1), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.LUMINANCE, 1), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.LUMINANCE_ALPHA, 2), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.ALPHA, 1), _FORMATS_TO_COMPONENT);\nvar TYPES_TO_BYTES_PER_PIXEL = (_TYPES_TO_BYTES_PER_P = {}, _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_4_4_4_4, 2), _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_5_5_5_1, 2), _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_5_6_5, 2), _TYPES_TO_BYTES_PER_P);\nfunction parseKTX(url, arrayBuffer) {\n  var loadKeyValueData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView)) {\n    return null;\n  }\n  var littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n  var glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n  var glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n  var glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n  var pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n  var pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;\n  var pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;\n  var numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;\n  var numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n  var numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n  var bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1) {\n    throw new Error(\"Only 2D textures are supported\");\n  }\n  if (numberOfFaces !== 1) {\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  }\n  if (numberOfArrayElements !== 1) {\n    throw new Error(\"WebGL does not support array textures\");\n  }\n  var blockWidth = 4;\n  var blockHeight = 4;\n  var alignedWidth = pixelWidth + 3 & ~3;\n  var alignedHeight = pixelHeight + 3 & ~3;\n  var imageBuffers = new Array(numberOfArrayElements);\n  var imagePixels = pixelWidth * pixelHeight;\n  if (glType === 0) {\n    imagePixels = alignedWidth * alignedHeight;\n  }\n  var imagePixelByteSize;\n  if (glType !== 0) {\n    if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n    } else {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n    }\n  } else {\n    imagePixelByteSize = _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n  }\n  if (imagePixelByteSize === void 0) {\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  }\n  var kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  var imageByteSize = imagePixels * imagePixelByteSize;\n  var mipByteSize = imageByteSize;\n  var mipWidth = pixelWidth;\n  var mipHeight = pixelHeight;\n  var alignedMipWidth = alignedWidth;\n  var alignedMipHeight = alignedHeight;\n  var imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (var mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    var imageSize = dataView.getUint32(imageOffset, littleEndian);\n    var elementOffset = imageOffset + 4;\n    for (var arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      var mips = imageBuffers[arrayElement];\n      if (!mips) {\n        mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n      }\n      mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      };\n      elementOffset += mipByteSize;\n    }\n    imageOffset += imageSize + 4;\n    imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset;\n    mipWidth = mipWidth >> 1 || 1;\n    mipHeight = mipHeight >> 1 || 1;\n    alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1);\n    alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1);\n    mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  if (glType !== 0) {\n    return {\n      uncompressed: imageBuffers.map(function (levelBuffers) {\n        var buffer = levelBuffers[0].levelBuffer;\n        var convertToInt = false;\n        if (glType === core.TYPES.FLOAT) {\n          buffer = new Float32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === core.TYPES.UNSIGNED_INT) {\n          convertToInt = true;\n          buffer = new Uint32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === core.TYPES.INT) {\n          convertToInt = true;\n          buffer = new Int32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        }\n        return {\n          resource: new core.BufferResource(buffer, {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }),\n          type: glType,\n          format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n        };\n      }),\n      kvData: kvData\n    };\n  }\n  return {\n    compressed: imageBuffers.map(function (levelBuffers) {\n      return new CompressedTextureResource.CompressedTextureResource(null, {\n        format: glInternalFormat,\n        width: pixelWidth,\n        height: pixelHeight,\n        levels: numberOfMipmapLevels,\n        levelBuffers: levelBuffers\n      });\n    }),\n    kvData: kvData\n  };\n}\nfunction validate(url, dataView) {\n  for (var i = 0; i < FILE_IDENTIFIER.length; i++) {\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n      console.error(\"\".concat(url, \" is not a valid *.ktx file!\"));\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case core.FORMATS.RGBA:\n      return core.FORMATS.RGBA_INTEGER;\n    case core.FORMATS.RGB:\n      return core.FORMATS.RGB_INTEGER;\n    case core.FORMATS.RG:\n      return core.FORMATS.RG_INTEGER;\n    case core.FORMATS.RED:\n      return core.FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  var kvData = /* @__PURE__ */new Map();\n  var bytesIntoKeyValueData = 0;\n  while (bytesIntoKeyValueData < bytesOfKeyValueData) {\n    var keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n    var keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n    var valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error(\"KTXLoader: keyAndValueByteSize out of bounds\");\n      break;\n    }\n    var keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize; keyNulByte++) {\n      if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0) {\n        break;\n      }\n    }\n    if (keyNulByte === -1) {\n      console.error(\"KTXLoader: Failed to find null byte terminating kvData key\");\n      break;\n    }\n    var key = new TextDecoder().decode(new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte));\n    var value = new DataView(dataView.buffer, keyAndValueByteOffset + keyNulByte + 1, keyAndValueByteSize - keyNulByte - 1);\n    kvData.set(key, value);\n    bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\nexports.FORMATS_TO_COMPONENTS = FORMATS_TO_COMPONENTS;\nexports.TYPES_TO_BYTES_PER_COMPONENT = TYPES_TO_BYTES_PER_COMPONENT;\nexports.TYPES_TO_BYTES_PER_PIXEL = TYPES_TO_BYTES_PER_PIXEL;\nexports.parseKTX = parseKTX;","map":null,"metadata":{},"sourceType":"script"}