{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar generateBlurVertSource = require('./generateBlurVertSource.js');\nvar generateBlurFragSource = require('./generateBlurFragSource.js');\nvar BlurFilterPass = /*#__PURE__*/function (_core$Filter) {\n  _inherits(BlurFilterPass, _core$Filter);\n  function BlurFilterPass(horizontal) {\n    var _this;\n    var strength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : core.settings.FILTER_RESOLUTION;\n    var kernelSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;\n    _classCallCheck(this, BlurFilterPass);\n    var vertSrc = generateBlurVertSource.generateBlurVertSource(kernelSize, horizontal);\n    var fragSrc = generateBlurFragSource.generateBlurFragSource(kernelSize);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlurFilterPass).call(this, vertSrc, fragSrc));\n    _this.horizontal = horizontal;\n    _this.resolution = resolution;\n    _this._quality = 0;\n    _this.quality = quality;\n    _this.blur = strength;\n    return _this;\n  }\n  _createClass(BlurFilterPass, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      if (output) {\n        if (this.horizontal) {\n          this.uniforms.strength = 1 / output.width * (output.width / input.width);\n        } else {\n          this.uniforms.strength = 1 / output.height * (output.height / input.height);\n        }\n      } else {\n        if (this.horizontal) {\n          this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width);\n        } else {\n          this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height);\n        }\n      }\n      this.uniforms.strength *= this.strength;\n      this.uniforms.strength /= this.passes;\n      if (this.passes === 1) {\n        filterManager.applyFilter(this, input, output, clearMode);\n      } else {\n        var renderTarget = filterManager.getFilterTexture();\n        var renderer = filterManager.renderer;\n        var flip = input;\n        var flop = renderTarget;\n        this.state.blend = false;\n        filterManager.applyFilter(this, flip, flop, core.CLEAR_MODES.CLEAR);\n        for (var i = 1; i < this.passes - 1; i++) {\n          filterManager.bindAndClear(flip, core.CLEAR_MODES.BLIT);\n          this.uniforms.uSampler = flop;\n          var temp = flop;\n          flop = flip;\n          flip = temp;\n          renderer.shader.bind(this);\n          renderer.geometry.draw(5);\n        }\n        this.state.blend = true;\n        filterManager.applyFilter(this, flop, output, clearMode);\n        filterManager.returnFilterTexture(renderTarget);\n      }\n    }\n  }, {\n    key: \"blur\",\n    get: function get() {\n      return this.strength;\n    },\n    set: function set(value) {\n      this.padding = 1 + Math.abs(value) * 2;\n      this.strength = value;\n    }\n  }, {\n    key: \"quality\",\n    get: function get() {\n      return this._quality;\n    },\n    set: function set(value) {\n      this._quality = value;\n      this.passes = value;\n    }\n  }]);\n  return BlurFilterPass;\n}(core.Filter);\nexports.BlurFilterPass = BlurFilterPass;","map":null,"metadata":{},"sourceType":"script"}