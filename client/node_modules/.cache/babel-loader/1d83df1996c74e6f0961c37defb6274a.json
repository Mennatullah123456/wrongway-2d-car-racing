{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar Bounds = require('./Bounds.js');\nvar DisplayObject = /*#__PURE__*/function (_core$utils$EventEmit) {\n  _inherits(DisplayObject, _core$utils$EventEmit);\n  function DisplayObject() {\n    var _this;\n    _classCallCheck(this, DisplayObject);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayObject).call(this));\n    _this.tempDisplayObjectParent = null;\n    _this.transform = new core.Transform();\n    _this.alpha = 1;\n    _this.visible = true;\n    _this.renderable = true;\n    _this.cullable = false;\n    _this.cullArea = null;\n    _this.parent = null;\n    _this.worldAlpha = 1;\n    _this._lastSortedIndex = 0;\n    _this._zIndex = 0;\n    _this.filterArea = null;\n    _this.filters = null;\n    _this._enabledFilters = null;\n    _this._bounds = new Bounds.Bounds();\n    _this._localBounds = null;\n    _this._boundsID = 0;\n    _this._boundsRect = null;\n    _this._localBoundsRect = null;\n    _this._mask = null;\n    _this._maskRefCount = 0;\n    _this._destroyed = false;\n    _this.isSprite = false;\n    _this.isMask = false;\n    return _this;\n  }\n  _createClass(DisplayObject, [{\n    key: \"_recursivePostUpdateTransform\",\n    value: function _recursivePostUpdateTransform() {\n      if (this.parent) {\n        this.parent._recursivePostUpdateTransform();\n        this.transform.updateTransform(this.parent.transform);\n      } else {\n        this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n      }\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform() {\n      this._boundsID++;\n      this.transform.updateTransform(this.parent.transform);\n      this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(skipUpdate, rect) {\n      if (!skipUpdate) {\n        if (!this.parent) {\n          this.parent = this._tempDisplayObjectParent;\n          this.updateTransform();\n          this.parent = null;\n        } else {\n          this._recursivePostUpdateTransform();\n          this.updateTransform();\n        }\n      }\n      if (this._bounds.updateID !== this._boundsID) {\n        this.calculateBounds();\n        this._bounds.updateID = this._boundsID;\n      }\n      if (!rect) {\n        if (!this._boundsRect) {\n          this._boundsRect = new core.Rectangle();\n        }\n        rect = this._boundsRect;\n      }\n      return this._bounds.getRectangle(rect);\n    }\n  }, {\n    key: \"getLocalBounds\",\n    value: function getLocalBounds(rect) {\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new core.Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      if (!this._localBounds) {\n        this._localBounds = new Bounds.Bounds();\n      }\n      var transformRef = this.transform;\n      var parentRef = this.parent;\n      this.parent = null;\n      this.transform = this._tempDisplayObjectParent.transform;\n      var worldBounds = this._bounds;\n      var worldBoundsID = this._boundsID;\n      this._bounds = this._localBounds;\n      var bounds = this.getBounds(false, rect);\n      this.parent = parentRef;\n      this.transform = transformRef;\n      this._bounds = worldBounds;\n      this._bounds.updateID += this._boundsID - worldBoundsID;\n      return bounds;\n    }\n  }, {\n    key: \"toGlobal\",\n    value: function toGlobal(position, point) {\n      var skipUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!skipUpdate) {\n        this._recursivePostUpdateTransform();\n        if (!this.parent) {\n          this.parent = this._tempDisplayObjectParent;\n          this.displayObjectUpdateTransform();\n          this.parent = null;\n        } else {\n          this.displayObjectUpdateTransform();\n        }\n      }\n      return this.worldTransform.apply(position, point);\n    }\n  }, {\n    key: \"toLocal\",\n    value: function toLocal(position, from, point, skipUpdate) {\n      if (from) {\n        position = from.toGlobal(position, point, skipUpdate);\n      }\n      if (!skipUpdate) {\n        this._recursivePostUpdateTransform();\n        if (!this.parent) {\n          this.parent = this._tempDisplayObjectParent;\n          this.displayObjectUpdateTransform();\n          this.parent = null;\n        } else {\n          this.displayObjectUpdateTransform();\n        }\n      }\n      return this.worldTransform.applyInverse(position, point);\n    }\n  }, {\n    key: \"setParent\",\n    value: function setParent(container) {\n      if (!container || !container.addChild) {\n        throw new Error(\"setParent: Argument must be a Container\");\n      }\n      container.addChild(this);\n      return container;\n    }\n  }, {\n    key: \"removeFromParent\",\n    value: function removeFromParent() {\n      this.parent?.removeChild(this);\n    }\n  }, {\n    key: \"setTransform\",\n    value: function setTransform() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var scaleX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var scaleY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var skewX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var skewY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var pivotX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var pivotY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      this.position.x = x;\n      this.position.y = y;\n      this.scale.x = !scaleX ? 1 : scaleX;\n      this.scale.y = !scaleY ? 1 : scaleY;\n      this.rotation = rotation;\n      this.skew.x = skewX;\n      this.skew.y = skewY;\n      this.pivot.x = pivotX;\n      this.pivot.y = pivotY;\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(_options) {\n      this.removeFromParent();\n      this._destroyed = true;\n      this.transform = null;\n      this.parent = null;\n      this._bounds = null;\n      this.mask = null;\n      this.cullArea = null;\n      this.filters = null;\n      this.filterArea = null;\n      this.hitArea = null;\n      this.interactive = false;\n      this.interactiveChildren = false;\n      this.emit(\"destroyed\");\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"enableTempParent\",\n    value: function enableTempParent() {\n      var myParent = this.parent;\n      this.parent = this._tempDisplayObjectParent;\n      return myParent;\n    }\n  }, {\n    key: \"disableTempParent\",\n    value: function disableTempParent(cacheParent) {\n      this.parent = cacheParent;\n    }\n  }, {\n    key: \"destroyed\",\n    get: function get() {\n      return this._destroyed;\n    }\n  }, {\n    key: \"_tempDisplayObjectParent\",\n    get: function get() {\n      if (this.tempDisplayObjectParent === null) {\n        this.tempDisplayObjectParent = new TemporaryDisplayObject();\n      }\n      return this.tempDisplayObjectParent;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      this.transform.position.x = value;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      this.transform.position.y = value;\n    }\n  }, {\n    key: \"worldTransform\",\n    get: function get() {\n      return this.transform.worldTransform;\n    }\n  }, {\n    key: \"localTransform\",\n    get: function get() {\n      return this.transform.localTransform;\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this.transform.position;\n    },\n    set: function set(value) {\n      this.transform.position.copyFrom(value);\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this.transform.scale;\n    },\n    set: function set(value) {\n      this.transform.scale.copyFrom(value);\n    }\n  }, {\n    key: \"pivot\",\n    get: function get() {\n      return this.transform.pivot;\n    },\n    set: function set(value) {\n      this.transform.pivot.copyFrom(value);\n    }\n  }, {\n    key: \"skew\",\n    get: function get() {\n      return this.transform.skew;\n    },\n    set: function set(value) {\n      this.transform.skew.copyFrom(value);\n    }\n  }, {\n    key: \"rotation\",\n    get: function get() {\n      return this.transform.rotation;\n    },\n    set: function set(value) {\n      this.transform.rotation = value;\n    }\n  }, {\n    key: \"angle\",\n    get: function get() {\n      return this.transform.rotation * core.RAD_TO_DEG;\n    },\n    set: function set(value) {\n      this.transform.rotation = value * core.DEG_TO_RAD;\n    }\n  }, {\n    key: \"zIndex\",\n    get: function get() {\n      return this._zIndex;\n    },\n    set: function set(value) {\n      this._zIndex = value;\n      if (this.parent) {\n        this.parent.sortDirty = true;\n      }\n    }\n  }, {\n    key: \"worldVisible\",\n    get: function get() {\n      var item = this;\n      do {\n        if (!item.visible) {\n          return false;\n        }\n        item = item.parent;\n      } while (item);\n      return true;\n    }\n  }, {\n    key: \"mask\",\n    get: function get() {\n      return this._mask;\n    },\n    set: function set(value) {\n      if (this._mask === value) {\n        return;\n      }\n      if (this._mask) {\n        var maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        if (maskObject) {\n          maskObject._maskRefCount--;\n          if (maskObject._maskRefCount === 0) {\n            maskObject.renderable = true;\n            maskObject.isMask = false;\n          }\n        }\n      }\n      this._mask = value;\n      if (this._mask) {\n        var _maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        if (_maskObject) {\n          if (_maskObject._maskRefCount === 0) {\n            _maskObject.renderable = false;\n            _maskObject.isMask = true;\n          }\n          _maskObject._maskRefCount++;\n        }\n      }\n    }\n  }], [{\n    key: \"mixin\",\n    value: function mixin(source) {\n      var keys = Object.keys(source);\n      for (var i = 0; i < keys.length; ++i) {\n        var propertyName = keys[i];\n        Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n      }\n    }\n  }]);\n  return DisplayObject;\n}(core.utils.EventEmitter);\nvar TemporaryDisplayObject = /*#__PURE__*/function (_DisplayObject) {\n  _inherits(TemporaryDisplayObject, _DisplayObject);\n  function TemporaryDisplayObject() {\n    var _this2;\n    _classCallCheck(this, TemporaryDisplayObject);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TemporaryDisplayObject).apply(this, arguments));\n    _this2.sortDirty = null;\n    return _this2;\n  }\n  return TemporaryDisplayObject;\n}(DisplayObject);\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\nexports.DisplayObject = DisplayObject;\nexports.TemporaryDisplayObject = TemporaryDisplayObject;","map":null,"metadata":{},"sourceType":"script"}