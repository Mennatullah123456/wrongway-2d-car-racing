{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar Shader = require('../shader/Shader.js');\nvar Program = require('../shader/Program.js');\nvar UniformGroup = require('../shader/UniformGroup.js');\nvar math = require('@pixi/math');\nvar BatchShaderGenerator = /*#__PURE__*/function () {\n  function BatchShaderGenerator(vertexSrc, fragTemplate) {\n    _classCallCheck(this, BatchShaderGenerator);\n    this.vertexSrc = vertexSrc;\n    this.fragTemplate = fragTemplate;\n    this.programCache = {};\n    this.defaultGroupCache = {};\n    if (!fragTemplate.includes(\"%count%\")) {\n      throw new Error('Fragment template must contain \"%count%\".');\n    }\n    if (!fragTemplate.includes(\"%forloop%\")) {\n      throw new Error('Fragment template must contain \"%forloop%\".');\n    }\n  }\n  _createClass(BatchShaderGenerator, [{\n    key: \"generateShader\",\n    value: function generateShader(maxTextures) {\n      if (!this.programCache[maxTextures]) {\n        var sampleValues = new Int32Array(maxTextures);\n        for (var i = 0; i < maxTextures; i++) {\n          sampleValues[i] = i;\n        }\n        this.defaultGroupCache[maxTextures] = UniformGroup.UniformGroup.from({\n          uSamplers: sampleValues\n        }, true);\n        var fragmentSrc = this.fragTemplate;\n        fragmentSrc = fragmentSrc.replace(/%count%/gi, \"\".concat(maxTextures));\n        fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n        this.programCache[maxTextures] = new Program.Program(this.vertexSrc, fragmentSrc);\n      }\n      var uniforms = {\n        tint: new Float32Array([1, 1, 1, 1]),\n        translationMatrix: new math.Matrix(),\n        default: this.defaultGroupCache[maxTextures]\n      };\n      return new Shader.Shader(this.programCache[maxTextures], uniforms);\n    }\n  }, {\n    key: \"generateSampleSrc\",\n    value: function generateSampleSrc(maxTextures) {\n      var src = \"\";\n      src += \"\\n\";\n      src += \"\\n\";\n      for (var i = 0; i < maxTextures; i++) {\n        if (i > 0) {\n          src += \"\\nelse \";\n        }\n        if (i < maxTextures - 1) {\n          src += \"if(vTextureId < \".concat(i, \".5)\");\n        }\n        src += \"\\n{\";\n        src += \"\\n\\tcolor = texture2D(uSamplers[\".concat(i, \"], vTextureCoord);\");\n        src += \"\\n}\";\n      }\n      src += \"\\n\";\n      src += \"\\n\";\n      return src;\n    }\n  }]);\n  return BatchShaderGenerator;\n}();\nexports.BatchShaderGenerator = BatchShaderGenerator;","map":null,"metadata":{},"sourceType":"script"}