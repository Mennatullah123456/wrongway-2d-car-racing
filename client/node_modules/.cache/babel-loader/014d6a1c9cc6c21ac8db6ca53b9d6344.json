{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar display = require('@pixi/display');\nvar FederatedEvent = require('./FederatedEvent.js');\nvar FederatedDisplayObject = {\n  interactive: false,\n  interactiveChildren: true,\n  hitArea: null,\n  addEventListener: function addEventListener(type, listener, options) {\n    var capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    var context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? \"\".concat(type, \"capture\") : type;\n    listener = typeof listener === \"function\" ? listener : listener.handleEvent;\n    this.on(type, listener, context);\n  },\n  removeEventListener: function removeEventListener(type, listener, options) {\n    var capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    var context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? \"\".concat(type, \"capture\") : type;\n    listener = typeof listener === \"function\" ? listener : listener.handleEvent;\n    this.off(type, listener, context);\n  },\n  dispatchEvent: function dispatchEvent(e) {\n    if (!(e instanceof FederatedEvent.FederatedEvent)) {\n      throw new Error(\"DisplayObject cannot propagate events outside of the Federated Events API\");\n    }\n    e.defaultPrevented = false;\n    e.path = null;\n    e.target = this;\n    e.manager.dispatchEvent(e);\n    return !e.defaultPrevented;\n  }\n};\ndisplay.DisplayObject.mixin(FederatedDisplayObject);\nexports.FederatedDisplayObject = FederatedDisplayObject;","map":null,"metadata":{},"sourceType":"script"}