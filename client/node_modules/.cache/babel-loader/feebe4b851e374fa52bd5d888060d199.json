{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { TARGETS } from '@pixi/constants';\nimport { AbstractMultiResource } from './AbstractMultiResource.mjs';\nvar ArrayResource = /*#__PURE__*/function (_AbstractMultiResourc) {\n  _inherits(ArrayResource, _AbstractMultiResourc);\n  function ArrayResource(source, options) {\n    var _this;\n    _classCallCheck(this, ArrayResource);\n    var _ref = options || {},\n      width = _ref.width,\n      height = _ref.height;\n    var urls;\n    var length;\n    if (Array.isArray(source)) {\n      urls = source;\n      length = source.length;\n    } else {\n      length = source;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayResource).call(this, length, {\n      width: width,\n      height: height\n    }));\n    if (urls) {\n      _this.initFromArray(urls, options);\n    }\n    return _this;\n  }\n  _createClass(ArrayResource, [{\n    key: \"addBaseTextureAt\",\n    value: function addBaseTextureAt(baseTexture, index) {\n      if (baseTexture.resource) {\n        this.addResourceAt(baseTexture.resource, index);\n      } else {\n        throw new Error(\"ArrayResource does not support RenderTexture\");\n      }\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(baseTexture) {\n      _get(_getPrototypeOf(ArrayResource.prototype), \"bind\", this).call(this, baseTexture);\n      baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(renderer, texture, glTexture) {\n      var length = this.length,\n        itemDirtyIds = this.itemDirtyIds,\n        items = this.items;\n      var gl = renderer.gl;\n      if (glTexture.dirtyId < 0) {\n        gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, glTexture.internalFormat, this._width, this._height, length, 0, texture.format, glTexture.type, null);\n      }\n      for (var i = 0; i < length; i++) {\n        var item = items[i];\n        if (itemDirtyIds[i] < item.dirtyId) {\n          itemDirtyIds[i] = item.dirtyId;\n          if (item.valid) {\n            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, i, item.resource.width, item.resource.height, 1, texture.format, glTexture.type, item.resource.source);\n          }\n        }\n      }\n      return true;\n    }\n  }]);\n  return ArrayResource;\n}(AbstractMultiResource);\nexport { ArrayResource };","map":null,"metadata":{},"sourceType":"module"}