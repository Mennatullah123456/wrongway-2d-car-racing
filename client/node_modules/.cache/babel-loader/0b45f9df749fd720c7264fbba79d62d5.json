{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar MultisampleSystem = /*#__PURE__*/function () {\n  function MultisampleSystem(renderer) {\n    _classCallCheck(this, MultisampleSystem);\n    this.renderer = renderer;\n  }\n  _createClass(MultisampleSystem, [{\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      var samples;\n      if (this.renderer.context.webGLVersion === 1) {\n        var framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        samples = gl.getParameter(gl.SAMPLES);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      } else {\n        var _framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n        samples = gl.getParameter(gl.SAMPLES);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, _framebuffer);\n      }\n      if (samples >= MSAA_QUALITY.HIGH) {\n        this.multisample = MSAA_QUALITY.HIGH;\n      } else if (samples >= MSAA_QUALITY.MEDIUM) {\n        this.multisample = MSAA_QUALITY.MEDIUM;\n      } else if (samples >= MSAA_QUALITY.LOW) {\n        this.multisample = MSAA_QUALITY.LOW;\n      } else {\n        this.multisample = MSAA_QUALITY.NONE;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n  return MultisampleSystem;\n}();\nMultisampleSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"_multisample\"\n};\nextensions.add(MultisampleSystem);\nexport { MultisampleSystem };","map":null,"metadata":{},"sourceType":"module"}