{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar TickerListener = /*#__PURE__*/function () {\n  function TickerListener(fn) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    _classCallCheck(this, TickerListener);\n    this.next = null;\n    this.previous = null;\n    this._destroyed = false;\n    this.fn = fn;\n    this.context = context;\n    this.priority = priority;\n    this.once = once;\n  }\n  _createClass(TickerListener, [{\n    key: \"match\",\n    value: function match(fn) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return this.fn === fn && this.context === context;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(deltaTime) {\n      if (this.fn) {\n        if (this.context) {\n          this.fn.call(this.context, deltaTime);\n        } else {\n          this.fn(deltaTime);\n        }\n      }\n      var redirect = this.next;\n      if (this.once) {\n        this.destroy(true);\n      }\n      if (this._destroyed) {\n        this.next = null;\n      }\n      return redirect;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(previous) {\n      this.previous = previous;\n      if (previous.next) {\n        previous.next.previous = this;\n      }\n      this.next = previous.next;\n      previous.next = this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var hard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._destroyed = true;\n      this.fn = null;\n      this.context = null;\n      if (this.previous) {\n        this.previous.next = this.next;\n      }\n      if (this.next) {\n        this.next.previous = this.previous;\n      }\n      var redirect = this.next;\n      this.next = hard ? null : redirect;\n      this.previous = null;\n      return redirect;\n    }\n  }]);\n  return TickerListener;\n}();\nexports.TickerListener = TickerListener;","map":null,"metadata":{},"sourceType":"script"}