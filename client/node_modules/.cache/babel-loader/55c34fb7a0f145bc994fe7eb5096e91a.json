{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar mesh$1 = require('./shader/mesh.js');\nvar mesh = require('./shader/mesh2.js');\nvar MeshMaterial = /*#__PURE__*/function (_core$Shader) {\n  _inherits(MeshMaterial, _core$Shader);\n  function MeshMaterial(uSampler, options) {\n    var _this;\n    _classCallCheck(this, MeshMaterial);\n    var uniforms = {\n      uSampler: uSampler,\n      alpha: 1,\n      uTextureMatrix: core.Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    options = Object.assign({\n      tint: 16777215,\n      alpha: 1,\n      pluginName: \"batch\"\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeshMaterial).call(this, options.program || core.Program.from(mesh[\"default\"], mesh$1[\"default\"]), uniforms));\n    _this._colorDirty = false;\n    _this.uvMatrix = new core.TextureMatrix(uSampler);\n    _this.batchable = options.program === void 0;\n    _this.pluginName = options.pluginName;\n    _this.tint = options.tint;\n    _this.alpha = options.alpha;\n    return _this;\n  }\n  _createClass(MeshMaterial, [{\n    key: \"update\",\n    value: function update() {\n      if (this._colorDirty) {\n        this._colorDirty = false;\n        var baseTexture = this.texture.baseTexture;\n        core.utils.premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n      }\n      if (this.uvMatrix.update()) {\n        this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n      }\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.uniforms.uSampler;\n    },\n    set: function set(value) {\n      if (this.uniforms.uSampler !== value) {\n        if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode) {\n          this._colorDirty = true;\n        }\n        this.uniforms.uSampler = value;\n        this.uvMatrix.texture = value;\n      }\n    }\n  }, {\n    key: \"alpha\",\n    set: function set(value) {\n      if (value === this._alpha) return;\n      this._alpha = value;\n      this._colorDirty = true;\n    },\n    get: function get() {\n      return this._alpha;\n    }\n  }, {\n    key: \"tint\",\n    set: function set(value) {\n      if (value === this._tint) return;\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 65280) + ((value & 255) << 16);\n      this._colorDirty = true;\n    },\n    get: function get() {\n      return this._tint;\n    }\n  }]);\n  return MeshMaterial;\n}(core.Shader);\nexports.MeshMaterial = MeshMaterial;","map":null,"metadata":{},"sourceType":"script"}