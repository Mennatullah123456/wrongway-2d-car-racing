{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Rectangle } from '@pixi/core';\nvar Bounds = /*#__PURE__*/function () {\n  function Bounds() {\n    _classCallCheck(this, Bounds);\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.rect = null;\n    this.updateID = -1;\n  }\n  _createClass(Bounds, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.minX > this.maxX || this.minY > this.maxY;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.minX = Infinity;\n      this.minY = Infinity;\n      this.maxX = -Infinity;\n      this.maxY = -Infinity;\n    }\n  }, {\n    key: \"getRectangle\",\n    value: function getRectangle(rect) {\n      if (this.minX > this.maxX || this.minY > this.maxY) {\n        return Rectangle.EMPTY;\n      }\n      rect = rect || new Rectangle(0, 0, 1, 1);\n      rect.x = this.minX;\n      rect.y = this.minY;\n      rect.width = this.maxX - this.minX;\n      rect.height = this.maxY - this.minY;\n      return rect;\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(point) {\n      this.minX = Math.min(this.minX, point.x);\n      this.maxX = Math.max(this.maxX, point.x);\n      this.minY = Math.min(this.minY, point.y);\n      this.maxY = Math.max(this.maxY, point.y);\n    }\n  }, {\n    key: \"addPointMatrix\",\n    value: function addPointMatrix(matrix, point) {\n      var a = matrix.a,\n        b = matrix.b,\n        c = matrix.c,\n        d = matrix.d,\n        tx = matrix.tx,\n        ty = matrix.ty;\n      var x = a * point.x + c * point.y + tx;\n      var y = b * point.x + d * point.y + ty;\n      this.minX = Math.min(this.minX, x);\n      this.maxX = Math.max(this.maxX, x);\n      this.minY = Math.min(this.minY, y);\n      this.maxY = Math.max(this.maxY, y);\n    }\n  }, {\n    key: \"addQuad\",\n    value: function addQuad(vertices) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      var x = vertices[0];\n      var y = vertices[1];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[2];\n      y = vertices[3];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[4];\n      y = vertices[5];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[6];\n      y = vertices[7];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addFrame\",\n    value: function addFrame(transform, x0, y0, x1, y1) {\n      this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n  }, {\n    key: \"addFrameMatrix\",\n    value: function addFrameMatrix(matrix, x0, y0, x1, y1) {\n      var a = matrix.a;\n      var b = matrix.b;\n      var c = matrix.c;\n      var d = matrix.d;\n      var tx = matrix.tx;\n      var ty = matrix.ty;\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      var x = a * x0 + c * y0 + tx;\n      var y = b * x0 + d * y0 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x1 + c * y0 + tx;\n      y = b * x1 + d * y0 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x0 + c * y1 + tx;\n      y = b * x0 + d * y1 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x1 + c * y1 + tx;\n      y = b * x1 + d * y1 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addVertexData\",\n    value: function addVertexData(vertexData, beginOffset, endOffset) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      for (var i = beginOffset; i < endOffset; i += 2) {\n        var x = vertexData[i];\n        var y = vertexData[i + 1];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n      }\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addVertices\",\n    value: function addVertices(transform, vertices, beginOffset, endOffset) {\n      this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n  }, {\n    key: \"addVerticesMatrix\",\n    value: function addVerticesMatrix(matrix, vertices, beginOffset, endOffset) {\n      var padX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var padY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : padX;\n      var a = matrix.a;\n      var b = matrix.b;\n      var c = matrix.c;\n      var d = matrix.d;\n      var tx = matrix.tx;\n      var ty = matrix.ty;\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      for (var i = beginOffset; i < endOffset; i += 2) {\n        var rawX = vertices[i];\n        var rawY = vertices[i + 1];\n        var x = a * rawX + c * rawY + tx;\n        var y = d * rawY + b * rawX + ty;\n        minX = Math.min(minX, x - padX);\n        maxX = Math.max(maxX, x + padX);\n        minY = Math.min(minY, y - padY);\n        maxY = Math.max(maxY, y + padY);\n      }\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addBounds\",\n    value: function addBounds(bounds) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = bounds.minX < minX ? bounds.minX : minX;\n      this.minY = bounds.minY < minY ? bounds.minY : minY;\n      this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n      this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n  }, {\n    key: \"addBoundsMask\",\n    value: function addBoundsMask(bounds, mask) {\n      var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n      var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n      var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n      var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n      if (_minX <= _maxX && _minY <= _maxY) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = _minX < minX ? _minX : minX;\n        this.minY = _minY < minY ? _minY : minY;\n        this.maxX = _maxX > maxX ? _maxX : maxX;\n        this.maxY = _maxY > maxY ? _maxY : maxY;\n      }\n    }\n  }, {\n    key: \"addBoundsMatrix\",\n    value: function addBoundsMatrix(bounds, matrix) {\n      this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n  }, {\n    key: \"addBoundsArea\",\n    value: function addBoundsArea(bounds, area) {\n      var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n      var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n      var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;\n      var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n      if (_minX <= _maxX && _minY <= _maxY) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = _minX < minX ? _minX : minX;\n        this.minY = _minY < minY ? _minY : minY;\n        this.maxX = _maxX > maxX ? _maxX : maxX;\n        this.maxY = _maxY > maxY ? _maxY : maxY;\n      }\n    }\n  }, {\n    key: \"pad\",\n    value: function pad() {\n      var paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n      if (!this.isEmpty()) {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n      }\n    }\n  }, {\n    key: \"addFramePad\",\n    value: function addFramePad(x0, y0, x1, y1, padX, padY) {\n      x0 -= padX;\n      y0 -= padY;\n      x1 += padX;\n      y1 += padY;\n      this.minX = this.minX < x0 ? this.minX : x0;\n      this.maxX = this.maxX > x1 ? this.maxX : x1;\n      this.minY = this.minY < y0 ? this.minY : y0;\n      this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n  }]);\n  return Bounds;\n}();\nexport { Bounds };","map":null,"metadata":{},"sourceType":"module"}