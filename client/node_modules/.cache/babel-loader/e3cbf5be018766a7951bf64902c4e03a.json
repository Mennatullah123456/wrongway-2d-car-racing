{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nrequire('../utils/index.js');\nvar convertToList = require('../utils/convertToList.js');\nvar CacheClass = /*#__PURE__*/function () {\n  function CacheClass() {\n    _classCallCheck(this, CacheClass);\n    this._parsers = [];\n    this._cache = /* @__PURE__ */new Map();\n    this._cacheMap = /* @__PURE__ */new Map();\n  }\n  _createClass(CacheClass, [{\n    key: \"reset\",\n    value: function reset() {\n      this._cacheMap.clear();\n      this._cache.clear();\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this._cache.has(key);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var result = this._cache.get(key);\n      if (!result) {\n        console.warn(\"[Assets] Asset id \".concat(key, \" was not found in the Cache\"));\n      }\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var _this = this;\n      var keys = convertToList.convertToList(key);\n      var cacheableAssets;\n      for (var i = 0; i < this.parsers.length; i++) {\n        var parser = this.parsers[i];\n        if (parser.test(value)) {\n          cacheableAssets = parser.getCacheableAssets(keys, value);\n          break;\n        }\n      }\n      if (!cacheableAssets) {\n        cacheableAssets = {};\n        keys.forEach(function (key2) {\n          cacheableAssets[key2] = value;\n        });\n      }\n      var cacheKeys = Object.keys(cacheableAssets);\n      var cachedAssets = {\n        cacheKeys: cacheKeys,\n        keys: keys\n      };\n      keys.forEach(function (key2) {\n        _this._cacheMap.set(key2, cachedAssets);\n      });\n      cacheKeys.forEach(function (key2) {\n        if (_this._cache.has(key2) && _this._cache.get(key2) !== value) {\n          console.warn(\"[Cache] already has key:\", key2);\n        }\n        _this._cache.set(key2, cacheableAssets[key2]);\n      });\n      if (value instanceof core.Texture) {\n        var texture = value;\n        keys.forEach(function (key2) {\n          if (texture.baseTexture !== core.Texture.EMPTY.baseTexture) {\n            core.BaseTexture.addToCache(texture.baseTexture, key2);\n          }\n          core.Texture.addToCache(texture, key2);\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var _this2 = this;\n      this._cacheMap.get(key);\n      if (!this._cacheMap.has(key)) {\n        console.warn(\"[Assets] Asset id \".concat(key, \" was not found in the Cache\"));\n        return;\n      }\n      var cacheMap = this._cacheMap.get(key);\n      var cacheKeys = cacheMap.cacheKeys;\n      cacheKeys.forEach(function (key2) {\n        _this2._cache.delete(key2);\n      });\n      cacheMap.keys.forEach(function (key2) {\n        _this2._cacheMap.delete(key2);\n      });\n    }\n  }, {\n    key: \"parsers\",\n    get: function get() {\n      return this._parsers;\n    }\n  }]);\n  return CacheClass;\n}();\nvar Cache = new CacheClass();\nexports.Cache = Cache;","map":null,"metadata":{},"sourceType":"script"}