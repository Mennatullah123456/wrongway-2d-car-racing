{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar tempPoint = new core.Point();\nvar TilingSprite = /*#__PURE__*/function (_sprite$Sprite) {\n  _inherits(TilingSprite, _sprite$Sprite);\n  function TilingSprite(texture) {\n    var _this;\n    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    _classCallCheck(this, TilingSprite);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TilingSprite).call(this, texture));\n    _this.tileTransform = new core.Transform();\n    _this._width = width;\n    _this._height = height;\n    _this.uvMatrix = _this.texture.uvMatrix || new core.TextureMatrix(texture);\n    _this.pluginName = \"tilingSprite\";\n    _this.uvRespectAnchor = false;\n    return _this;\n  }\n  _createClass(TilingSprite, [{\n    key: \"_onTextureUpdate\",\n    value: function _onTextureUpdate() {\n      if (this.uvMatrix) {\n        this.uvMatrix.texture = this._texture;\n      }\n      this._cachedTint = 16777215;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(renderer) {\n      var texture = this._texture;\n      if (!texture || !texture.valid) {\n        return;\n      }\n      this.tileTransform.updateLocalTransform();\n      this.uvMatrix.update();\n      renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n      renderer.plugins[this.pluginName].render(this);\n    }\n  }, {\n    key: \"_calculateBounds\",\n    value: function _calculateBounds() {\n      var minX = this._width * -this._anchor._x;\n      var minY = this._height * -this._anchor._y;\n      var maxX = this._width * (1 - this._anchor._x);\n      var maxY = this._height * (1 - this._anchor._y);\n      this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n  }, {\n    key: \"getLocalBounds\",\n    value: function getLocalBounds(rect) {\n      if (this.children.length === 0) {\n        this._bounds.minX = this._width * -this._anchor._x;\n        this._bounds.minY = this._height * -this._anchor._y;\n        this._bounds.maxX = this._width * (1 - this._anchor._x);\n        this._bounds.maxY = this._height * (1 - this._anchor._y);\n        if (!rect) {\n          if (!this._localBoundsRect) {\n            this._localBoundsRect = new core.Rectangle();\n          }\n          rect = this._localBoundsRect;\n        }\n        return this._bounds.getRectangle(rect);\n      }\n      return _get(_getPrototypeOf(TilingSprite.prototype), \"getLocalBounds\", this).call(this, rect);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      this.worldTransform.applyInverse(point, tempPoint);\n      var width = this._width;\n      var height = this._height;\n      var x1 = -width * this.anchor._x;\n      if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n        var y1 = -height * this.anchor._y;\n        if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      _get(_getPrototypeOf(TilingSprite.prototype), \"destroy\", this).call(this, options);\n      this.tileTransform = null;\n      this.uvMatrix = null;\n    }\n  }, {\n    key: \"clampMargin\",\n    get: function get() {\n      return this.uvMatrix.clampMargin;\n    },\n    set: function set(value) {\n      this.uvMatrix.clampMargin = value;\n      this.uvMatrix.update(true);\n    }\n  }, {\n    key: \"tileScale\",\n    get: function get() {\n      return this.tileTransform.scale;\n    },\n    set: function set(value) {\n      this.tileTransform.scale.copyFrom(value);\n    }\n  }, {\n    key: \"tilePosition\",\n    get: function get() {\n      return this.tileTransform.position;\n    },\n    set: function set(value) {\n      this.tileTransform.position.copyFrom(value);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(source, options) {\n      var texture = source instanceof core.Texture ? source : core.Texture.from(source, options);\n      return new TilingSprite(texture, options.width, options.height);\n    }\n  }]);\n  return TilingSprite;\n}(sprite.Sprite);\nexports.TilingSprite = TilingSprite;","map":null,"metadata":{},"sourceType":"script"}