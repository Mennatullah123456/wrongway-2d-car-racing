{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar ExtensionType = /* @__PURE__ */function (ExtensionType2) {\n  ExtensionType2[\"Renderer\"] = \"renderer\";\n  ExtensionType2[\"Application\"] = \"application\";\n  ExtensionType2[\"RendererSystem\"] = \"renderer-webgl-system\";\n  ExtensionType2[\"RendererPlugin\"] = \"renderer-webgl-plugin\";\n  ExtensionType2[\"CanvasRendererSystem\"] = \"renderer-canvas-system\";\n  ExtensionType2[\"CanvasRendererPlugin\"] = \"renderer-canvas-plugin\";\n  ExtensionType2[\"Asset\"] = \"asset\";\n  ExtensionType2[\"LoadParser\"] = \"load-parser\";\n  ExtensionType2[\"ResolveParser\"] = \"resolve-parser\";\n  ExtensionType2[\"CacheParser\"] = \"cache-parser\";\n  ExtensionType2[\"DetectionParser\"] = \"detection-parser\";\n  return ExtensionType2;\n}(ExtensionType || {});\nvar normalizeExtension = function normalizeExtension(ext) {\n  if (typeof ext === \"function\" || typeof ext === \"object\" && ext.extension) {\n    if (!ext.extension) {\n      throw new Error(\"Extension class must have an extension object\");\n    }\n    var metadata = typeof ext.extension !== \"object\" ? {\n      type: ext.extension\n    } : ext.extension;\n    ext = _objectSpread({}, metadata, {\n      ref: ext\n    });\n  }\n  if (typeof ext === \"object\") {\n    ext = _objectSpread({}, ext);\n  } else {\n    throw new Error(\"Invalid extension type\");\n  }\n  if (typeof ext.type === \"string\") {\n    ext.type = [ext.type];\n  }\n  return ext;\n};\nvar normalizePriority = function normalizePriority(ext, defaultPriority) {\n  return normalizeExtension(ext).priority ?? defaultPriority;\n};\nvar extensions = {\n  _addHandlers: {},\n  _removeHandlers: {},\n  _queue: {},\n  remove: function remove() {\n    var _this = this;\n    for (var _len = arguments.length, extensions2 = new Array(_len), _key = 0; _key < _len; _key++) {\n      extensions2[_key] = arguments[_key];\n    }\n    extensions2.map(normalizeExtension).forEach(function (ext) {\n      ext.type.forEach(function (type) {\n        return _this._removeHandlers[type]?.(ext);\n      });\n    });\n    return this;\n  },\n  add: function add() {\n    var _this2 = this;\n    for (var _len2 = arguments.length, extensions2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      extensions2[_key2] = arguments[_key2];\n    }\n    extensions2.map(normalizeExtension).forEach(function (ext) {\n      ext.type.forEach(function (type) {\n        var handlers = _this2._addHandlers;\n        var queue = _this2._queue;\n        if (!handlers[type]) {\n          queue[type] = queue[type] || [];\n          queue[type].push(ext);\n        } else {\n          handlers[type](ext);\n        }\n      });\n    });\n    return this;\n  },\n  handle: function handle(type, onAdd, onRemove) {\n    var addHandlers = this._addHandlers;\n    var removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type]) {\n      throw new Error(\"Extension type \".concat(type, \" already has a handler\"));\n    }\n    addHandlers[type] = onAdd;\n    removeHandlers[type] = onRemove;\n    var queue = this._queue;\n    if (queue[type]) {\n      queue[type].forEach(function (ext) {\n        return onAdd(ext);\n      });\n      delete queue[type];\n    }\n    return this;\n  },\n  handleByMap: function handleByMap(type, map) {\n    return this.handle(type, function (extension) {\n      map[extension.name] = extension.ref;\n    }, function (extension) {\n      delete map[extension.name];\n    });\n  },\n  handleByList: function handleByList(type, list) {\n    var defaultPriority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return this.handle(type, function (extension) {\n      if (list.includes(extension.ref)) {\n        return;\n      }\n      list.push(extension.ref);\n      list.sort(function (a, b) {\n        return normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority);\n      });\n    }, function (extension) {\n      var index = list.indexOf(extension.ref);\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n    });\n  }\n};\nexport { ExtensionType, extensions };","map":null,"metadata":{},"sourceType":"module"}