{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { settings } from '@pixi/settings';\nimport { Program } from '../shader/Program.mjs';\nimport { Shader } from '../shader/Shader.mjs';\nimport { State } from '../state/State.mjs';\nimport defaultFragment from './defaultFilter.mjs';\nimport defaultVertex from './defaultFilter2.mjs';\nvar Filter = /*#__PURE__*/function (_Shader) {\n  _inherits(Filter, _Shader);\n  function Filter(vertexSrc, fragmentSrc, uniforms) {\n    var _this;\n    _classCallCheck(this, Filter);\n    var program = Program.from(vertexSrc || Filter.defaultVertexSrc, fragmentSrc || Filter.defaultFragmentSrc);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, program, uniforms));\n    _this.padding = 0;\n    _this.resolution = settings.FILTER_RESOLUTION;\n    _this.multisample = settings.FILTER_MULTISAMPLE;\n    _this.enabled = true;\n    _this.autoFit = true;\n    _this.state = new State();\n    return _this;\n  }\n  _createClass(Filter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode, _currentState) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }, {\n    key: \"blendMode\",\n    get: function get() {\n      return this.state.blendMode;\n    },\n    set: function set(value) {\n      this.state.blendMode = value;\n    }\n  }, {\n    key: \"resolution\",\n    get: function get() {\n      return this._resolution;\n    },\n    set: function set(value) {\n      this._resolution = value;\n    }\n  }], [{\n    key: \"defaultVertexSrc\",\n    get: function get() {\n      return defaultVertex;\n    }\n  }, {\n    key: \"defaultFragmentSrc\",\n    get: function get() {\n      return defaultFragment;\n    }\n  }]);\n  return Filter;\n}(Shader);\nexport { Filter };","map":null,"metadata":{},"sourceType":"module"}