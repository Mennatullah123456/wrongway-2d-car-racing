{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Rectangle } from '@pixi/math';\nimport { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport '../settings.mjs';\nimport { Framebuffer } from './Framebuffer.mjs';\nimport { GLFramebuffer } from './GLFramebuffer.mjs';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\nvar tempRectangle = new Rectangle();\nvar FramebufferSystem = /*#__PURE__*/function () {\n  function FramebufferSystem(renderer) {\n    _classCallCheck(this, FramebufferSystem);\n    this.renderer = renderer;\n    this.managedFramebuffers = [];\n    this.unknownFramebuffer = new Framebuffer(10, 10);\n    this.msaaSamples = null;\n  }\n  _createClass(FramebufferSystem, [{\n    key: \"contextChange\",\n    value: function contextChange() {\n      this.disposeAll(true);\n      var gl = this.gl = this.renderer.gl;\n      this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n      this.current = this.unknownFramebuffer;\n      this.viewport = new Rectangle();\n      this.hasMRT = true;\n      this.writeDepthTexture = true;\n      if (this.renderer.context.webGLVersion === 1) {\n        var nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n        var nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {\n          nativeDrawBuffersExtension = null;\n          nativeDepthTextureExtension = null;\n        }\n        if (nativeDrawBuffersExtension) {\n          gl.drawBuffers = function (activeTextures) {\n            return nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n          };\n        } else {\n          this.hasMRT = false;\n          gl.drawBuffers = function () {};\n        }\n        if (!nativeDepthTextureExtension) {\n          this.writeDepthTexture = false;\n        }\n      } else {\n        this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n      }\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(framebuffer, frame) {\n      var mipLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var gl = this.gl;\n      if (framebuffer) {\n        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n        if (this.current !== framebuffer) {\n          this.current = framebuffer;\n          gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n        }\n        if (fbo.mipLevel !== mipLevel) {\n          framebuffer.dirtyId++;\n          framebuffer.dirtyFormat++;\n          fbo.mipLevel = mipLevel;\n        }\n        if (fbo.dirtyId !== framebuffer.dirtyId) {\n          fbo.dirtyId = framebuffer.dirtyId;\n          if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {\n            fbo.dirtyFormat = framebuffer.dirtyFormat;\n            fbo.dirtySize = framebuffer.dirtySize;\n            this.updateFramebuffer(framebuffer, mipLevel);\n          } else if (fbo.dirtySize !== framebuffer.dirtySize) {\n            fbo.dirtySize = framebuffer.dirtySize;\n            this.resizeFramebuffer(framebuffer);\n          }\n        }\n        for (var i = 0; i < framebuffer.colorTextures.length; i++) {\n          var tex = framebuffer.colorTextures[i];\n          this.renderer.texture.unbind(tex.parentTextureArray || tex);\n        }\n        if (framebuffer.depthTexture) {\n          this.renderer.texture.unbind(framebuffer.depthTexture);\n        }\n        if (frame) {\n          var mipWidth = frame.width >> mipLevel;\n          var mipHeight = frame.height >> mipLevel;\n          var scale = mipWidth / frame.width;\n          this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);\n        } else {\n          var _mipWidth = framebuffer.width >> mipLevel;\n          var _mipHeight = framebuffer.height >> mipLevel;\n          this.setViewport(0, 0, _mipWidth, _mipHeight);\n        }\n      } else {\n        if (this.current) {\n          this.current = null;\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        if (frame) {\n          this.setViewport(frame.x, frame.y, frame.width, frame.height);\n        } else {\n          this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n        }\n      }\n    }\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(x, y, width, height) {\n      var v = this.viewport;\n      x = Math.round(x);\n      y = Math.round(y);\n      width = Math.round(width);\n      height = Math.round(height);\n      if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {\n        v.x = x;\n        v.y = y;\n        v.width = width;\n        v.height = height;\n        this.gl.viewport(x, y, width, height);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(r, g, b, a) {\n      var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH;\n      var gl = this.gl;\n      gl.clearColor(r, g, b, a);\n      gl.clear(mask);\n    }\n  }, {\n    key: \"initFramebuffer\",\n    value: function initFramebuffer(framebuffer) {\n      var gl = this.gl;\n      var fbo = new GLFramebuffer(gl.createFramebuffer());\n      fbo.multisample = this.detectSamples(framebuffer.multisample);\n      framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n      this.managedFramebuffers.push(framebuffer);\n      framebuffer.disposeRunner.add(this);\n      return fbo;\n    }\n  }, {\n    key: \"resizeFramebuffer\",\n    value: function resizeFramebuffer(framebuffer) {\n      var gl = this.gl;\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      if (fbo.stencil) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n        if (fbo.msaaBuffer) {\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n        } else {\n          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n      }\n      var colorTextures = framebuffer.colorTextures;\n      var count = colorTextures.length;\n      if (!gl.drawBuffers) {\n        count = Math.min(count, 1);\n      }\n      for (var i = 0; i < count; i++) {\n        var texture = colorTextures[i];\n        var parentTexture = texture.parentTextureArray || texture;\n        this.renderer.texture.bind(parentTexture, 0);\n        if (i === 0 && fbo.msaaBuffer) {\n          gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n        }\n      }\n      if (framebuffer.depthTexture && this.writeDepthTexture) {\n        this.renderer.texture.bind(framebuffer.depthTexture, 0);\n      }\n    }\n  }, {\n    key: \"updateFramebuffer\",\n    value: function updateFramebuffer(framebuffer, mipLevel) {\n      var gl = this.gl;\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var colorTextures = framebuffer.colorTextures;\n      var count = colorTextures.length;\n      if (!gl.drawBuffers) {\n        count = Math.min(count, 1);\n      }\n      if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {\n        fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n      } else if (fbo.msaaBuffer) {\n        gl.deleteRenderbuffer(fbo.msaaBuffer);\n        fbo.msaaBuffer = null;\n        if (fbo.blitFramebuffer) {\n          fbo.blitFramebuffer.dispose();\n          fbo.blitFramebuffer = null;\n        }\n      }\n      var activeTextures = [];\n      for (var i = 0; i < count; i++) {\n        var texture = colorTextures[i];\n        var parentTexture = texture.parentTextureArray || texture;\n        this.renderer.texture.bind(parentTexture, 0);\n        if (i === 0 && fbo.msaaBuffer) {\n          gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n        } else {\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n          activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n      }\n      if (activeTextures.length > 1) {\n        gl.drawBuffers(activeTextures);\n      }\n      if (framebuffer.depthTexture) {\n        var writeDepthTexture = this.writeDepthTexture;\n        if (writeDepthTexture) {\n          var depthTexture = framebuffer.depthTexture;\n          this.renderer.texture.bind(depthTexture, 0);\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n        }\n      }\n      if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n        fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n        if (fbo.msaaBuffer) {\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n        } else {\n          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n      } else if (fbo.stencil) {\n        gl.deleteRenderbuffer(fbo.stencil);\n        fbo.stencil = null;\n      }\n    }\n  }, {\n    key: \"canMultisampleFramebuffer\",\n    value: function canMultisampleFramebuffer(framebuffer) {\n      return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n  }, {\n    key: \"detectSamples\",\n    value: function detectSamples(samples) {\n      var msaaSamples = this.msaaSamples;\n      var res = MSAA_QUALITY.NONE;\n      if (samples <= 1 || msaaSamples === null) {\n        return res;\n      }\n      for (var i = 0; i < msaaSamples.length; i++) {\n        if (msaaSamples[i] <= samples) {\n          res = msaaSamples[i];\n          break;\n        }\n      }\n      if (res === 1) {\n        res = MSAA_QUALITY.NONE;\n      }\n      return res;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit(framebuffer, sourcePixels, destPixels) {\n      var current = this.current,\n        renderer = this.renderer,\n        gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      if (renderer.context.webGLVersion !== 2) {\n        return;\n      }\n      if (!current) {\n        return;\n      }\n      var fbo = current.glFramebuffers[CONTEXT_UID];\n      if (!fbo) {\n        return;\n      }\n      if (!framebuffer) {\n        if (!fbo.msaaBuffer) {\n          return;\n        }\n        var colorTexture = current.colorTextures[0];\n        if (!colorTexture) {\n          return;\n        }\n        if (!fbo.blitFramebuffer) {\n          fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n          fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n        }\n        framebuffer = fbo.blitFramebuffer;\n        if (framebuffer.colorTextures[0] !== colorTexture) {\n          framebuffer.colorTextures[0] = colorTexture;\n          framebuffer.dirtyId++;\n          framebuffer.dirtyFormat++;\n        }\n        if (framebuffer.width !== current.width || framebuffer.height !== current.height) {\n          framebuffer.width = current.width;\n          framebuffer.height = current.height;\n          framebuffer.dirtyId++;\n          framebuffer.dirtySize++;\n        }\n      }\n      if (!sourcePixels) {\n        sourcePixels = tempRectangle;\n        sourcePixels.width = current.width;\n        sourcePixels.height = current.height;\n      }\n      if (!destPixels) {\n        destPixels = sourcePixels;\n      }\n      var sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n      this.bind(framebuffer);\n      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n      gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);\n    }\n  }, {\n    key: \"disposeFramebuffer\",\n    value: function disposeFramebuffer(framebuffer, contextLost) {\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var gl = this.gl;\n      if (!fbo) {\n        return;\n      }\n      delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var index = this.managedFramebuffers.indexOf(framebuffer);\n      if (index >= 0) {\n        this.managedFramebuffers.splice(index, 1);\n      }\n      framebuffer.disposeRunner.remove(this);\n      if (!contextLost) {\n        gl.deleteFramebuffer(fbo.framebuffer);\n        if (fbo.msaaBuffer) {\n          gl.deleteRenderbuffer(fbo.msaaBuffer);\n        }\n        if (fbo.stencil) {\n          gl.deleteRenderbuffer(fbo.stencil);\n        }\n      }\n      if (fbo.blitFramebuffer) {\n        fbo.blitFramebuffer.dispose();\n      }\n    }\n  }, {\n    key: \"disposeAll\",\n    value: function disposeAll(contextLost) {\n      var list = this.managedFramebuffers;\n      this.managedFramebuffers = [];\n      for (var i = 0; i < list.length; i++) {\n        this.disposeFramebuffer(list[i], contextLost);\n      }\n    }\n  }, {\n    key: \"forceStencil\",\n    value: function forceStencil() {\n      var framebuffer = this.current;\n      if (!framebuffer) {\n        return;\n      }\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      if (!fbo || fbo.stencil) {\n        return;\n      }\n      framebuffer.stencil = true;\n      var w = framebuffer.width;\n      var h = framebuffer.height;\n      var gl = this.gl;\n      var stencil = gl.createRenderbuffer();\n      gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n      }\n      fbo.stencil = stencil;\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.current = this.unknownFramebuffer;\n      this.viewport = new Rectangle();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this.current) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.current.width,\n          height: this.current.height\n        };\n      }\n      return {\n        x: 0,\n        y: 0,\n        width: this.renderer.width,\n        height: this.renderer.height\n      };\n    }\n  }]);\n  return FramebufferSystem;\n}();\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport { FramebufferSystem };","map":null,"metadata":{},"sourceType":"module"}