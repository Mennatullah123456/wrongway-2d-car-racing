{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar Resource = require('./Resource.js');\nvar BaseTexture = require('../BaseTexture.js');\nvar autoDetectResource = require('./autoDetectResource.js');\nvar AbstractMultiResource = /*#__PURE__*/function (_Resource$Resource) {\n  _inherits(AbstractMultiResource, _Resource$Resource);\n  function AbstractMultiResource(length, options) {\n    var _this;\n    _classCallCheck(this, AbstractMultiResource);\n    var _ref = options || {},\n      width = _ref.width,\n      height = _ref.height;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbstractMultiResource).call(this, width, height));\n    _this.items = [];\n    _this.itemDirtyIds = [];\n    for (var i = 0; i < length; i++) {\n      var partTexture = new BaseTexture.BaseTexture();\n      _this.items.push(partTexture);\n      _this.itemDirtyIds.push(-2);\n    }\n    _this.length = length;\n    _this._load = null;\n    _this.baseTexture = null;\n    return _this;\n  }\n  _createClass(AbstractMultiResource, [{\n    key: \"initFromArray\",\n    value: function initFromArray(resources, options) {\n      for (var i = 0; i < this.length; i++) {\n        if (!resources[i]) {\n          continue;\n        }\n        if (resources[i].castToBaseTexture) {\n          this.addBaseTextureAt(resources[i].castToBaseTexture(), i);\n        } else if (resources[i] instanceof Resource.Resource) {\n          this.addResourceAt(resources[i], i);\n        } else {\n          this.addResourceAt(autoDetectResource.autoDetectResource(resources[i], options), i);\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0, len = this.length; i < len; i++) {\n        this.items[i].destroy();\n      }\n      this.items = null;\n      this.itemDirtyIds = null;\n      this._load = null;\n    }\n  }, {\n    key: \"addResourceAt\",\n    value: function addResourceAt(resource, index) {\n      if (!this.items[index]) {\n        throw new Error(\"Index \".concat(index, \" is out of bounds\"));\n      }\n      if (resource.valid && !this.valid) {\n        this.resize(resource.width, resource.height);\n      }\n      this.items[index].setResource(resource);\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(baseTexture) {\n      if (this.baseTexture !== null) {\n        throw new Error(\"Only one base texture per TextureArray is allowed\");\n      }\n      _get(_getPrototypeOf(AbstractMultiResource.prototype), \"bind\", this).call(this, baseTexture);\n      for (var i = 0; i < this.length; i++) {\n        this.items[i].parentTextureArray = baseTexture;\n        this.items[i].on(\"update\", baseTexture.update, baseTexture);\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind(baseTexture) {\n      _get(_getPrototypeOf(AbstractMultiResource.prototype), \"unbind\", this).call(this, baseTexture);\n      for (var i = 0; i < this.length; i++) {\n        this.items[i].parentTextureArray = null;\n        this.items[i].off(\"update\", baseTexture.update, baseTexture);\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n      if (this._load) {\n        return this._load;\n      }\n      var resources = this.items.map(function (item) {\n        return item.resource;\n      }).filter(function (item) {\n        return item;\n      });\n      var promises = resources.map(function (item) {\n        return item.load();\n      });\n      this._load = Promise.all(promises).then(function () {\n        var _this2$items$ = _this2.items[0],\n          realWidth = _this2$items$.realWidth,\n          realHeight = _this2$items$.realHeight;\n        _this2.resize(realWidth, realHeight);\n        return Promise.resolve(_this2);\n      });\n      return this._load;\n    }\n  }]);\n  return AbstractMultiResource;\n}(Resource.Resource);\nexports.AbstractMultiResource = AbstractMultiResource;","map":null,"metadata":{},"sourceType":"script"}