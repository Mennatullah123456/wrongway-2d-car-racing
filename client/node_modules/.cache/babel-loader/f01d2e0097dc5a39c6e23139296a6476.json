{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar ObjectRendererSystem = /*#__PURE__*/function () {\n  function ObjectRendererSystem(renderer) {\n    _classCallCheck(this, ObjectRendererSystem);\n    this.renderer = renderer;\n  }\n  _createClass(ObjectRendererSystem, [{\n    key: \"render\",\n    value: function render(displayObject, options) {\n      var renderer = this.renderer;\n      var renderTexture;\n      var clear;\n      var transform;\n      var skipUpdateTransform;\n      if (options) {\n        renderTexture = options.renderTexture;\n        clear = options.clear;\n        transform = options.transform;\n        skipUpdateTransform = options.skipUpdateTransform;\n      }\n      this.renderingToScreen = !renderTexture;\n      renderer.runners.prerender.emit();\n      renderer.emit(\"prerender\");\n      renderer.projection.transform = transform;\n      if (renderer.context.isLost) {\n        return;\n      }\n      if (!renderTexture) {\n        this.lastObjectRendered = displayObject;\n      }\n      if (!skipUpdateTransform) {\n        var cacheParent = displayObject.enableTempParent();\n        displayObject.updateTransform();\n        displayObject.disableTempParent(cacheParent);\n      }\n      renderer.renderTexture.bind(renderTexture);\n      renderer.batch.currentRenderer.start();\n      if (clear ?? renderer.background.clearBeforeRender) {\n        renderer.renderTexture.clear();\n      }\n      displayObject.render(renderer);\n      renderer.batch.currentRenderer.flush();\n      if (renderTexture) {\n        if (options.blit) {\n          renderer.framebuffer.blit();\n        }\n        renderTexture.baseTexture.update();\n      }\n      renderer.runners.postrender.emit();\n      renderer.projection.transform = null;\n      renderer.emit(\"postrender\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n      this.lastObjectRendered = null;\n    }\n  }]);\n  return ObjectRendererSystem;\n}();\nObjectRendererSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"objectRenderer\"\n};\nextensions.add(ObjectRendererSystem);\nexport { ObjectRendererSystem };","map":null,"metadata":{},"sourceType":"module"}