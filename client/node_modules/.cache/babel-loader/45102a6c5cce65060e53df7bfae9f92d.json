{"ast":null,"code":"function logPrettyShaderError(gl, shader) {\n  var _console;\n  var shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map(function (line, index) {\n    return \"\".concat(index, \": \").concat(line);\n  });\n  var shaderLog = gl.getShaderInfoLog(shader);\n  var splitShader = shaderLog.split(\"\\n\");\n  var dedupe = {};\n  var lineNumbers = splitShader.map(function (line) {\n    return parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"));\n  }).filter(function (n) {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  var logArgs = [\"\"];\n  lineNumbers.forEach(function (number) {\n    shaderSrc[number - 1] = \"%c\".concat(shaderSrc[number - 1], \"%c\");\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  var fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  (_console = console).warn.apply(_console, logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\nexport { logProgramError };","map":null,"metadata":{},"sourceType":"module"}