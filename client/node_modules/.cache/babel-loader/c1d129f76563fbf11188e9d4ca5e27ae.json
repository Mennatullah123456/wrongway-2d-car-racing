{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ViewableBuffer = /*#__PURE__*/function () {\n  function ViewableBuffer(sizeOrBuffer) {\n    _classCallCheck(this, ViewableBuffer);\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  _createClass(ViewableBuffer, [{\n    key: \"view\",\n    value: function view(type) {\n      return this[\"\".concat(type, \"View\")];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rawBinaryData = null;\n      this._int8View = null;\n      this._uint8View = null;\n      this._int16View = null;\n      this._uint16View = null;\n      this._int32View = null;\n      this.uint32View = null;\n      this.float32View = null;\n    }\n  }, {\n    key: \"int8View\",\n    get: function get() {\n      if (!this._int8View) {\n        this._int8View = new Int8Array(this.rawBinaryData);\n      }\n      return this._int8View;\n    }\n  }, {\n    key: \"uint8View\",\n    get: function get() {\n      if (!this._uint8View) {\n        this._uint8View = new Uint8Array(this.rawBinaryData);\n      }\n      return this._uint8View;\n    }\n  }, {\n    key: \"int16View\",\n    get: function get() {\n      if (!this._int16View) {\n        this._int16View = new Int16Array(this.rawBinaryData);\n      }\n      return this._int16View;\n    }\n  }, {\n    key: \"uint16View\",\n    get: function get() {\n      if (!this._uint16View) {\n        this._uint16View = new Uint16Array(this.rawBinaryData);\n      }\n      return this._uint16View;\n    }\n  }, {\n    key: \"int32View\",\n    get: function get() {\n      if (!this._int32View) {\n        this._int32View = new Int32Array(this.rawBinaryData);\n      }\n      return this._int32View;\n    }\n  }], [{\n    key: \"sizeOf\",\n    value: function sizeOf(type) {\n      switch (type) {\n        case \"int8\":\n        case \"uint8\":\n          return 1;\n        case \"int16\":\n        case \"uint16\":\n          return 2;\n        case \"int32\":\n        case \"uint32\":\n        case \"float32\":\n          return 4;\n        default:\n          throw new Error(\"\".concat(type, \" isn't a valid view type\"));\n      }\n    }\n  }]);\n  return ViewableBuffer;\n}();\nexports.ViewableBuffer = ViewableBuffer;","map":null,"metadata":{},"sourceType":"script"}