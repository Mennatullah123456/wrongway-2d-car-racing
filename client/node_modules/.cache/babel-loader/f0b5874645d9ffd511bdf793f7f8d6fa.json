{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar extensions = require('@pixi/extensions');\nvar ProjectionSystem = /*#__PURE__*/function () {\n  function ProjectionSystem(renderer) {\n    _classCallCheck(this, ProjectionSystem);\n    this.renderer = renderer;\n    this.destinationFrame = null;\n    this.sourceFrame = null;\n    this.defaultFrame = null;\n    this.projectionMatrix = new math.Matrix();\n    this.transform = null;\n  }\n  _createClass(ProjectionSystem, [{\n    key: \"update\",\n    value: function update(destinationFrame, sourceFrame, resolution, root) {\n      this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;\n      this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;\n      this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);\n      if (this.transform) {\n        this.projectionMatrix.append(this.transform);\n      }\n      var renderer = this.renderer;\n      renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;\n      renderer.globalUniforms.update();\n      if (renderer.shader.shader) {\n        renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n      }\n    }\n  }, {\n    key: \"calculateProjection\",\n    value: function calculateProjection(_destinationFrame, sourceFrame, _resolution, root) {\n      var pm = this.projectionMatrix;\n      var sign = !root ? 1 : -1;\n      pm.identity();\n      pm.a = 1 / sourceFrame.width * 2;\n      pm.d = sign * (1 / sourceFrame.height * 2);\n      pm.tx = -1 - sourceFrame.x * pm.a;\n      pm.ty = -sign - sourceFrame.y * pm.d;\n    }\n  }, {\n    key: \"setTransform\",\n    value: function setTransform(_matrix) {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return ProjectionSystem;\n}();\nProjectionSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"projection\"\n};\nextensions.extensions.add(ProjectionSystem);\nexports.ProjectionSystem = ProjectionSystem;","map":null,"metadata":{},"sourceType":"script"}