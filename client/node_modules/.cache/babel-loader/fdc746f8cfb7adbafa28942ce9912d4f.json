{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport './settings.mjs';\nimport { UPDATE_PRIORITY } from './const.mjs';\nimport { TickerListener } from './TickerListener.mjs';\nimport { settings } from '@pixi/settings';\nvar Ticker = /*#__PURE__*/function () {\n  function Ticker() {\n    var _this = this;\n    _classCallCheck(this, Ticker);\n    this.autoStart = false;\n    this.deltaTime = 1;\n    this.lastTime = -1;\n    this.speed = 1;\n    this.started = false;\n    this._requestId = null;\n    this._maxElapsedMS = 100;\n    this._minElapsedMS = 0;\n    this._protected = false;\n    this._lastFrame = -1;\n    this._head = new TickerListener(null, null, Infinity);\n    this.deltaMS = 1 / settings.TARGET_FPMS;\n    this.elapsedMS = 1 / settings.TARGET_FPMS;\n    this._tick = function (time) {\n      _this._requestId = null;\n      if (_this.started) {\n        _this.update(time);\n        if (_this.started && _this._requestId === null && _this._head.next) {\n          _this._requestId = requestAnimationFrame(_this._tick);\n        }\n      }\n    };\n  }\n  _createClass(Ticker, [{\n    key: \"_requestIfNeeded\",\n    value: function _requestIfNeeded() {\n      if (this._requestId === null && this._head.next) {\n        this.lastTime = performance.now();\n        this._lastFrame = this.lastTime;\n        this._requestId = requestAnimationFrame(this._tick);\n      }\n    }\n  }, {\n    key: \"_cancelIfNeeded\",\n    value: function _cancelIfNeeded() {\n      if (this._requestId !== null) {\n        cancelAnimationFrame(this._requestId);\n        this._requestId = null;\n      }\n    }\n  }, {\n    key: \"_startIfPossible\",\n    value: function _startIfPossible() {\n      if (this.started) {\n        this._requestIfNeeded();\n      } else if (this.autoStart) {\n        this.start();\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(fn, context) {\n      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UPDATE_PRIORITY.NORMAL;\n      return this._addListener(new TickerListener(fn, context, priority));\n    }\n  }, {\n    key: \"addOnce\",\n    value: function addOnce(fn, context) {\n      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UPDATE_PRIORITY.NORMAL;\n      return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n  }, {\n    key: \"_addListener\",\n    value: function _addListener(listener) {\n      var current = this._head.next;\n      var previous = this._head;\n      if (!current) {\n        listener.connect(previous);\n      } else {\n        while (current) {\n          if (listener.priority > current.priority) {\n            listener.connect(previous);\n            break;\n          }\n          previous = current;\n          current = current.next;\n        }\n        if (!listener.previous) {\n          listener.connect(previous);\n        }\n      }\n      this._startIfPossible();\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(fn, context) {\n      var listener = this._head.next;\n      while (listener) {\n        if (listener.match(fn, context)) {\n          listener = listener.destroy();\n        } else {\n          listener = listener.next;\n        }\n      }\n      if (!this._head.next) {\n        this._cancelIfNeeded();\n      }\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this._requestIfNeeded();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.started) {\n        this.started = false;\n        this._cancelIfNeeded();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this._protected) {\n        this.stop();\n        var listener = this._head.next;\n        while (listener) {\n          listener = listener.destroy(true);\n        }\n        this._head.destroy();\n        this._head = null;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();\n      var elapsedMS;\n      if (currentTime > this.lastTime) {\n        elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n        if (elapsedMS > this._maxElapsedMS) {\n          elapsedMS = this._maxElapsedMS;\n        }\n        elapsedMS *= this.speed;\n        if (this._minElapsedMS) {\n          var delta = currentTime - this._lastFrame | 0;\n          if (delta < this._minElapsedMS) {\n            return;\n          }\n          this._lastFrame = currentTime - delta % this._minElapsedMS;\n        }\n        this.deltaMS = elapsedMS;\n        this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n        var head = this._head;\n        var listener = head.next;\n        while (listener) {\n          listener = listener.emit(this.deltaTime);\n        }\n        if (!head.next) {\n          this._cancelIfNeeded();\n        }\n      } else {\n        this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n      }\n      this.lastTime = currentTime;\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      if (!this._head) {\n        return 0;\n      }\n      var count = 0;\n      var current = this._head;\n      while (current = current.next) {\n        count++;\n      }\n      return count;\n    }\n  }, {\n    key: \"FPS\",\n    get: function get() {\n      return 1e3 / this.elapsedMS;\n    }\n  }, {\n    key: \"minFPS\",\n    get: function get() {\n      return 1e3 / this._maxElapsedMS;\n    },\n    set: function set(fps) {\n      var minFPS = Math.min(this.maxFPS, fps);\n      var minFPMS = Math.min(Math.max(0, minFPS) / 1e3, settings.TARGET_FPMS);\n      this._maxElapsedMS = 1 / minFPMS;\n    }\n  }, {\n    key: \"maxFPS\",\n    get: function get() {\n      if (this._minElapsedMS) {\n        return Math.round(1e3 / this._minElapsedMS);\n      }\n      return 0;\n    },\n    set: function set(fps) {\n      if (fps === 0) {\n        this._minElapsedMS = 0;\n      } else {\n        var maxFPS = Math.max(this.minFPS, fps);\n        this._minElapsedMS = 1 / (maxFPS / 1e3);\n      }\n    }\n  }], [{\n    key: \"shared\",\n    get: function get() {\n      if (!Ticker._shared) {\n        var shared = Ticker._shared = new Ticker();\n        shared.autoStart = true;\n        shared._protected = true;\n      }\n      return Ticker._shared;\n    }\n  }, {\n    key: \"system\",\n    get: function get() {\n      if (!Ticker._system) {\n        var system = Ticker._system = new Ticker();\n        system.autoStart = true;\n        system._protected = true;\n      }\n      return Ticker._system;\n    }\n  }]);\n  return Ticker;\n}();\nexport { Ticker };","map":null,"metadata":{},"sourceType":"module"}