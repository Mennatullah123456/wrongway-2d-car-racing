{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar RenderTexture = require('./RenderTexture.js');\nvar BaseRenderTexture = require('./BaseRenderTexture.js');\nvar utils = require('@pixi/utils');\nvar constants = require('@pixi/constants');\nvar RenderTexturePool = /*#__PURE__*/function () {\n  function RenderTexturePool(textureOptions) {\n    _classCallCheck(this, RenderTexturePool);\n    this.texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n    this._pixelsWidth = 0;\n    this._pixelsHeight = 0;\n  }\n  _createClass(RenderTexturePool, [{\n    key: \"createTexture\",\n    value: function createTexture(realWidth, realHeight) {\n      var multisample = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants.MSAA_QUALITY.NONE;\n      var baseRenderTexture = new BaseRenderTexture.BaseRenderTexture(Object.assign({\n        width: realWidth,\n        height: realHeight,\n        resolution: 1,\n        multisample: multisample\n      }, this.textureOptions));\n      return new RenderTexture.RenderTexture(baseRenderTexture);\n    }\n  }, {\n    key: \"getOptimalTexture\",\n    value: function getOptimalTexture(minWidth, minHeight) {\n      var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var multisample = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants.MSAA_QUALITY.NONE;\n      var key;\n      minWidth = Math.ceil(minWidth * resolution - 1e-6);\n      minHeight = Math.ceil(minHeight * resolution - 1e-6);\n      if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight) {\n        minWidth = utils.nextPow2(minWidth);\n        minHeight = utils.nextPow2(minHeight);\n        key = ((minWidth & 65535) << 16 | minHeight & 65535) >>> 0;\n        if (multisample > 1) {\n          key += multisample * 4294967296;\n        }\n      } else {\n        key = multisample > 1 ? -multisample : -1;\n      }\n      if (!this.texturePool[key]) {\n        this.texturePool[key] = [];\n      }\n      var renderTexture = this.texturePool[key].pop();\n      if (!renderTexture) {\n        renderTexture = this.createTexture(minWidth, minHeight, multisample);\n      }\n      renderTexture.filterPoolKey = key;\n      renderTexture.setResolution(resolution);\n      return renderTexture;\n    }\n  }, {\n    key: \"getFilterTexture\",\n    value: function getFilterTexture(input, resolution, multisample) {\n      var filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || constants.MSAA_QUALITY.NONE);\n      filterTexture.filterFrame = input.filterFrame;\n      return filterTexture;\n    }\n  }, {\n    key: \"returnTexture\",\n    value: function returnTexture(renderTexture) {\n      var key = renderTexture.filterPoolKey;\n      renderTexture.filterFrame = null;\n      this.texturePool[key].push(renderTexture);\n    }\n  }, {\n    key: \"returnFilterTexture\",\n    value: function returnFilterTexture(renderTexture) {\n      this.returnTexture(renderTexture);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(destroyTextures) {\n      destroyTextures = destroyTextures !== false;\n      if (destroyTextures) {\n        for (var i in this.texturePool) {\n          var textures = this.texturePool[i];\n          if (textures) {\n            for (var j = 0; j < textures.length; j++) {\n              textures[j].destroy(true);\n            }\n          }\n        }\n      }\n      this.texturePool = {};\n    }\n  }, {\n    key: \"setScreenSize\",\n    value: function setScreenSize(size) {\n      if (size.width === this._pixelsWidth && size.height === this._pixelsHeight) {\n        return;\n      }\n      this.enableFullScreen = size.width > 0 && size.height > 0;\n      for (var i in this.texturePool) {\n        if (!(Number(i) < 0)) {\n          continue;\n        }\n        var textures = this.texturePool[i];\n        if (textures) {\n          for (var j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n        this.texturePool[i] = [];\n      }\n      this._pixelsWidth = size.width;\n      this._pixelsHeight = size.height;\n    }\n  }]);\n  return RenderTexturePool;\n}();\nRenderTexturePool.SCREEN_KEY = -1;\nexports.RenderTexturePool = RenderTexturePool;","map":null,"metadata":{},"sourceType":"script"}