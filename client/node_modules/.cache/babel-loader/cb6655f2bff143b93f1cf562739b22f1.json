{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar BlobResource = require('./BlobResource.js');\nvar _const = require('../const.js');\nvar CompressedTextureResource = /*#__PURE__*/function (_BlobResource$BlobRes) {\n  _inherits(CompressedTextureResource, _BlobResource$BlobRes);\n  function CompressedTextureResource(source, options) {\n    var _this;\n    _classCallCheck(this, CompressedTextureResource);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompressedTextureResource).call(this, source, options));\n    _this.format = options.format;\n    _this.levels = options.levels || 1;\n    _this._width = options.width;\n    _this._height = options.height;\n    _this._extension = CompressedTextureResource._formatToExtension(_this.format);\n    if (options.levelBuffers || _this.buffer) {\n      _this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(source instanceof Uint8Array ? source : _this.buffer.uint8View, _this.format, _this.levels, 4, 4, _this.width, _this.height);\n    }\n    return _this;\n  }\n  _createClass(CompressedTextureResource, [{\n    key: \"upload\",\n    value: function upload(renderer, _texture, _glTexture) {\n      var gl = renderer.gl;\n      var extension = renderer.context.extensions[this._extension];\n      if (!extension) {\n        throw new Error(\"\".concat(this._extension, \" textures are not supported on the current machine\"));\n      }\n      if (!this._levelBuffers) {\n        return false;\n      }\n      for (var i = 0, j = this.levels; i < j; i++) {\n        var _this$_levelBuffers$i = this._levelBuffers[i],\n          levelID = _this$_levelBuffers$i.levelID,\n          levelWidth = _this$_levelBuffers$i.levelWidth,\n          levelHeight = _this$_levelBuffers$i.levelHeight,\n          levelBuffer = _this$_levelBuffers$i.levelBuffer;\n        gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n      }\n      return true;\n    }\n  }, {\n    key: \"onBlobLoaded\",\n    value: function onBlobLoaded() {\n      this._levelBuffers = CompressedTextureResource._createLevelBuffers(this.buffer.uint8View, this.format, this.levels, 4, 4, this.width, this.height);\n    }\n  }], [{\n    key: \"_formatToExtension\",\n    value: function _formatToExtension(format) {\n      if (format >= 33776 && format <= 33779) {\n        return \"s3tc\";\n      } else if (format >= 37488 && format <= 37497) {\n        return \"etc\";\n      } else if (format >= 35840 && format <= 35843) {\n        return \"pvrtc\";\n      } else if (format >= 36196) {\n        return \"etc1\";\n      } else if (format >= 35986 && format <= 34798) {\n        return \"atc\";\n      }\n      throw new Error(\"Invalid (compressed) texture format given!\");\n    }\n  }, {\n    key: \"_createLevelBuffers\",\n    value: function _createLevelBuffers(buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n      var buffers = new Array(levels);\n      var offset = buffer.byteOffset;\n      var levelWidth = imageWidth;\n      var levelHeight = imageHeight;\n      var alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n      var alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n      var levelSize = alignedLevelWidth * alignedLevelHeight * _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n      for (var i = 0; i < levels; i++) {\n        buffers[i] = {\n          levelID: i,\n          levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n          levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n          levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n        };\n        offset += levelSize;\n        levelWidth = levelWidth >> 1 || 1;\n        levelHeight = levelHeight >> 1 || 1;\n        alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n        alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n        levelSize = alignedLevelWidth * alignedLevelHeight * _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n      }\n      return buffers;\n    }\n  }]);\n  return CompressedTextureResource;\n}(BlobResource.BlobResource);\nexports.CompressedTextureResource = CompressedTextureResource;","map":null,"metadata":{},"sourceType":"script"}