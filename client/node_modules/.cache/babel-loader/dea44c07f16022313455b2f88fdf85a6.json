{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar Point = require('../Point.js');\nvar tempPoints = [new Point.Point(), new Point.Point(), new Point.Point(), new Point.Point()];\nvar Rectangle = /*#__PURE__*/function () {\n  function Rectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Rectangle);\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = _const.SHAPES.RECT;\n  }\n  _createClass(Rectangle, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(rectangle) {\n      this.x = rectangle.x;\n      this.y = rectangle.y;\n      this.width = rectangle.width;\n      this.height = rectangle.height;\n      return this;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(rectangle) {\n      rectangle.x = this.x;\n      rectangle.y = this.y;\n      rectangle.width = this.width;\n      rectangle.height = this.height;\n      return rectangle;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      if (this.width <= 0 || this.height <= 0) {\n        return false;\n      }\n      if (x >= this.x && x < this.x + this.width) {\n        if (y >= this.y && y < this.y + this.height) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(other, transform) {\n      if (!transform) {\n        var x02 = this.x < other.x ? other.x : this.x;\n        var x12 = this.right > other.right ? other.right : this.right;\n        if (x12 <= x02) {\n          return false;\n        }\n        var y02 = this.y < other.y ? other.y : this.y;\n        var y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n        return y12 > y02;\n      }\n      var x0 = this.left;\n      var x1 = this.right;\n      var y0 = this.top;\n      var y1 = this.bottom;\n      if (x1 <= x0 || y1 <= y0) {\n        return false;\n      }\n      var lt = tempPoints[0].set(other.left, other.top);\n      var lb = tempPoints[1].set(other.left, other.bottom);\n      var rt = tempPoints[2].set(other.right, other.top);\n      var rb = tempPoints[3].set(other.right, other.bottom);\n      if (rt.x <= lt.x || lb.y <= lt.y) {\n        return false;\n      }\n      var s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n      if (s === 0) {\n        return false;\n      }\n      transform.apply(lt, lt);\n      transform.apply(lb, lb);\n      transform.apply(rt, rt);\n      transform.apply(rb, rb);\n      if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n        return false;\n      }\n      var nx = s * (lb.y - lt.y);\n      var ny = s * (lt.x - lb.x);\n      var n00 = nx * x0 + ny * y0;\n      var n10 = nx * x1 + ny * y0;\n      var n01 = nx * x0 + ny * y1;\n      var n11 = nx * x1 + ny * y1;\n      if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n        return false;\n      }\n      var mx = s * (lt.y - rt.y);\n      var my = s * (rt.x - lt.x);\n      var m00 = mx * x0 + my * y0;\n      var m10 = mx * x1 + my * y0;\n      var m01 = mx * x0 + my * y1;\n      var m11 = mx * x1 + my * y1;\n      if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"pad\",\n    value: function pad() {\n      var paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n      this.x -= paddingX;\n      this.y -= paddingY;\n      this.width += paddingX * 2;\n      this.height += paddingY * 2;\n      return this;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit(rectangle) {\n      var x1 = Math.max(this.x, rectangle.x);\n      var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n      var y1 = Math.max(this.y, rectangle.y);\n      var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n      this.x = x1;\n      this.width = Math.max(x2 - x1, 0);\n      this.y = y1;\n      this.height = Math.max(y2 - y1, 0);\n      return this;\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil() {\n      var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n      var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n      var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n      this.x = Math.floor((this.x + eps) * resolution) / resolution;\n      this.y = Math.floor((this.y + eps) * resolution) / resolution;\n      this.width = x2 - this.x;\n      this.height = y2 - this.y;\n      return this;\n    }\n  }, {\n    key: \"enlarge\",\n    value: function enlarge(rectangle) {\n      var x1 = Math.min(this.x, rectangle.x);\n      var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n      var y1 = Math.min(this.y, rectangle.y);\n      var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n      this.x = x1;\n      this.width = x2 - x1;\n      this.y = y1;\n      this.height = y2 - y1;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[@pixi/math:Rectangle x=\".concat(this.x, \" y=\").concat(this.y, \" width=\").concat(this.width, \" height=\").concat(this.height, \"]\");\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this.x;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this.x + this.width;\n    }\n  }, {\n    key: \"top\",\n    get: function get() {\n      return this.y;\n    }\n  }, {\n    key: \"bottom\",\n    get: function get() {\n      return this.y + this.height;\n    }\n  }], [{\n    key: \"EMPTY\",\n    get: function get() {\n      return new Rectangle(0, 0, 0, 0);\n    }\n  }]);\n  return Rectangle;\n}();\nexports.Rectangle = Rectangle;","map":null,"metadata":{},"sourceType":"script"}