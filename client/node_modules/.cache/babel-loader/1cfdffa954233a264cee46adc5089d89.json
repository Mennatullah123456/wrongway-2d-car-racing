{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ObservablePoint = require('./ObservablePoint.js');\nvar Matrix = require('./Matrix.js');\nvar _Transform = /*#__PURE__*/function () {\n  function _Transform() {\n    _classCallCheck(this, _Transform);\n    this.worldTransform = new Matrix.Matrix();\n    this.localTransform = new Matrix.Matrix();\n    this.position = new ObservablePoint.ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint.ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint.ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint.ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  _createClass(_Transform, [{\n    key: \"onChange\",\n    value: function onChange() {\n      this._localID++;\n    }\n  }, {\n    key: \"updateSkew\",\n    value: function updateSkew() {\n      this._cx = Math.cos(this._rotation + this.skew.y);\n      this._sx = Math.sin(this._rotation + this.skew.y);\n      this._cy = -Math.sin(this._rotation - this.skew.x);\n      this._sy = Math.cos(this._rotation - this.skew.x);\n      this._localID++;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[@pixi/math:Transform position=(\".concat(this.position.x, \", \").concat(this.position.y, \") rotation=\").concat(this.rotation, \" scale=(\").concat(this.scale.x, \", \").concat(this.scale.y, \") skew=(\").concat(this.skew.x, \", \").concat(this.skew.y, \") ]\");\n    }\n  }, {\n    key: \"updateLocalTransform\",\n    value: function updateLocalTransform() {\n      var lt = this.localTransform;\n      if (this._localID !== this._currentLocalID) {\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n        lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n        lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n        this._currentLocalID = this._localID;\n        this._parentID = -1;\n      }\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform(parentTransform) {\n      var lt = this.localTransform;\n      if (this._localID !== this._currentLocalID) {\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n        lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n        lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n        this._currentLocalID = this._localID;\n        this._parentID = -1;\n      }\n      if (this._parentID !== parentTransform._worldID) {\n        var pt = parentTransform.worldTransform;\n        var wt = this.worldTransform;\n        wt.a = lt.a * pt.a + lt.b * pt.c;\n        wt.b = lt.a * pt.b + lt.b * pt.d;\n        wt.c = lt.c * pt.a + lt.d * pt.c;\n        wt.d = lt.c * pt.b + lt.d * pt.d;\n        wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n        wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n        this._parentID = parentTransform._worldID;\n        this._worldID++;\n      }\n    }\n  }, {\n    key: \"setFromMatrix\",\n    value: function setFromMatrix(matrix) {\n      matrix.decompose(this);\n      this._localID++;\n    }\n  }, {\n    key: \"rotation\",\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    }\n  }]);\n  return _Transform;\n}();\nvar Transform = _Transform;\nTransform.IDENTITY = new _Transform();\nexports.Transform = Transform;","map":null,"metadata":{},"sourceType":"script"}