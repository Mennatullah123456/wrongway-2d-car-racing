{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar MaskData = require('./MaskData.js');\nvar SpriteMaskFilter = require('../filters/spriteMask/SpriteMaskFilter.js');\nvar constants = require('@pixi/constants');\nvar extensions = require('@pixi/extensions');\nvar MaskSystem = /*#__PURE__*/function () {\n  function MaskSystem(renderer) {\n    _classCallCheck(this, MaskSystem);\n    this.renderer = renderer;\n    this.enableScissor = true;\n    this.alphaMaskPool = [];\n    this.maskDataPool = [];\n    this.maskStack = [];\n    this.alphaMaskIndex = 0;\n  }\n  _createClass(MaskSystem, [{\n    key: \"setMaskStack\",\n    value: function setMaskStack(maskStack) {\n      this.maskStack = maskStack;\n      this.renderer.scissor.setMaskStack(maskStack);\n      this.renderer.stencil.setMaskStack(maskStack);\n    }\n  }, {\n    key: \"push\",\n    value: function push(target, maskDataOrTarget) {\n      var maskData = maskDataOrTarget;\n      if (!maskData.isMaskData) {\n        var d = this.maskDataPool.pop() || new MaskData.MaskData();\n        d.pooled = true;\n        d.maskObject = maskDataOrTarget;\n        maskData = d;\n      }\n      var maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n      maskData.copyCountersOrReset(maskAbove);\n      maskData._colorMask = maskAbove ? maskAbove._colorMask : 15;\n      if (maskData.autoDetect) {\n        this.detect(maskData);\n      }\n      maskData._target = target;\n      if (maskData.type !== constants.MASK_TYPES.SPRITE) {\n        this.maskStack.push(maskData);\n      }\n      if (maskData.enabled) {\n        switch (maskData.type) {\n          case constants.MASK_TYPES.SCISSOR:\n            this.renderer.scissor.push(maskData);\n            break;\n          case constants.MASK_TYPES.STENCIL:\n            this.renderer.stencil.push(maskData);\n            break;\n          case constants.MASK_TYPES.SPRITE:\n            maskData.copyCountersOrReset(null);\n            this.pushSpriteMask(maskData);\n            break;\n          case constants.MASK_TYPES.COLOR:\n            this.pushColorMask(maskData);\n            break;\n          default:\n            break;\n        }\n      }\n      if (maskData.type === constants.MASK_TYPES.SPRITE) {\n        this.maskStack.push(maskData);\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(target) {\n      var maskData = this.maskStack.pop();\n      if (!maskData || maskData._target !== target) {\n        return;\n      }\n      if (maskData.enabled) {\n        switch (maskData.type) {\n          case constants.MASK_TYPES.SCISSOR:\n            this.renderer.scissor.pop(maskData);\n            break;\n          case constants.MASK_TYPES.STENCIL:\n            this.renderer.stencil.pop(maskData.maskObject);\n            break;\n          case constants.MASK_TYPES.SPRITE:\n            this.popSpriteMask(maskData);\n            break;\n          case constants.MASK_TYPES.COLOR:\n            this.popColorMask(maskData);\n            break;\n          default:\n            break;\n        }\n      }\n      maskData.reset();\n      if (maskData.pooled) {\n        this.maskDataPool.push(maskData);\n      }\n      if (this.maskStack.length !== 0) {\n        var maskCurrent = this.maskStack[this.maskStack.length - 1];\n        if (maskCurrent.type === constants.MASK_TYPES.SPRITE && maskCurrent._filters) {\n          maskCurrent._filters[0].maskSprite = maskCurrent.maskObject;\n        }\n      }\n    }\n  }, {\n    key: \"detect\",\n    value: function detect(maskData) {\n      var maskObject = maskData.maskObject;\n      if (!maskObject) {\n        maskData.type = constants.MASK_TYPES.COLOR;\n      } else if (maskObject.isSprite) {\n        maskData.type = constants.MASK_TYPES.SPRITE;\n      } else if (this.enableScissor && this.renderer.scissor.testScissor(maskData)) {\n        maskData.type = constants.MASK_TYPES.SCISSOR;\n      } else {\n        maskData.type = constants.MASK_TYPES.STENCIL;\n      }\n    }\n  }, {\n    key: \"pushSpriteMask\",\n    value: function pushSpriteMask(maskData) {\n      var maskObject = maskData.maskObject;\n      var target = maskData._target;\n      var alphaMaskFilter = maskData._filters;\n      if (!alphaMaskFilter) {\n        alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n        if (!alphaMaskFilter) {\n          alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter.SpriteMaskFilter()];\n        }\n      }\n      var renderer = this.renderer;\n      var renderTextureSystem = renderer.renderTexture;\n      var resolution;\n      var multisample;\n      if (renderTextureSystem.current) {\n        var renderTexture = renderTextureSystem.current;\n        resolution = maskData.resolution || renderTexture.resolution;\n        multisample = maskData.multisample ?? renderTexture.multisample;\n      } else {\n        resolution = maskData.resolution || renderer.resolution;\n        multisample = maskData.multisample ?? renderer.multisample;\n      }\n      alphaMaskFilter[0].resolution = resolution;\n      alphaMaskFilter[0].multisample = multisample;\n      alphaMaskFilter[0].maskSprite = maskObject;\n      var stashFilterArea = target.filterArea;\n      target.filterArea = maskObject.getBounds(true);\n      renderer.filter.push(target, alphaMaskFilter);\n      target.filterArea = stashFilterArea;\n      if (!maskData._filters) {\n        this.alphaMaskIndex++;\n      }\n    }\n  }, {\n    key: \"popSpriteMask\",\n    value: function popSpriteMask(maskData) {\n      this.renderer.filter.pop();\n      if (maskData._filters) {\n        maskData._filters[0].maskSprite = null;\n      } else {\n        this.alphaMaskIndex--;\n        this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null;\n      }\n    }\n  }, {\n    key: \"pushColorMask\",\n    value: function pushColorMask(maskData) {\n      var currColorMask = maskData._colorMask;\n      var nextColorMask = maskData._colorMask = currColorMask & maskData.colorMask;\n      if (nextColorMask !== currColorMask) {\n        this.renderer.gl.colorMask((nextColorMask & 1) !== 0, (nextColorMask & 2) !== 0, (nextColorMask & 4) !== 0, (nextColorMask & 8) !== 0);\n      }\n    }\n  }, {\n    key: \"popColorMask\",\n    value: function popColorMask(maskData) {\n      var currColorMask = maskData._colorMask;\n      var nextColorMask = this.maskStack.length > 0 ? this.maskStack[this.maskStack.length - 1]._colorMask : 15;\n      if (nextColorMask !== currColorMask) {\n        this.renderer.gl.colorMask((nextColorMask & 1) !== 0, (nextColorMask & 2) !== 0, (nextColorMask & 4) !== 0, (nextColorMask & 8) !== 0);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return MaskSystem;\n}();\nMaskSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"mask\"\n};\nextensions.extensions.add(MaskSystem);\nexports.MaskSystem = MaskSystem;","map":null,"metadata":{},"sourceType":"script"}