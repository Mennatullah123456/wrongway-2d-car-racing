{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { GLBuffer } from './GLBuffer.mjs';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar BufferSystem = /*#__PURE__*/function () {\n  function BufferSystem(renderer) {\n    _classCallCheck(this, BufferSystem);\n    this.renderer = renderer;\n    this.managedBuffers = {};\n    this.boundBufferBases = {};\n  }\n  _createClass(BufferSystem, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }, {\n    key: \"contextChange\",\n    value: function contextChange() {\n      this.disposeAll(true);\n      this.gl = this.renderer.gl;\n      this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(buffer) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n      gl.bindBuffer(buffer.type, glBuffer.buffer);\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind(type) {\n      var gl = this.gl;\n      gl.bindBuffer(type, null);\n    }\n  }, {\n    key: \"bindBufferBase\",\n    value: function bindBufferBase(buffer, index) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      if (this.boundBufferBases[index] !== buffer) {\n        var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n        this.boundBufferBases[index] = buffer;\n        gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n      }\n    }\n  }, {\n    key: \"bindBufferRange\",\n    value: function bindBufferRange(buffer, index, offset) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      offset = offset || 0;\n      var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n      gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n  }, {\n    key: \"update\",\n    value: function update(buffer) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n      if (buffer._updateID === glBuffer.updateID) {\n        return;\n      }\n      glBuffer.updateID = buffer._updateID;\n      gl.bindBuffer(buffer.type, glBuffer.buffer);\n      if (glBuffer.byteLength >= buffer.data.byteLength) {\n        gl.bufferSubData(buffer.type, 0, buffer.data);\n      } else {\n        var drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n        glBuffer.byteLength = buffer.data.byteLength;\n        gl.bufferData(buffer.type, buffer.data, drawType);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(buffer, contextLost) {\n      if (!this.managedBuffers[buffer.id]) {\n        return;\n      }\n      delete this.managedBuffers[buffer.id];\n      var glBuffer = buffer._glBuffers[this.CONTEXT_UID];\n      var gl = this.gl;\n      buffer.disposeRunner.remove(this);\n      if (!glBuffer) {\n        return;\n      }\n      if (!contextLost) {\n        gl.deleteBuffer(glBuffer.buffer);\n      }\n      delete buffer._glBuffers[this.CONTEXT_UID];\n    }\n  }, {\n    key: \"disposeAll\",\n    value: function disposeAll(contextLost) {\n      var all = Object.keys(this.managedBuffers);\n      for (var i = 0; i < all.length; i++) {\n        this.dispose(this.managedBuffers[all[i]], contextLost);\n      }\n    }\n  }, {\n    key: \"createGLBuffer\",\n    value: function createGLBuffer(buffer) {\n      var CONTEXT_UID = this.CONTEXT_UID,\n        gl = this.gl;\n      buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());\n      this.managedBuffers[buffer.id] = buffer;\n      buffer.disposeRunner.add(this);\n      return buffer._glBuffers[CONTEXT_UID];\n    }\n  }]);\n  return BufferSystem;\n}();\nBufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"buffer\"\n};\nextensions.add(BufferSystem);\nexport { BufferSystem };","map":null,"metadata":{},"sourceType":"module"}