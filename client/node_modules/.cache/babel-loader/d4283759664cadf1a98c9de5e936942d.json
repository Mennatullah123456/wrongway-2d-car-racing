{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar mesh = require('@pixi/mesh');\nvar PlaneGeometry = require('./geometry/PlaneGeometry.js');\nvar SimplePlane = /*#__PURE__*/function (_mesh$Mesh) {\n  _inherits(SimplePlane, _mesh$Mesh);\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this;\n    _classCallCheck(this, SimplePlane);\n    var planeGeometry = new PlaneGeometry.PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new mesh.MeshMaterial(core.Texture.WHITE);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SimplePlane).call(this, planeGeometry, meshMaterial));\n    _this.texture = texture;\n    _this.autoResize = true;\n    return _this;\n  }\n  _createClass(SimplePlane, [{\n    key: \"textureUpdated\",\n    value: function textureUpdated() {\n      this._textureID = this.shader.texture._updateID;\n      var geometry = this.geometry;\n      var _this$shader$texture = this.shader.texture,\n        width = _this$shader$texture.width,\n        height = _this$shader$texture.height;\n      if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n        geometry.width = this.shader.texture.width;\n        geometry.height = this.shader.texture.height;\n        geometry.build();\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(renderer) {\n      if (this._textureID !== this.shader.texture._updateID) {\n        this.textureUpdated();\n      }\n      _get(_getPrototypeOf(SimplePlane.prototype), \"_render\", this).call(this, renderer);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      this.shader.texture.off(\"update\", this.textureUpdated, this);\n      _get(_getPrototypeOf(SimplePlane.prototype), \"destroy\", this).call(this, options);\n    }\n  }, {\n    key: \"texture\",\n    set: function set(value) {\n      if (this.shader.texture === value) {\n        return;\n      }\n      this.shader.texture = value;\n      this._textureID = -1;\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once(\"update\", this.textureUpdated, this);\n      }\n    },\n    get: function get() {\n      return this.shader.texture;\n    }\n  }]);\n  return SimplePlane;\n}(mesh.Mesh);\nexports.SimplePlane = SimplePlane;","map":null,"metadata":{},"sourceType":"script"}