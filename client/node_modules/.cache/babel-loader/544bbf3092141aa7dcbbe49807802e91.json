{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar text = require('@pixi/text');\nvar CountLimiter = require('./CountLimiter.js');\nfunction findMultipleBaseTextures(item, queue) {\n  var result = false;\n  if (item?._textures?.length) {\n    for (var i = 0; i < item._textures.length; i++) {\n      if (item._textures[i] instanceof core.Texture) {\n        var baseTexture = item._textures[i].baseTexture;\n        if (!queue.includes(baseTexture)) {\n          queue.push(baseTexture);\n          result = true;\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction findBaseTexture(item, queue) {\n  if (item.baseTexture instanceof core.BaseTexture) {\n    var texture = item.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction findTexture(item, queue) {\n  if (item._texture && item._texture instanceof core.Texture) {\n    var texture = item._texture.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction drawText(_helper, item) {\n  if (item instanceof text.Text) {\n    item.updateText(true);\n    return true;\n  }\n  return false;\n}\nfunction calculateTextStyle(_helper, item) {\n  if (item instanceof text.TextStyle) {\n    var font = item.toFontString();\n    text.TextMetrics.measureFont(font);\n    return true;\n  }\n  return false;\n}\nfunction findText(item, queue) {\n  if (item instanceof text.Text) {\n    if (!queue.includes(item.style)) {\n      queue.push(item.style);\n    }\n    if (!queue.includes(item)) {\n      queue.push(item);\n    }\n    var texture = item._texture.baseTexture;\n    if (!queue.includes(texture)) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\nfunction findTextStyle(item, queue) {\n  if (item instanceof text.TextStyle) {\n    if (!queue.includes(item)) {\n      queue.push(item);\n    }\n    return true;\n  }\n  return false;\n}\nvar BasePrepare = /*#__PURE__*/function () {\n  function BasePrepare(renderer) {\n    var _this = this;\n    _classCallCheck(this, BasePrepare);\n    this.limiter = new CountLimiter.CountLimiter(core.settings.UPLOADS_PER_FRAME);\n    this.renderer = renderer;\n    this.uploadHookHelper = null;\n    this.queue = [];\n    this.addHooks = [];\n    this.uploadHooks = [];\n    this.completes = [];\n    this.ticking = false;\n    this.delayedTick = function () {\n      if (!_this.queue) {\n        return;\n      }\n      _this.prepareItems();\n    };\n    this.registerFindHook(findText);\n    this.registerFindHook(findTextStyle);\n    this.registerFindHook(findMultipleBaseTextures);\n    this.registerFindHook(findBaseTexture);\n    this.registerFindHook(findTexture);\n    this.registerUploadHook(drawText);\n    this.registerUploadHook(calculateTextStyle);\n  }\n  _createClass(BasePrepare, [{\n    key: \"upload\",\n    value: function upload(item) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        if (item) {\n          _this2.add(item);\n        }\n        if (_this2.queue.length) {\n          _this2.completes.push(resolve);\n          if (!_this2.ticking) {\n            _this2.ticking = true;\n            core.Ticker.system.addOnce(_this2.tick, _this2, core.UPDATE_PRIORITY.UTILITY);\n          }\n        } else {\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      setTimeout(this.delayedTick, 0);\n    }\n  }, {\n    key: \"prepareItems\",\n    value: function prepareItems() {\n      this.limiter.beginFrame();\n      while (this.queue.length && this.limiter.allowedToUpload()) {\n        var item = this.queue[0];\n        var uploaded = false;\n        if (item && !item._destroyed) {\n          for (var i = 0, len = this.uploadHooks.length; i < len; i++) {\n            if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n              this.queue.shift();\n              uploaded = true;\n              break;\n            }\n          }\n        }\n        if (!uploaded) {\n          this.queue.shift();\n        }\n      }\n      if (!this.queue.length) {\n        this.ticking = false;\n        var completes = this.completes.slice(0);\n        this.completes.length = 0;\n        for (var _i = 0, _len = completes.length; _i < _len; _i++) {\n          completes[_i]();\n        }\n      } else {\n        core.Ticker.system.addOnce(this.tick, this, core.UPDATE_PRIORITY.UTILITY);\n      }\n    }\n  }, {\n    key: \"registerFindHook\",\n    value: function registerFindHook(addHook) {\n      if (addHook) {\n        this.addHooks.push(addHook);\n      }\n      return this;\n    }\n  }, {\n    key: \"registerUploadHook\",\n    value: function registerUploadHook(uploadHook) {\n      if (uploadHook) {\n        this.uploadHooks.push(uploadHook);\n      }\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      for (var i = 0, len = this.addHooks.length; i < len; i++) {\n        if (this.addHooks[i](item, this.queue)) {\n          break;\n        }\n      }\n      if (item instanceof display.Container) {\n        for (var _i2 = item.children.length - 1; _i2 >= 0; _i2--) {\n          this.add(item.children[_i2]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.ticking) {\n        core.Ticker.system.remove(this.tick, this);\n      }\n      this.ticking = false;\n      this.addHooks = null;\n      this.uploadHooks = null;\n      this.renderer = null;\n      this.completes = null;\n      this.queue = null;\n      this.limiter = null;\n      this.uploadHookHelper = null;\n    }\n  }]);\n  return BasePrepare;\n}();\nexports.BasePrepare = BasePrepare;","map":null,"metadata":{},"sourceType":"script"}