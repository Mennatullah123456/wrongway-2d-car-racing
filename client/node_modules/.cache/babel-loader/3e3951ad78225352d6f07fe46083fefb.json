{"ast":null,"code":"import { GLProgram } from '../GLProgram.mjs';\nimport { compileShader } from './compileShader.mjs';\nimport { defaultValue } from './defaultValue.mjs';\nimport { getAttributeData } from './getAttributeData.mjs';\nimport { getUniformData } from './getUniformData.mjs';\nimport { logProgramError } from './logProgramError.mjs';\nfunction generateProgram(gl, program) {\n  var glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n  var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n  var webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  var transformFeedbackVaryings = program.extra?.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== \"function\") {\n      console.warn(\"TransformFeedback is not supported but TransformFeedbackVaryings are given.\");\n    } else {\n      gl.transformFeedbackVaryings(webGLProgram, transformFeedbackVaryings.names, transformFeedbackVaryings.bufferMode === \"separate\" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS);\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program.attributeData = getAttributeData(webGLProgram, gl);\n  program.uniformData = getUniformData(webGLProgram, gl);\n  if (!/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertexSrc)) {\n    var keys = Object.keys(program.attributeData);\n    keys.sort(function (a, b) {\n      return a > b ? 1 : -1;\n    });\n    for (var i = 0; i < keys.length; i++) {\n      program.attributeData[keys[i]].location = i;\n      gl.bindAttribLocation(webGLProgram, i, keys[i]);\n    }\n    gl.linkProgram(webGLProgram);\n  }\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  var uniformData = {};\n  for (var _i in program.uniformData) {\n    var data = program.uniformData[_i];\n    uniformData[_i] = {\n      location: gl.getUniformLocation(webGLProgram, _i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  var glProgram = new GLProgram(webGLProgram, uniformData);\n  return glProgram;\n}\nexport { generateProgram };","map":null,"metadata":{},"sourceType":"module"}