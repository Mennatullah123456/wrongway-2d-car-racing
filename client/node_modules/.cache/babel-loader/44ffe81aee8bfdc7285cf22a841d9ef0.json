{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils = require('@pixi/utils');\nvar UniformGroup = require('./shader/UniformGroup.js');\nvar math = require('@pixi/math');\nvar extensions = require('@pixi/extensions');\nvar settings = require('@pixi/settings');\nvar SystemManager = require('./system/SystemManager.js');\nvar _Renderer = /*#__PURE__*/function (_SystemManager$System) {\n  _inherits(_Renderer, _SystemManager$System);\n  function _Renderer(options) {\n    var _this;\n    _classCallCheck(this, _Renderer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_Renderer).call(this));\n    options = Object.assign({}, settings.settings.RENDER_OPTIONS, options);\n    _this.gl = null;\n    _this.CONTEXT_UID = 0;\n    _this.globalUniforms = new UniformGroup.UniformGroup({\n      projectionMatrix: new math.Matrix()\n    }, true);\n    var systemConfig = {\n      runners: [\"init\", \"destroy\", \"contextChange\", \"resolutionChange\", \"reset\", \"update\", \"postrender\", \"prerender\", \"resize\"],\n      systems: _Renderer.__systems,\n      priority: [\"_view\", \"textureGenerator\", \"background\", \"_plugin\", \"startup\", \"context\", \"state\", \"texture\", \"buffer\", \"geometry\", \"framebuffer\", \"transformFeedback\", \"mask\", \"scissor\", \"stencil\", \"projection\", \"textureGC\", \"filter\", \"renderTexture\", \"batch\", \"objectRenderer\", \"_multisample\"]\n    };\n    _this.setup(systemConfig);\n    if (\"useContextAlpha\" in options) {\n      utils.deprecation(\"7.0.0\", \"options.useContextAlpha is deprecated, use options.premultipliedAlpha and options.backgroundAlpha instead\");\n      options.premultipliedAlpha = options.useContextAlpha && options.useContextAlpha !== \"notMultiplied\";\n      options.backgroundAlpha = options.useContextAlpha === false ? 1 : options.backgroundAlpha;\n    }\n    var startupOptions = {\n      hello: options.hello,\n      _plugin: _Renderer.__plugins,\n      background: {\n        alpha: options.backgroundAlpha,\n        color: options.background ?? options.backgroundColor,\n        clearBeforeRender: options.clearBeforeRender\n      },\n      _view: {\n        height: options.height,\n        width: options.width,\n        autoDensity: options.autoDensity,\n        resolution: options.resolution,\n        view: options.view\n      },\n      context: {\n        antialias: options.antialias,\n        context: options.context,\n        powerPreference: options.powerPreference,\n        premultipliedAlpha: options.premultipliedAlpha,\n        preserveDrawingBuffer: options.preserveDrawingBuffer\n      }\n    };\n    _this.startup.run(startupOptions);\n    return _this;\n  }\n  _createClass(_Renderer, [{\n    key: \"render\",\n    value: function render(displayObject, options) {\n      this.objectRenderer.render(displayObject, options);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(desiredScreenWidth, desiredScreenHeight) {\n      this._view.resizeView(desiredScreenWidth, desiredScreenHeight);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.runners.reset.emit();\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.renderTexture.bind();\n      this.renderTexture.clear();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var removeView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.runners.destroy.items.reverse();\n      this.emitWithCustomOptions(this.runners.destroy, {\n        _view: removeView\n      });\n      _get(_getPrototypeOf(_Renderer.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"generateTexture\",\n    value: function generateTexture(displayObject, options) {\n      return this.textureGenerator.generateTexture(displayObject, options);\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._plugin.plugins;\n    }\n  }, {\n    key: \"multisample\",\n    get: function get() {\n      return this._multisample.multisample;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._view.element.width;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._view.element.height;\n    }\n  }, {\n    key: \"resolution\",\n    get: function get() {\n      return this._view.resolution;\n    },\n    set: function set(value) {\n      this._view.resolution = value;\n      this.runners.resolutionChange.emit(value);\n    }\n  }, {\n    key: \"autoDensity\",\n    get: function get() {\n      return this._view.autoDensity;\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this._view.element;\n    }\n  }, {\n    key: \"screen\",\n    get: function get() {\n      return this._view.screen;\n    }\n  }, {\n    key: \"lastObjectRendered\",\n    get: function get() {\n      return this.objectRenderer.lastObjectRendered;\n    }\n  }, {\n    key: \"renderingToScreen\",\n    get: function get() {\n      return this.objectRenderer.renderingToScreen;\n    }\n  }, {\n    key: \"rendererLogId\",\n    get: function get() {\n      return \"WebGL \".concat(this.context.webGLVersion);\n    }\n  }, {\n    key: \"clearBeforeRender\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.clearBeforeRender has been deprecated, please use renderer.background.clearBeforeRender instead.\");\n      return this.background.clearBeforeRender;\n    }\n  }, {\n    key: \"useContextAlpha\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.useContextAlpha has been deprecated, please use renderer.context.premultipliedAlpha instead.\");\n      return this.context.useContextAlpha;\n    }\n  }, {\n    key: \"preserveDrawingBuffer\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.preserveDrawingBuffer has been deprecated, we cannot truly know this unless pixi created the context\");\n      return this.context.preserveDrawingBuffer;\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\");\n      return this.background.color;\n    },\n    set: function set(value) {\n      utils.deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\");\n      this.background.color = value;\n    }\n  }, {\n    key: \"backgroundAlpha\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\");\n      return this.background.color;\n    },\n    set: function set(value) {\n      utils.deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\");\n      this.background.alpha = value;\n    }\n  }, {\n    key: \"powerPreference\",\n    get: function get() {\n      utils.deprecation(\"7.0.0\", \"renderer.powerPreference has been deprecated, we can only know this if pixi creates the context\");\n      return this.context.powerPreference;\n    }\n  }], [{\n    key: \"test\",\n    value: function test(options) {\n      if (options?.forceCanvas) {\n        return false;\n      }\n      return utils.isWebGLSupported();\n    }\n  }]);\n  return _Renderer;\n}(SystemManager.SystemManager);\nvar Renderer = _Renderer;\nRenderer.extension = {\n  type: extensions.ExtensionType.Renderer,\n  priority: 1\n};\nRenderer.__plugins = {};\nRenderer.__systems = {};\nextensions.extensions.handleByMap(extensions.ExtensionType.RendererPlugin, Renderer.__plugins);\nextensions.extensions.handleByMap(extensions.ExtensionType.RendererSystem, Renderer.__systems);\nextensions.extensions.add(Renderer);\nexports.Renderer = Renderer;","map":null,"metadata":{},"sourceType":"script"}