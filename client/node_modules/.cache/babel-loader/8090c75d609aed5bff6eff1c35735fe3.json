{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar settings = require('@pixi/settings');\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(\"Path must be a string. Received \".concat(JSON.stringify(path2)));\n  }\n}\nfunction removeUrlParams(url) {\n  var re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  var res = \"\";\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += \"/\".concat(path2.slice(lastSlash + 1, i));\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nvar path = {\n  toPosix: function toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  isUrl: function isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  isDataUrl: function isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  hasProtocol: function hasProtocol(path2) {\n    return /^[^/:]+:\\//.test(this.toPosix(path2));\n  },\n  getProtocol: function getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var protocol = \"\";\n    var isFile = /^file:\\/\\/\\//.exec(path2);\n    var isHttp = /^[^/:]+:\\/\\//.exec(path2);\n    var isWindows = /^[^/:]+:\\//.exec(path2);\n    if (isFile || isHttp || isWindows) {\n      var arr = isFile?.[0] || isHttp?.[0] || isWindows?.[0];\n      protocol = arr;\n      path2 = path2.slice(arr.length);\n    }\n    return protocol;\n  },\n  toAbsolute: function toAbsolute(url, customBaseUrl, customRootUrl) {\n    if (this.isDataUrl(url)) return url;\n    var baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? settings.settings.ADAPTER.getBaseUrl()));\n    var rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n    assertPath(url);\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    var absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  normalize: function normalize(path2) {\n    path2 = this.toPosix(path2);\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    var protocol = \"\";\n    var isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    var trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator) path2 += \"/\";\n    if (isAbsolute) return \"/\".concat(path2);\n    return protocol + path2;\n  },\n  isAbsolute: function isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2)) return true;\n    return path2.startsWith(\"/\");\n  },\n  join: function join() {\n    if (arguments.length === 0) {\n      return \".\";\n    }\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0) joined = arg;else {\n          var prevArg = (i - 1 < 0 || arguments.length <= i - 1 ? undefined : arguments[i - 1]) ?? \"\";\n          if (this.extname(prevArg)) {\n            joined += \"/../\".concat(arg);\n          } else {\n            joined += \"/\".concat(arg);\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  dirname: function dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    path2 = this.toPosix(path2);\n    var code = path2.charCodeAt(0);\n    var hasRoot = code === 47;\n    var end = -1;\n    var matchedSlash = true;\n    var proto = this.getProtocol(path2);\n    var origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (var i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1) return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  rootname: function rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var root = \"\";\n    if (path2.startsWith(\"/\")) root = \"/\";else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      var index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else root = path2;\n      if (!root.endsWith(\"/\")) root += \"/\";\n    }\n    return root;\n  },\n  basename: function basename(path2, ext) {\n    assertPath(path2);\n    if (ext) assertPath(ext);\n    path2 = this.toPosix(path2);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2) return \"\";\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        var code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) return \"\";\n    return path2.slice(start, end);\n  },\n  extname: function extname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var preDotState = 0;\n    for (var i = path2.length - 1; i >= 0; --i) {\n      var code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  parse: function parse(path2) {\n    assertPath(path2);\n    var ret = {\n      root: \"\",\n      dir: \"\",\n      base: \"\",\n      ext: \"\",\n      name: \"\"\n    };\n    if (path2.length === 0) return ret;\n    path2 = this.toPosix(path2);\n    var code = path2.charCodeAt(0);\n    var isAbsolute = this.isAbsolute(path2);\n    var start;\n    var protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path2.length - 1;\n    var preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path2.slice(1, end);else ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol) ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\"\n};\nexports.path = path;","map":null,"metadata":{},"sourceType":"script"}