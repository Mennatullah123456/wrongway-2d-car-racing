{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar Filter = require('../Filter.js');\nvar math = require('@pixi/math');\nvar spriteMaskFilter = require('./spriteMaskFilter2.js');\nvar spriteMaskFilter$1 = require('./spriteMaskFilter3.js');\nvar TextureMatrix = require('../../textures/TextureMatrix.js');\nvar SpriteMaskFilter = /*#__PURE__*/function (_Filter$Filter) {\n  _inherits(SpriteMaskFilter, _Filter$Filter);\n  function SpriteMaskFilter(vertexSrc, fragmentSrc, uniforms) {\n    var _this;\n    _classCallCheck(this, SpriteMaskFilter);\n    var sprite = null;\n    if (typeof vertexSrc !== \"string\" && fragmentSrc === void 0 && uniforms === void 0) {\n      sprite = vertexSrc;\n      vertexSrc = void 0;\n      fragmentSrc = void 0;\n      uniforms = void 0;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpriteMaskFilter).call(this, vertexSrc || spriteMaskFilter[\"default\"], fragmentSrc || spriteMaskFilter$1[\"default\"], uniforms));\n    _this.maskSprite = sprite;\n    _this.maskMatrix = new math.Matrix();\n    return _this;\n  }\n  _createClass(SpriteMaskFilter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      var maskSprite = this._maskSprite;\n      var tex = maskSprite._texture;\n      if (!tex.valid) {\n        return;\n      }\n      if (!tex.uvMatrix) {\n        tex.uvMatrix = new TextureMatrix.TextureMatrix(tex, 0);\n      }\n      tex.uvMatrix.update();\n      this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1;\n      this.uniforms.mask = tex;\n      this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord);\n      this.uniforms.alpha = maskSprite.worldAlpha;\n      this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }, {\n    key: \"maskSprite\",\n    get: function get() {\n      return this._maskSprite;\n    },\n    set: function set(value) {\n      this._maskSprite = value;\n      if (this._maskSprite) {\n        this._maskSprite.renderable = false;\n      }\n    }\n  }]);\n  return SpriteMaskFilter;\n}(Filter.Filter);\nexports.SpriteMaskFilter = SpriteMaskFilter;","map":null,"metadata":{},"sourceType":"script"}