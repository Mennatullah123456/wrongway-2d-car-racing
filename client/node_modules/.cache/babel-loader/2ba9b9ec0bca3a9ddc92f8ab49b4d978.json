{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { BaseRenderTexture } from './BaseRenderTexture.mjs';\nimport { Texture } from '../textures/Texture.mjs';\nvar RenderTexture = /*#__PURE__*/function (_Texture) {\n  _inherits(RenderTexture, _Texture);\n  function RenderTexture(baseRenderTexture, frame) {\n    var _this;\n    _classCallCheck(this, RenderTexture);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RenderTexture).call(this, baseRenderTexture, frame));\n    _this.valid = true;\n    _this.filterFrame = null;\n    _this.filterPoolKey = null;\n    _this.updateUvs();\n    return _this;\n  }\n  _createClass(RenderTexture, [{\n    key: \"resize\",\n    value: function resize(desiredWidth, desiredHeight) {\n      var resizeBaseTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var resolution = this.baseTexture.resolution;\n      var width = Math.round(desiredWidth * resolution) / resolution;\n      var height = Math.round(desiredHeight * resolution) / resolution;\n      this.valid = width > 0 && height > 0;\n      this._frame.width = this.orig.width = width;\n      this._frame.height = this.orig.height = height;\n      if (resizeBaseTexture) {\n        this.baseTexture.resize(width, height);\n      }\n      this.updateUvs();\n    }\n  }, {\n    key: \"setResolution\",\n    value: function setResolution(resolution) {\n      var baseTexture = this.baseTexture;\n      if (baseTexture.resolution === resolution) {\n        return;\n      }\n      baseTexture.setResolution(resolution);\n      this.resize(baseTexture.width, baseTexture.height, false);\n    }\n  }, {\n    key: \"framebuffer\",\n    get: function get() {\n      return this.baseTexture.framebuffer;\n    }\n  }, {\n    key: \"multisample\",\n    get: function get() {\n      return this.framebuffer.multisample;\n    },\n    set: function set(value) {\n      this.framebuffer.multisample = value;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(options) {\n      return new RenderTexture(new BaseRenderTexture(options));\n    }\n  }]);\n  return RenderTexture;\n}(Texture);\nexport { RenderTexture };","map":null,"metadata":{},"sourceType":"module"}