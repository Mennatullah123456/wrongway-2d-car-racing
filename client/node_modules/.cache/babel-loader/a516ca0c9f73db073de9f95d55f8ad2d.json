{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar core = require('@pixi/core');\nvar ArcUtils = /*#__PURE__*/function () {\n  function ArcUtils() {\n    _classCallCheck(this, ArcUtils);\n  }\n  _createClass(ArcUtils, null, [{\n    key: \"curveTo\",\n    value: function curveTo(x1, y1, x2, y2, radius, points) {\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      var a1 = fromY - y1;\n      var b1 = fromX - x1;\n      var a2 = y2 - y1;\n      var b2 = x2 - x1;\n      var mm = Math.abs(a1 * b2 - b1 * a2);\n      if (mm < 1e-8 || radius === 0) {\n        if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n          points.push(x1, y1);\n        }\n        return null;\n      }\n      var dd = a1 * a1 + b1 * b1;\n      var cc = a2 * a2 + b2 * b2;\n      var tt = a1 * a2 + b1 * b2;\n      var k1 = radius * Math.sqrt(dd) / mm;\n      var k2 = radius * Math.sqrt(cc) / mm;\n      var j1 = k1 * tt / dd;\n      var j2 = k2 * tt / cc;\n      var cx = k1 * b2 + k2 * b1;\n      var cy = k1 * a2 + k2 * a1;\n      var px = b1 * (k2 + j1);\n      var py = a1 * (k2 + j1);\n      var qx = b2 * (k1 + j2);\n      var qy = a2 * (k1 + j2);\n      var startAngle = Math.atan2(py - cy, px - cx);\n      var endAngle = Math.atan2(qy - cy, qx - cx);\n      return {\n        cx: cx + x1,\n        cy: cy + y1,\n        radius: radius,\n        startAngle: startAngle,\n        endAngle: endAngle,\n        anticlockwise: b1 * a2 > b2 * a1\n      };\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n      var sweep = endAngle - startAngle;\n      var n = _const.GRAPHICS_CURVES._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / core.PI_2) * 40);\n      var theta = sweep / (n * 2);\n      var theta2 = theta * 2;\n      var cTheta = Math.cos(theta);\n      var sTheta = Math.sin(theta);\n      var segMinus = n - 1;\n      var remainder = segMinus % 1 / segMinus;\n      for (var i = 0; i <= segMinus; ++i) {\n        var real = i + remainder * i;\n        var angle = theta + startAngle + theta2 * real;\n        var c = Math.cos(angle);\n        var s = -Math.sin(angle);\n        points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);\n      }\n    }\n  }]);\n  return ArcUtils;\n}();\nexports.ArcUtils = ArcUtils;","map":null,"metadata":{},"sourceType":"script"}