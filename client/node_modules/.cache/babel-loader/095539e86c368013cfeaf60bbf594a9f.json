{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Filter } from '../Filter.mjs';\nimport { Matrix } from '@pixi/math';\nimport vertex from './spriteMaskFilter2.mjs';\nimport fragment from './spriteMaskFilter3.mjs';\nimport { TextureMatrix } from '../../textures/TextureMatrix.mjs';\nvar SpriteMaskFilter = /*#__PURE__*/function (_Filter) {\n  _inherits(SpriteMaskFilter, _Filter);\n  function SpriteMaskFilter(vertexSrc, fragmentSrc, uniforms) {\n    var _this;\n    _classCallCheck(this, SpriteMaskFilter);\n    var sprite = null;\n    if (typeof vertexSrc !== \"string\" && fragmentSrc === void 0 && uniforms === void 0) {\n      sprite = vertexSrc;\n      vertexSrc = void 0;\n      fragmentSrc = void 0;\n      uniforms = void 0;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpriteMaskFilter).call(this, vertexSrc || vertex, fragmentSrc || fragment, uniforms));\n    _this.maskSprite = sprite;\n    _this.maskMatrix = new Matrix();\n    return _this;\n  }\n  _createClass(SpriteMaskFilter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      var maskSprite = this._maskSprite;\n      var tex = maskSprite._texture;\n      if (!tex.valid) {\n        return;\n      }\n      if (!tex.uvMatrix) {\n        tex.uvMatrix = new TextureMatrix(tex, 0);\n      }\n      tex.uvMatrix.update();\n      this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1;\n      this.uniforms.mask = tex;\n      this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord);\n      this.uniforms.alpha = maskSprite.worldAlpha;\n      this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }, {\n    key: \"maskSprite\",\n    get: function get() {\n      return this._maskSprite;\n    },\n    set: function set(value) {\n      this._maskSprite = value;\n      if (this._maskSprite) {\n        this._maskSprite.renderable = false;\n      }\n    }\n  }]);\n  return SpriteMaskFilter;\n}(Filter);\nexport { SpriteMaskFilter };","map":null,"metadata":{},"sourceType":"module"}