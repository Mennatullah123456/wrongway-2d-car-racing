{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar constants = require('@pixi/constants');\nvar settings = require('@pixi/settings');\nvar BaseImageResource = require('./BaseImageResource.js');\nvar ImageResource = /*#__PURE__*/function (_BaseImageResource$Ba) {\n  _inherits(ImageResource, _BaseImageResource$Ba);\n  function ImageResource(source, options) {\n    var _this;\n    _classCallCheck(this, ImageResource);\n    options = options || {};\n    if (typeof source === \"string\") {\n      var imageElement = new Image();\n      BaseImageResource.BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);\n      imageElement.src = source;\n      source = imageElement;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageResource).call(this, source));\n    if (!source.complete && !!_this._width && !!_this._height) {\n      _this._width = 0;\n      _this._height = 0;\n    }\n    _this.url = source.src;\n    _this._process = null;\n    _this.preserveBitmap = false;\n    _this.createBitmap = (options.createBitmap ?? settings.settings.CREATE_IMAGE_BITMAP) && !!globalThis.createImageBitmap;\n    _this.alphaMode = typeof options.alphaMode === \"number\" ? options.alphaMode : null;\n    _this.bitmap = null;\n    _this._load = null;\n    if (options.autoLoad !== false) {\n      _this.load();\n    }\n    return _this;\n  }\n  _createClass(ImageResource, [{\n    key: \"load\",\n    value: function load(createBitmap) {\n      var _this2 = this;\n      if (this._load) {\n        return this._load;\n      }\n      if (createBitmap !== void 0) {\n        this.createBitmap = createBitmap;\n      }\n      this._load = new Promise(function (resolve, reject) {\n        var source = _this2.source;\n        _this2.url = source.src;\n        var completed = function completed() {\n          if (_this2.destroyed) {\n            return;\n          }\n          source.onload = null;\n          source.onerror = null;\n          _this2.resize(source.width, source.height);\n          _this2._load = null;\n          if (_this2.createBitmap) {\n            resolve(_this2.process());\n          } else {\n            resolve(_this2);\n          }\n        };\n        if (source.complete && source.src) {\n          completed();\n        } else {\n          source.onload = completed;\n          source.onerror = function (event) {\n            reject(event);\n            _this2.onError.emit(event);\n          };\n        }\n      });\n      return this._load;\n    }\n  }, {\n    key: \"process\",\n    value: function process() {\n      var _this3 = this;\n      var source = this.source;\n      if (this._process !== null) {\n        return this._process;\n      }\n      if (this.bitmap !== null || !globalThis.createImageBitmap) {\n        return Promise.resolve(this);\n      }\n      var createImageBitmap = globalThis.createImageBitmap;\n      var cors = !source.crossOrigin || source.crossOrigin === \"anonymous\";\n      this._process = fetch(source.src, {\n        mode: cors ? \"cors\" : \"no-cors\"\n      }).then(function (r) {\n        return r.blob();\n      }).then(function (blob) {\n        return createImageBitmap(blob, 0, 0, source.width, source.height, {\n          premultiplyAlpha: _this3.alphaMode === null || _this3.alphaMode === constants.ALPHA_MODES.UNPACK ? \"premultiply\" : \"none\"\n        });\n      }).then(function (bitmap) {\n        if (_this3.destroyed) {\n          return Promise.reject();\n        }\n        _this3.bitmap = bitmap;\n        _this3.update();\n        _this3._process = null;\n        return Promise.resolve(_this3);\n      });\n      return this._process;\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(renderer, baseTexture, glTexture) {\n      if (typeof this.alphaMode === \"number\") {\n        baseTexture.alphaMode = this.alphaMode;\n      }\n      if (!this.createBitmap) {\n        return _get(_getPrototypeOf(ImageResource.prototype), \"upload\", this).call(this, renderer, baseTexture, glTexture);\n      }\n      if (!this.bitmap) {\n        this.process();\n        if (!this.bitmap) {\n          return false;\n        }\n      }\n      _get(_getPrototypeOf(ImageResource.prototype), \"upload\", this).call(this, renderer, baseTexture, glTexture, this.bitmap);\n      if (!this.preserveBitmap) {\n        var flag = true;\n        var glTextures = baseTexture._glTextures;\n        for (var key in glTextures) {\n          var otherTex = glTextures[key];\n          if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId) {\n            flag = false;\n            break;\n          }\n        }\n        if (flag) {\n          if (this.bitmap.close) {\n            this.bitmap.close();\n          }\n          this.bitmap = null;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.source.onload = null;\n      this.source.onerror = null;\n      _get(_getPrototypeOf(ImageResource.prototype), \"dispose\", this).call(this);\n      if (this.bitmap) {\n        this.bitmap.close();\n        this.bitmap = null;\n      }\n      this._process = null;\n      this._load = null;\n    }\n  }], [{\n    key: \"test\",\n    value: function test(source) {\n      return typeof HTMLImageElement !== \"undefined\" && (typeof source === \"string\" || source instanceof HTMLImageElement);\n    }\n  }]);\n  return ImageResource;\n}(BaseImageResource.BaseImageResource);\nexports.ImageResource = ImageResource;","map":null,"metadata":{},"sourceType":"script"}