{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar mesh = require('@pixi/mesh');\nvar PlaneGeometry = /*#__PURE__*/function (_mesh$MeshGeometry) {\n  _inherits(PlaneGeometry, _mesh$MeshGeometry);\n  function PlaneGeometry() {\n    var _this;\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    var segWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    var segHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    _classCallCheck(this, PlaneGeometry);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaneGeometry).call(this));\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n    _this.build();\n    return _this;\n  }\n  _createClass(PlaneGeometry, [{\n    key: \"build\",\n    value: function build() {\n      var total = this.segWidth * this.segHeight;\n      var verts = [];\n      var uvs = [];\n      var indices = [];\n      var segmentsX = this.segWidth - 1;\n      var segmentsY = this.segHeight - 1;\n      var sizeX = this.width / segmentsX;\n      var sizeY = this.height / segmentsY;\n      for (var i = 0; i < total; i++) {\n        var x = i % this.segWidth;\n        var y = i / this.segWidth | 0;\n        verts.push(x * sizeX, y * sizeY);\n        uvs.push(x / segmentsX, y / segmentsY);\n      }\n      var totalSub = segmentsX * segmentsY;\n      for (var _i = 0; _i < totalSub; _i++) {\n        var xpos = _i % segmentsX;\n        var ypos = _i / segmentsX | 0;\n        var value = ypos * this.segWidth + xpos;\n        var value2 = ypos * this.segWidth + xpos + 1;\n        var value3 = (ypos + 1) * this.segWidth + xpos;\n        var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n        indices.push(value, value2, value3, value2, value4, value3);\n      }\n      this.buffers[0].data = new Float32Array(verts);\n      this.buffers[1].data = new Float32Array(uvs);\n      this.indexBuffer.data = new Uint16Array(indices);\n      this.buffers[0].update();\n      this.buffers[1].update();\n      this.indexBuffer.update();\n    }\n  }]);\n  return PlaneGeometry;\n}(mesh.MeshGeometry);\nexports.PlaneGeometry = PlaneGeometry;","map":null,"metadata":{},"sourceType":"script"}