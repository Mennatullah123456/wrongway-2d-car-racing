{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar TransformFeedbackSystem = /*#__PURE__*/function () {\n  function TransformFeedbackSystem(renderer) {\n    _classCallCheck(this, TransformFeedbackSystem);\n    this.renderer = renderer;\n  }\n  _createClass(TransformFeedbackSystem, [{\n    key: \"contextChange\",\n    value: function contextChange() {\n      this.gl = this.renderer.gl;\n      this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(transformFeedback) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glTransformFeedback = transformFeedback._glTransformFeedbacks[CONTEXT_UID] || this.createGLTransformFeedback(transformFeedback);\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var gl = this.gl;\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    }\n  }, {\n    key: \"beginTransformFeedback\",\n    value: function beginTransformFeedback(drawMode, shader) {\n      var gl = this.gl,\n        renderer = this.renderer;\n      if (shader) {\n        renderer.shader.bind(shader);\n      }\n      gl.beginTransformFeedback(drawMode);\n    }\n  }, {\n    key: \"endTransformFeedback\",\n    value: function endTransformFeedback() {\n      var gl = this.gl;\n      gl.endTransformFeedback();\n    }\n  }, {\n    key: \"createGLTransformFeedback\",\n    value: function createGLTransformFeedback(tf) {\n      var gl = this.gl,\n        renderer = this.renderer,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glTransformFeedback = gl.createTransformFeedback();\n      tf._glTransformFeedbacks[CONTEXT_UID] = glTransformFeedback;\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n      for (var i = 0; i < tf.buffers.length; i++) {\n        var buffer = tf.buffers[i];\n        if (!buffer) continue;\n        renderer.buffer.update(buffer);\n        buffer._glBuffers[CONTEXT_UID].refCount++;\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer._glBuffers[CONTEXT_UID].buffer || null);\n      }\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n      tf.disposeRunner.add(this);\n      return glTransformFeedback;\n    }\n  }, {\n    key: \"disposeTransformFeedback\",\n    value: function disposeTransformFeedback(tf, contextLost) {\n      var glTF = tf._glTransformFeedbacks[this.CONTEXT_UID];\n      var gl = this.gl;\n      tf.disposeRunner.remove(this);\n      var bufferSystem = this.renderer.buffer;\n      if (bufferSystem) {\n        for (var i = 0; i < tf.buffers.length; i++) {\n          var buffer = tf.buffers[i];\n          if (!buffer) continue;\n          var buf = buffer._glBuffers[this.CONTEXT_UID];\n          if (buf) {\n            buf.refCount--;\n            if (buf.refCount === 0 && !contextLost) {\n              bufferSystem.dispose(buffer, contextLost);\n            }\n          }\n        }\n      }\n      if (!glTF) {\n        return;\n      }\n      if (!contextLost) {\n        gl.deleteTransformFeedback(glTF);\n      }\n      delete tf._glTransformFeedbacks[this.CONTEXT_UID];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return TransformFeedbackSystem;\n}();\nTransformFeedbackSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"transformFeedback\"\n};\nextensions.add(TransformFeedbackSystem);\nexport { TransformFeedbackSystem };","map":null,"metadata":{},"sourceType":"module"}