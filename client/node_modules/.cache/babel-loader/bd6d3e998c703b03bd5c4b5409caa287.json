{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { ENV } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport '../settings.mjs';\nimport { settings } from '@pixi/settings';\nvar CONTEXT_UID_COUNTER = 0;\nvar ContextSystem = /*#__PURE__*/function () {\n  function ContextSystem(renderer) {\n    _classCallCheck(this, ContextSystem);\n    this.renderer = renderer;\n    this.webGLVersion = 1;\n    this.extensions = {};\n    this.supports = {\n      uint32Indices: false\n    };\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  _createClass(ContextSystem, [{\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      this.gl = gl;\n      this.renderer.gl = gl;\n      this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    }\n  }, {\n    key: \"init\",\n    value: function init(options) {\n      if (options.context) {\n        this.initFromContext(options.context);\n      } else {\n        var alpha = this.renderer.background.alpha < 1;\n        var premultipliedAlpha = options.premultipliedAlpha;\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n        this.useContextAlpha = options.useContextAlpha;\n        this.powerPreference = options.powerPreference;\n        this.initFromOptions({\n          alpha: alpha,\n          premultipliedAlpha: premultipliedAlpha,\n          antialias: options.antialias,\n          stencil: true,\n          preserveDrawingBuffer: options.preserveDrawingBuffer,\n          powerPreference: options.powerPreference\n        });\n      }\n    }\n  }, {\n    key: \"initFromContext\",\n    value: function initFromContext(gl) {\n      this.gl = gl;\n      this.validateContext(gl);\n      this.renderer.gl = gl;\n      this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n      this.renderer.runners.contextChange.emit(gl);\n      var view = this.renderer.view;\n      if (view.addEventListener !== void 0) {\n        view.addEventListener(\"webglcontextlost\", this.handleContextLost, false);\n        view.addEventListener(\"webglcontextrestored\", this.handleContextRestored, false);\n      }\n    }\n  }, {\n    key: \"initFromOptions\",\n    value: function initFromOptions(options) {\n      var gl = this.createContext(this.renderer.view, options);\n      this.initFromContext(gl);\n    }\n  }, {\n    key: \"createContext\",\n    value: function createContext(canvas, options) {\n      var gl;\n      if (settings.PREFER_ENV >= ENV.WEBGL2) {\n        gl = canvas.getContext(\"webgl2\", options);\n      }\n      if (gl) {\n        this.webGLVersion = 2;\n      } else {\n        this.webGLVersion = 1;\n        gl = canvas.getContext(\"webgl\", options) || canvas.getContext(\"experimental-webgl\", options);\n        if (!gl) {\n          throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n        }\n      }\n      this.gl = gl;\n      this.getExtensions();\n      return this.gl;\n    }\n  }, {\n    key: \"getExtensions\",\n    value: function getExtensions() {\n      var gl = this.gl;\n      var common = {\n        loseContext: gl.getExtension(\"WEBGL_lose_context\"),\n        anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n        s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n        etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n        etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n        pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n        atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n        astc: gl.getExtension(\"WEBGL_compressed_texture_astc\")\n      };\n      if (this.webGLVersion === 1) {\n        Object.assign(this.extensions, common, {\n          drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n          depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n          vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n          uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n          floatTexture: gl.getExtension(\"OES_texture_float\"),\n          floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n          textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n          textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\")\n        });\n      } else if (this.webGLVersion === 2) {\n        Object.assign(this.extensions, common, {\n          colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n        });\n      }\n    }\n  }, {\n    key: \"handleContextLost\",\n    value: function handleContextLost(event) {\n      var _this = this;\n      event.preventDefault();\n      setTimeout(function () {\n        if (_this.gl.isContextLost() && _this.extensions.loseContext) {\n          _this.extensions.loseContext.restoreContext();\n        }\n      }, 0);\n    }\n  }, {\n    key: \"handleContextRestored\",\n    value: function handleContextRestored() {\n      this.renderer.runners.contextChange.emit(this.gl);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var view = this.renderer.view;\n      this.renderer = null;\n      if (view.removeEventListener !== void 0) {\n        view.removeEventListener(\"webglcontextlost\", this.handleContextLost);\n        view.removeEventListener(\"webglcontextrestored\", this.handleContextRestored);\n      }\n      this.gl.useProgram(null);\n      if (this.extensions.loseContext) {\n        this.extensions.loseContext.loseContext();\n      }\n    }\n  }, {\n    key: \"postrender\",\n    value: function postrender() {\n      if (this.renderer.objectRenderer.renderingToScreen) {\n        this.gl.flush();\n      }\n    }\n  }, {\n    key: \"validateContext\",\n    value: function validateContext(gl) {\n      var attributes = gl.getContextAttributes();\n      var isWebGl2 = \"WebGL2RenderingContext\" in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n      if (isWebGl2) {\n        this.webGLVersion = 2;\n      }\n      if (attributes && !attributes.stencil) {\n        console.warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n      }\n      var hasuint32 = isWebGl2 || !!gl.getExtension(\"OES_element_index_uint\");\n      this.supports.uint32Indices = hasuint32;\n      if (!hasuint32) {\n        console.warn(\"Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly\");\n      }\n    }\n  }, {\n    key: \"isLost\",\n    get: function get() {\n      return !this.gl || this.gl.isContextLost();\n    }\n  }]);\n  return ContextSystem;\n}();\nContextSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"context\"\n};\nextensions.add(ContextSystem);\nexport { ContextSystem };","map":null,"metadata":{},"sourceType":"module"}