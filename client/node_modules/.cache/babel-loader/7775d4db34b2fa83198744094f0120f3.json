{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar events = require('@pixi/events');\nvar accessibleTarget = require('./accessibleTarget.js');\ndisplay.DisplayObject.mixin(accessibleTarget.accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1e3;\nvar DIV_HOOK_POS_Y = -1e3;\nvar DIV_HOOK_ZINDEX = 2;\nvar AccessibilityManager = /*#__PURE__*/function () {\n  function AccessibilityManager(renderer) {\n    _classCallCheck(this, AccessibilityManager);\n    this.debug = false;\n    this._isActive = false;\n    this._isMobileAccessibility = false;\n    this.pool = [];\n    this.renderId = 0;\n    this.children = [];\n    this.androidUpdateCount = 0;\n    this.androidUpdateFrequency = 500;\n    this._hookDiv = null;\n    if (core.utils.isMobile.tablet || core.utils.isMobile.phone) {\n      this.createTouchHook();\n    }\n    var div = document.createElement(\"div\");\n    div.style.width = \"\".concat(DIV_TOUCH_SIZE, \"px\");\n    div.style.height = \"\".concat(DIV_TOUCH_SIZE, \"px\");\n    div.style.position = \"absolute\";\n    div.style.top = \"\".concat(DIV_TOUCH_POS_X, \"px\");\n    div.style.left = \"\".concat(DIV_TOUCH_POS_Y, \"px\");\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n  }\n  _createClass(AccessibilityManager, [{\n    key: \"createTouchHook\",\n    value: function createTouchHook() {\n      var _this = this;\n      var hookDiv = document.createElement(\"button\");\n      hookDiv.style.width = \"\".concat(DIV_HOOK_SIZE, \"px\");\n      hookDiv.style.height = \"\".concat(DIV_HOOK_SIZE, \"px\");\n      hookDiv.style.position = \"absolute\";\n      hookDiv.style.top = \"\".concat(DIV_HOOK_POS_X, \"px\");\n      hookDiv.style.left = \"\".concat(DIV_HOOK_POS_Y, \"px\");\n      hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n      hookDiv.style.backgroundColor = \"#FF0000\";\n      hookDiv.title = \"select to enable accessibility for this content\";\n      hookDiv.addEventListener(\"focus\", function () {\n        _this._isMobileAccessibility = true;\n        _this.activate();\n        _this.destroyTouchHook();\n      });\n      document.body.appendChild(hookDiv);\n      this._hookDiv = hookDiv;\n    }\n  }, {\n    key: \"destroyTouchHook\",\n    value: function destroyTouchHook() {\n      if (!this._hookDiv) {\n        return;\n      }\n      document.body.removeChild(this._hookDiv);\n      this._hookDiv = null;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (this._isActive) {\n        return;\n      }\n      this._isActive = true;\n      globalThis.document.addEventListener(\"mousemove\", this._onMouseMove, true);\n      globalThis.removeEventListener(\"keydown\", this._onKeyDown, false);\n      this.renderer.on(\"postrender\", this.update, this);\n      this.renderer.view.parentNode?.appendChild(this.div);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      if (!this._isActive || this._isMobileAccessibility) {\n        return;\n      }\n      this._isActive = false;\n      globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n      globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n      this.renderer.off(\"postrender\", this.update);\n      this.div.parentNode?.removeChild(this.div);\n    }\n  }, {\n    key: \"updateAccessibleObjects\",\n    value: function updateAccessibleObjects(displayObject) {\n      if (!displayObject.visible || !displayObject.accessibleChildren) {\n        return;\n      }\n      if (displayObject.accessible && displayObject.interactive) {\n        if (!displayObject._accessibleActive) {\n          this.addChild(displayObject);\n        }\n        displayObject.renderId = this.renderId;\n      }\n      var children = displayObject.children;\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          this.updateAccessibleObjects(children[i]);\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var now = performance.now();\n      if (core.utils.isMobile.android.device && now < this.androidUpdateCount) {\n        return;\n      }\n      this.androidUpdateCount = now + this.androidUpdateFrequency;\n      if (!this.renderer.renderingToScreen) {\n        return;\n      }\n      if (this.renderer.lastObjectRendered) {\n        this.updateAccessibleObjects(this.renderer.lastObjectRendered);\n      }\n      var _this$renderer$view$g = this.renderer.view.getBoundingClientRect(),\n        x = _this$renderer$view$g.x,\n        y = _this$renderer$view$g.y,\n        width = _this$renderer$view$g.width,\n        height = _this$renderer$view$g.height;\n      var _this$renderer = this.renderer,\n        viewWidth = _this$renderer.width,\n        viewHeight = _this$renderer.height,\n        resolution = _this$renderer.resolution;\n      var sx = width / viewWidth * resolution;\n      var sy = height / viewHeight * resolution;\n      var div = this.div;\n      div.style.left = \"\".concat(x, \"px\");\n      div.style.top = \"\".concat(y, \"px\");\n      div.style.width = \"\".concat(viewWidth, \"px\");\n      div.style.height = \"\".concat(viewHeight, \"px\");\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.renderId !== this.renderId) {\n          child._accessibleActive = false;\n          core.utils.removeItems(this.children, i, 1);\n          this.div.removeChild(child._accessibleDiv);\n          this.pool.push(child._accessibleDiv);\n          child._accessibleDiv = null;\n          i--;\n        } else {\n          div = child._accessibleDiv;\n          var hitArea = child.hitArea;\n          var wt = child.worldTransform;\n          if (child.hitArea) {\n            div.style.left = \"\".concat((wt.tx + hitArea.x * wt.a) * sx, \"px\");\n            div.style.top = \"\".concat((wt.ty + hitArea.y * wt.d) * sy, \"px\");\n            div.style.width = \"\".concat(hitArea.width * wt.a * sx, \"px\");\n            div.style.height = \"\".concat(hitArea.height * wt.d * sy, \"px\");\n          } else {\n            hitArea = child.getBounds();\n            this.capHitArea(hitArea);\n            div.style.left = \"\".concat(hitArea.x * sx, \"px\");\n            div.style.top = \"\".concat(hitArea.y * sy, \"px\");\n            div.style.width = \"\".concat(hitArea.width * sx, \"px\");\n            div.style.height = \"\".concat(hitArea.height * sy, \"px\");\n            if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n              div.title = child.accessibleTitle;\n            }\n            if (div.getAttribute(\"aria-label\") !== child.accessibleHint && child.accessibleHint !== null) {\n              div.setAttribute(\"aria-label\", child.accessibleHint);\n            }\n          }\n          if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n            div.title = child.accessibleTitle;\n            div.tabIndex = child.tabIndex;\n            if (this.debug) this.updateDebugHTML(div);\n          }\n        }\n      }\n      this.renderId++;\n    }\n  }, {\n    key: \"updateDebugHTML\",\n    value: function updateDebugHTML(div) {\n      div.innerHTML = \"type: \".concat(div.type, \"</br> title : \").concat(div.title, \"</br> tabIndex: \").concat(div.tabIndex);\n    }\n  }, {\n    key: \"capHitArea\",\n    value: function capHitArea(hitArea) {\n      if (hitArea.x < 0) {\n        hitArea.width += hitArea.x;\n        hitArea.x = 0;\n      }\n      if (hitArea.y < 0) {\n        hitArea.height += hitArea.y;\n        hitArea.y = 0;\n      }\n      var _this$renderer2 = this.renderer,\n        viewWidth = _this$renderer2.width,\n        viewHeight = _this$renderer2.height;\n      if (hitArea.x + hitArea.width > viewWidth) {\n        hitArea.width = viewWidth - hitArea.x;\n      }\n      if (hitArea.y + hitArea.height > viewHeight) {\n        hitArea.height = viewHeight - hitArea.y;\n      }\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(displayObject) {\n      var div = this.pool.pop();\n      if (!div) {\n        div = document.createElement(\"button\");\n        div.style.width = \"\".concat(DIV_TOUCH_SIZE, \"px\");\n        div.style.height = \"\".concat(DIV_TOUCH_SIZE, \"px\");\n        div.style.backgroundColor = this.debug ? \"rgba(255,255,255,0.5)\" : \"transparent\";\n        div.style.position = \"absolute\";\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n        div.style.borderStyle = \"none\";\n        if (navigator.userAgent.toLowerCase().includes(\"chrome\")) {\n          div.setAttribute(\"aria-live\", \"off\");\n        } else {\n          div.setAttribute(\"aria-live\", \"polite\");\n        }\n        if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n          div.setAttribute(\"aria-relevant\", \"additions\");\n        } else {\n          div.setAttribute(\"aria-relevant\", \"text\");\n        }\n        div.addEventListener(\"click\", this._onClick.bind(this));\n        div.addEventListener(\"focus\", this._onFocus.bind(this));\n        div.addEventListener(\"focusout\", this._onFocusOut.bind(this));\n      }\n      div.style.pointerEvents = displayObject.accessiblePointerEvents;\n      div.type = displayObject.accessibleType;\n      if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n        div.title = displayObject.accessibleTitle;\n      } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n        div.title = \"displayObject \".concat(displayObject.tabIndex);\n      }\n      if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n        div.setAttribute(\"aria-label\", displayObject.accessibleHint);\n      }\n      if (this.debug) this.updateDebugHTML(div);\n      displayObject._accessibleActive = true;\n      displayObject._accessibleDiv = div;\n      div.displayObject = displayObject;\n      this.children.push(displayObject);\n      this.div.appendChild(displayObject._accessibleDiv);\n      displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n  }, {\n    key: \"_dispatchEvent\",\n    value: function _dispatchEvent(e, type) {\n      var target = e.target.displayObject;\n      var boundry = this.renderer.events.rootBoundary;\n      var event = Object.assign(new events.FederatedEvent(boundry), {\n        target: target\n      });\n      boundry.rootTarget = this.renderer.lastObjectRendered;\n      type.forEach(function (type2) {\n        return boundry.dispatchEvent(event, type2);\n      });\n    }\n  }, {\n    key: \"_onClick\",\n    value: function _onClick(e) {\n      this._dispatchEvent(e, [\"click\", \"pointertap\", \"tap\"]);\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(e) {\n      if (!e.target.getAttribute(\"aria-live\")) {\n        e.target.setAttribute(\"aria-live\", \"assertive\");\n      }\n      this._dispatchEvent(e, [\"mouseover\"]);\n    }\n  }, {\n    key: \"_onFocusOut\",\n    value: function _onFocusOut(e) {\n      if (!e.target.getAttribute(\"aria-live\")) {\n        e.target.setAttribute(\"aria-live\", \"polite\");\n      }\n      this._dispatchEvent(e, [\"mouseout\"]);\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(e) {\n      if (e.keyCode !== KEY_CODE_TAB) {\n        return;\n      }\n      this.activate();\n    }\n  }, {\n    key: \"_onMouseMove\",\n    value: function _onMouseMove(e) {\n      if (e.movementX === 0 && e.movementY === 0) {\n        return;\n      }\n      this.deactivate();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyTouchHook();\n      this.div = null;\n      globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n      globalThis.removeEventListener(\"keydown\", this._onKeyDown);\n      this.pool = null;\n      this.children = null;\n      this.renderer = null;\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this._isActive;\n    }\n  }, {\n    key: \"isMobileAccessibility\",\n    get: function get() {\n      return this._isMobileAccessibility;\n    }\n  }]);\n  return AccessibilityManager;\n}();\nAccessibilityManager.extension = {\n  name: \"accessibility\",\n  type: [core.ExtensionType.RendererPlugin, core.ExtensionType.CanvasRendererPlugin]\n};\ncore.extensions.add(AccessibilityManager);\nexports.AccessibilityManager = AccessibilityManager;","map":null,"metadata":{},"sourceType":"script"}