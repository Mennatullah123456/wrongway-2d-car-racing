{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar displacement$1 = require('./displacement.js');\nvar displacement = require('./displacement2.js');\nvar DisplacementFilter = /*#__PURE__*/function (_core$Filter) {\n  _inherits(DisplacementFilter, _core$Filter);\n  function DisplacementFilter(sprite, scale) {\n    var _this;\n    _classCallCheck(this, DisplacementFilter);\n    var maskMatrix = new core.Matrix();\n    sprite.renderable = false;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplacementFilter).call(this, displacement[\"default\"], displacement$1[\"default\"], {\n      mapSampler: sprite._texture,\n      filterMatrix: maskMatrix,\n      scale: {\n        x: 1,\n        y: 1\n      },\n      rotation: new Float32Array([1, 0, 0, 1])\n    }));\n    _this.maskSprite = sprite;\n    _this.maskMatrix = maskMatrix;\n    if (scale === null || scale === void 0) {\n      scale = 20;\n    }\n    _this.scale = new core.Point(scale, scale);\n    return _this;\n  }\n  _createClass(DisplacementFilter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n      this.uniforms.scale.x = this.scale.x;\n      this.uniforms.scale.y = this.scale.y;\n      var wt = this.maskSprite.worldTransform;\n      var lenX = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n      var lenY = Math.sqrt(wt.c * wt.c + wt.d * wt.d);\n      if (lenX !== 0 && lenY !== 0) {\n        this.uniforms.rotation[0] = wt.a / lenX;\n        this.uniforms.rotation[1] = wt.b / lenX;\n        this.uniforms.rotation[2] = wt.c / lenY;\n        this.uniforms.rotation[3] = wt.d / lenY;\n      }\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }, {\n    key: \"map\",\n    get: function get() {\n      return this.uniforms.mapSampler;\n    },\n    set: function set(value) {\n      this.uniforms.mapSampler = value;\n    }\n  }]);\n  return DisplacementFilter;\n}(core.Filter);\nexports.DisplacementFilter = DisplacementFilter;","map":null,"metadata":{},"sourceType":"script"}