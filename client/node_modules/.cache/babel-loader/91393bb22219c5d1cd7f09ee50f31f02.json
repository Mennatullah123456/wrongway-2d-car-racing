{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { extensions, ExtensionType } from '@pixi/core';\nimport { BackgroundLoader } from './BackgroundLoader.mjs';\nimport { Cache } from './cache/Cache.mjs';\nimport { Loader } from './loader/Loader.mjs';\nimport { Resolver } from './resolver/Resolver.mjs';\nimport { convertToList } from './utils/convertToList.mjs';\nimport { isSingleItem } from './utils/isSingleItem.mjs';\nvar AssetsClass = /*#__PURE__*/function () {\n  function AssetsClass() {\n    _classCallCheck(this, AssetsClass);\n    this._detections = [];\n    this._initialized = false;\n    this.resolver = new Resolver();\n    this.loader = new Loader();\n    this.cache = Cache;\n    this._backgroundLoader = new BackgroundLoader(this.loader);\n    this._backgroundLoader.active = true;\n    this.reset();\n  }\n  _createClass(AssetsClass, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          manifest,\n          resolutionPref,\n          resolution,\n          formats,\n          formatPref,\n          _iterator,\n          _step,\n          detection,\n          _iterator2,\n          _step2,\n          _detection,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                if (!this._initialized) {\n                  _context.next = 4;\n                  break;\n                }\n                console.warn(\"[Assets]AssetManager already initialized, did you load before calling this Asset.init()?\");\n                return _context.abrupt(\"return\");\n              case 4:\n                this._initialized = true;\n                if (options.basePath) {\n                  this.resolver.basePath = options.basePath;\n                }\n                if (!options.manifest) {\n                  _context.next = 13;\n                  break;\n                }\n                manifest = options.manifest;\n                if (!(typeof manifest === \"string\")) {\n                  _context.next = 12;\n                  break;\n                }\n                _context.next = 11;\n                return this.load(manifest);\n              case 11:\n                manifest = _context.sent;\n              case 12:\n                this.resolver.addManifest(manifest);\n              case 13:\n                resolutionPref = options.texturePreference?.resolution ?? 1;\n                resolution = typeof resolutionPref === \"number\" ? [resolutionPref] : resolutionPref;\n                formats = [];\n                if (!options.texturePreference?.format) {\n                  _context.next = 42;\n                  break;\n                }\n                formatPref = options.texturePreference?.format;\n                formats = typeof formatPref === \"string\" ? [formatPref] : formatPref;\n                _iterator = _createForOfIteratorHelper(this._detections);\n                _context.prev = 20;\n                _iterator.s();\n              case 22:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 32;\n                  break;\n                }\n                detection = _step.value;\n                _context.next = 26;\n                return detection.test();\n              case 26:\n                if (_context.sent) {\n                  _context.next = 30;\n                  break;\n                }\n                _context.next = 29;\n                return detection.remove(formats);\n              case 29:\n                formats = _context.sent;\n              case 30:\n                _context.next = 22;\n                break;\n              case 32:\n                _context.next = 37;\n                break;\n              case 34:\n                _context.prev = 34;\n                _context.t0 = _context[\"catch\"](20);\n                _iterator.e(_context.t0);\n              case 37:\n                _context.prev = 37;\n                _iterator.f();\n                return _context.finish(37);\n              case 40:\n                _context.next = 63;\n                break;\n              case 42:\n                _iterator2 = _createForOfIteratorHelper(this._detections);\n                _context.prev = 43;\n                _iterator2.s();\n              case 45:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 55;\n                  break;\n                }\n                _detection = _step2.value;\n                _context.next = 49;\n                return _detection.test();\n              case 49:\n                if (!_context.sent) {\n                  _context.next = 53;\n                  break;\n                }\n                _context.next = 52;\n                return _detection.add(formats);\n              case 52:\n                formats = _context.sent;\n              case 53:\n                _context.next = 45;\n                break;\n              case 55:\n                _context.next = 60;\n                break;\n              case 57:\n                _context.prev = 57;\n                _context.t1 = _context[\"catch\"](43);\n                _iterator2.e(_context.t1);\n              case 60:\n                _context.prev = 60;\n                _iterator2.f();\n                return _context.finish(60);\n              case 63:\n                this.resolver.prefer({\n                  params: {\n                    format: formats,\n                    resolution: resolution\n                  }\n                });\n              case 64:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[20, 34, 37, 40], [43, 57, 60, 63]]);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }, {\n    key: \"add\",\n    value: function add(keysIn, assetsIn, data) {\n      this.resolver.add(keysIn, assetsIn, data);\n    }\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urls, onProgress) {\n        var _this = this;\n        var singleAsset, urlArray, resolveResults, out;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._initialized) {\n                  _context2.next = 3;\n                  break;\n                }\n                _context2.next = 3;\n                return this.init();\n              case 3:\n                singleAsset = isSingleItem(urls);\n                urlArray = convertToList(urls).map(function (url) {\n                  if (typeof url !== \"string\") {\n                    _this.resolver.add(url.src, url);\n                    return url.src;\n                  }\n                  return url;\n                });\n                resolveResults = this.resolver.resolve(urlArray);\n                _context2.next = 8;\n                return this._mapLoadToResolve(resolveResults, onProgress);\n              case 8:\n                out = _context2.sent;\n                return _context2.abrupt(\"return\", singleAsset ? out[urlArray[0]] : out);\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function load(_x, _x2) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }, {\n    key: \"addBundle\",\n    value: function addBundle(bundleId, assets) {\n      this.resolver.addBundle(bundleId, assets);\n    }\n  }, {\n    key: \"loadBundle\",\n    value: function () {\n      var _loadBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bundleIds, onProgress) {\n        var _this2 = this;\n        var singleAsset, resolveResults, out, keys, count, total, _onProgress, promises;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._initialized) {\n                  _context3.next = 3;\n                  break;\n                }\n                _context3.next = 3;\n                return this.init();\n              case 3:\n                singleAsset = false;\n                if (typeof bundleIds === \"string\") {\n                  singleAsset = true;\n                  bundleIds = [bundleIds];\n                }\n                resolveResults = this.resolver.resolveBundle(bundleIds);\n                out = {};\n                keys = Object.keys(resolveResults);\n                count = 0;\n                total = 0;\n                _onProgress = function _onProgress() {\n                  onProgress?.(++count / total);\n                };\n                promises = keys.map(function (bundleId) {\n                  var resolveResult = resolveResults[bundleId];\n                  total += Object.keys(resolveResult).length;\n                  return _this2._mapLoadToResolve(resolveResult, _onProgress).then(function (resolveResult2) {\n                    out[bundleId] = resolveResult2;\n                  });\n                });\n                _context3.next = 14;\n                return Promise.all(promises);\n              case 14:\n                return _context3.abrupt(\"return\", singleAsset ? out[bundleIds[0]] : out);\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadBundle(_x3, _x4) {\n        return _loadBundle.apply(this, arguments);\n      }\n      return loadBundle;\n    }()\n  }, {\n    key: \"backgroundLoad\",\n    value: function () {\n      var _backgroundLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(urls) {\n        var resolveResults;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._initialized) {\n                  _context4.next = 3;\n                  break;\n                }\n                _context4.next = 3;\n                return this.init();\n              case 3:\n                if (typeof urls === \"string\") {\n                  urls = [urls];\n                }\n                resolveResults = this.resolver.resolve(urls);\n                this._backgroundLoader.add(Object.values(resolveResults));\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function backgroundLoad(_x5) {\n        return _backgroundLoad.apply(this, arguments);\n      }\n      return backgroundLoad;\n    }()\n  }, {\n    key: \"backgroundLoadBundle\",\n    value: function () {\n      var _backgroundLoadBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bundleIds) {\n        var _this3 = this;\n        var resolveResults;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._initialized) {\n                  _context5.next = 3;\n                  break;\n                }\n                _context5.next = 3;\n                return this.init();\n              case 3:\n                if (typeof bundleIds === \"string\") {\n                  bundleIds = [bundleIds];\n                }\n                resolveResults = this.resolver.resolveBundle(bundleIds);\n                Object.values(resolveResults).forEach(function (resolveResult) {\n                  _this3._backgroundLoader.add(Object.values(resolveResult));\n                });\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function backgroundLoadBundle(_x6) {\n        return _backgroundLoadBundle.apply(this, arguments);\n      }\n      return backgroundLoadBundle;\n    }()\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.resolver.reset();\n      this.loader.reset();\n      this.cache.reset();\n      this._initialized = false;\n    }\n  }, {\n    key: \"get\",\n    value: function get(keys) {\n      if (typeof keys === \"string\") {\n        return Cache.get(keys);\n      }\n      var assets = {};\n      for (var i = 0; i < keys.length; i++) {\n        assets[i] = Cache.get(keys[i]);\n      }\n      return assets;\n    }\n  }, {\n    key: \"_mapLoadToResolve\",\n    value: function () {\n      var _mapLoadToResolve2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(resolveResults, onProgress) {\n        var resolveArray, resolveKeys, loadedAssets, out;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                resolveArray = Object.values(resolveResults);\n                resolveKeys = Object.keys(resolveResults);\n                this._backgroundLoader.active = false;\n                _context6.next = 5;\n                return this.loader.load(resolveArray, onProgress);\n              case 5:\n                loadedAssets = _context6.sent;\n                this._backgroundLoader.active = true;\n                out = {};\n                resolveArray.forEach(function (resolveResult, i) {\n                  var asset = loadedAssets[resolveResult.src];\n                  var keys = [resolveResult.src];\n                  if (resolveResult.alias) {\n                    keys.push.apply(keys, _toConsumableArray(resolveResult.alias));\n                  }\n                  out[resolveKeys[i]] = asset;\n                  Cache.set(keys, asset);\n                });\n                return _context6.abrupt(\"return\", out);\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function _mapLoadToResolve(_x7, _x8) {\n        return _mapLoadToResolve2.apply(this, arguments);\n      }\n      return _mapLoadToResolve;\n    }()\n  }, {\n    key: \"unload\",\n    value: function () {\n      var _unload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(urls) {\n        var urlArray, resolveResults;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._initialized) {\n                  _context7.next = 3;\n                  break;\n                }\n                _context7.next = 3;\n                return this.init();\n              case 3:\n                urlArray = convertToList(urls).map(function (url) {\n                  return typeof url !== \"string\" ? url.src : url;\n                });\n                resolveResults = this.resolver.resolve(urlArray);\n                _context7.next = 7;\n                return this._unloadFromResolved(resolveResults);\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function unload(_x9) {\n        return _unload.apply(this, arguments);\n      }\n      return unload;\n    }()\n  }, {\n    key: \"unloadBundle\",\n    value: function () {\n      var _unloadBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(bundleIds) {\n        var _this4 = this;\n        var resolveResults, promises;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (this._initialized) {\n                  _context8.next = 3;\n                  break;\n                }\n                _context8.next = 3;\n                return this.init();\n              case 3:\n                bundleIds = convertToList(bundleIds);\n                resolveResults = this.resolver.resolveBundle(bundleIds);\n                promises = Object.keys(resolveResults).map(function (bundleId) {\n                  return _this4._unloadFromResolved(resolveResults[bundleId]);\n                });\n                _context8.next = 8;\n                return Promise.all(promises);\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function unloadBundle(_x10) {\n        return _unloadBundle.apply(this, arguments);\n      }\n      return unloadBundle;\n    }()\n  }, {\n    key: \"_unloadFromResolved\",\n    value: function () {\n      var _unloadFromResolved2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(resolveResult) {\n        var resolveArray;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                resolveArray = Object.values(resolveResult);\n                resolveArray.forEach(function (resolveResult2) {\n                  Cache.remove(resolveResult2.src);\n                });\n                _context9.next = 4;\n                return this.loader.unload(resolveArray);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function _unloadFromResolved(_x11) {\n        return _unloadFromResolved2.apply(this, arguments);\n      }\n      return _unloadFromResolved;\n    }()\n  }, {\n    key: \"detections\",\n    get: function get() {\n      return this._detections;\n    }\n  }]);\n  return AssetsClass;\n}();\nvar Assets = new AssetsClass();\nextensions.handleByList(ExtensionType.LoadParser, Assets.loader.parsers).handleByList(ExtensionType.ResolveParser, Assets.resolver.parsers).handleByList(ExtensionType.CacheParser, Assets.cache.parsers).handleByList(ExtensionType.DetectionParser, Assets.detections);\nexport { Assets, AssetsClass };","map":null,"metadata":{},"sourceType":"module"}