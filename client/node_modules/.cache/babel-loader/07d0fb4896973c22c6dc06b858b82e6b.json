{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar AbstractMaskSystem = require('./AbstractMaskSystem.js');\nvar math = require('@pixi/math');\nvar extensions = require('@pixi/extensions');\nvar settings = require('@pixi/settings');\nvar tempMatrix = new math.Matrix();\nvar rectPool = [];\nvar _ScissorSystem = /*#__PURE__*/function (_AbstractMaskSystem$A) {\n  _inherits(_ScissorSystem, _AbstractMaskSystem$A);\n  function _ScissorSystem(renderer) {\n    var _this;\n    _classCallCheck(this, _ScissorSystem);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_ScissorSystem).call(this, renderer));\n    _this.glConst = settings.settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;\n    return _this;\n  }\n  _createClass(_ScissorSystem, [{\n    key: \"getStackLength\",\n    value: function getStackLength() {\n      var maskData = this.maskStack[this.maskStack.length - 1];\n      if (maskData) {\n        return maskData._scissorCounter;\n      }\n      return 0;\n    }\n  }, {\n    key: \"calcScissorRect\",\n    value: function calcScissorRect(maskData) {\n      if (maskData._scissorRectLocal) {\n        return;\n      }\n      var prevData = maskData._scissorRect;\n      var maskObject = maskData.maskObject;\n      var renderer = this.renderer;\n      var renderTextureSystem = renderer.renderTexture;\n      var rect = maskObject.getBounds(true, rectPool.pop() ?? new math.Rectangle());\n      this.roundFrameToPixels(rect, renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution, renderTextureSystem.sourceFrame, renderTextureSystem.destinationFrame, renderer.projection.transform);\n      if (prevData) {\n        rect.fit(prevData);\n      }\n      maskData._scissorRectLocal = rect;\n    }\n  }, {\n    key: \"testScissor\",\n    value: function testScissor(maskData) {\n      var maskObject = maskData.maskObject;\n      if (!maskObject.isFastRect || !maskObject.isFastRect()) {\n        return false;\n      }\n      if (_ScissorSystem.isMatrixRotated(maskObject.worldTransform)) {\n        return false;\n      }\n      if (_ScissorSystem.isMatrixRotated(this.renderer.projection.transform)) {\n        return false;\n      }\n      this.calcScissorRect(maskData);\n      var rect = maskData._scissorRectLocal;\n      return rect.width > 0 && rect.height > 0;\n    }\n  }, {\n    key: \"roundFrameToPixels\",\n    value: function roundFrameToPixels(frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {\n      if (_ScissorSystem.isMatrixRotated(transform)) {\n        return;\n      }\n      transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n      transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(bindingDestinationFrame.width / bindingSourceFrame.width, bindingDestinationFrame.height / bindingSourceFrame.height).translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n      this.renderer.filter.transformAABB(transform, frame);\n      frame.fit(bindingDestinationFrame);\n      frame.x = Math.round(frame.x * resolution);\n      frame.y = Math.round(frame.y * resolution);\n      frame.width = Math.round(frame.width * resolution);\n      frame.height = Math.round(frame.height * resolution);\n    }\n  }, {\n    key: \"push\",\n    value: function push(maskData) {\n      if (!maskData._scissorRectLocal) {\n        this.calcScissorRect(maskData);\n      }\n      var gl = this.renderer.gl;\n      if (!maskData._scissorRect) {\n        gl.enable(gl.SCISSOR_TEST);\n      }\n      maskData._scissorCounter++;\n      maskData._scissorRect = maskData._scissorRectLocal;\n      this._useCurrent();\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(maskData) {\n      var gl = this.renderer.gl;\n      if (maskData) {\n        rectPool.push(maskData._scissorRectLocal);\n      }\n      if (this.getStackLength() > 0) {\n        this._useCurrent();\n      } else {\n        gl.disable(gl.SCISSOR_TEST);\n      }\n    }\n  }, {\n    key: \"_useCurrent\",\n    value: function _useCurrent() {\n      var rect = this.maskStack[this.maskStack.length - 1]._scissorRect;\n      var y;\n      if (this.renderer.renderTexture.current) {\n        y = rect.y;\n      } else {\n        y = this.renderer.height - rect.height - rect.y;\n      }\n      this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);\n    }\n  }], [{\n    key: \"isMatrixRotated\",\n    value: function isMatrixRotated(matrix) {\n      if (!matrix) {\n        return false;\n      }\n      var a = matrix.a,\n        b = matrix.b,\n        c = matrix.c,\n        d = matrix.d;\n      return (Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4);\n    }\n  }]);\n  return _ScissorSystem;\n}(AbstractMaskSystem.AbstractMaskSystem);\nvar ScissorSystem = _ScissorSystem;\nScissorSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"scissor\"\n};\nextensions.extensions.add(ScissorSystem);\nexports.ScissorSystem = ScissorSystem;","map":null,"metadata":{},"sourceType":"script"}