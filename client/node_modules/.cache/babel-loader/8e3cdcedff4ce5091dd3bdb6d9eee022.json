{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { GRAPHICS_CURVES } from '../const.mjs';\nvar QuadraticUtils = /*#__PURE__*/function () {\n  function QuadraticUtils() {\n    _classCallCheck(this, QuadraticUtils);\n  }\n  _createClass(QuadraticUtils, null, [{\n    key: \"curveLength\",\n    value: function curveLength(fromX, fromY, cpX, cpY, toX, toY) {\n      var ax = fromX - 2 * cpX + toX;\n      var ay = fromY - 2 * cpY + toY;\n      var bx = 2 * cpX - 2 * fromX;\n      var by = 2 * cpY - 2 * fromY;\n      var a = 4 * (ax * ax + ay * ay);\n      var b = 4 * (ax * bx + ay * by);\n      var c = bx * bx + by * by;\n      var s = 2 * Math.sqrt(a + b + c);\n      var a2 = Math.sqrt(a);\n      var a32 = 2 * a * a2;\n      var c2 = 2 * Math.sqrt(c);\n      var ba = b / a2;\n      return (a32 * s + a2 * b * (s - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + s) / (ba + c2))) / (4 * a32);\n    }\n  }, {\n    key: \"curveTo\",\n    value: function curveTo(cpX, cpY, toX, toY, points) {\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      var n = GRAPHICS_CURVES._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));\n      var xa = 0;\n      var ya = 0;\n      for (var i = 1; i <= n; ++i) {\n        var j = i / n;\n        xa = fromX + (cpX - fromX) * j;\n        ya = fromY + (cpY - fromY) * j;\n        points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);\n      }\n    }\n  }]);\n  return QuadraticUtils;\n}();\nexport { QuadraticUtils };","map":null,"metadata":{},"sourceType":"module"}