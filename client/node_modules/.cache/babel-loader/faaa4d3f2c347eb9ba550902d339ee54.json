{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Matrix } from '@pixi/math';\nvar tempMat = new Matrix();\nvar TextureMatrix = /*#__PURE__*/function () {\n  function TextureMatrix(texture, clampMargin) {\n    _classCallCheck(this, TextureMatrix);\n    this._texture = texture;\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    this.clampMargin = typeof clampMargin === \"undefined\" ? 0.5 : clampMargin;\n    this.isSimple = false;\n  }\n  _createClass(TextureMatrix, [{\n    key: \"multiplyUvs\",\n    value: function multiplyUvs(uvs, out) {\n      if (out === void 0) {\n        out = uvs;\n      }\n      var mat = this.mapCoord;\n      for (var i = 0; i < uvs.length; i += 2) {\n        var x = uvs[i];\n        var y = uvs[i + 1];\n        out[i] = x * mat.a + y * mat.c + mat.tx;\n        out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n      }\n      return out;\n    }\n  }, {\n    key: \"update\",\n    value: function update(forceUpdate) {\n      var tex = this._texture;\n      if (!tex || !tex.valid) {\n        return false;\n      }\n      if (!forceUpdate && this._textureID === tex._updateID) {\n        return false;\n      }\n      this._textureID = tex._updateID;\n      this._updateID++;\n      var uvs = tex._uvs;\n      this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n      var orig = tex.orig;\n      var trim = tex.trim;\n      if (trim) {\n        tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);\n        this.mapCoord.append(tempMat);\n      }\n      var texBase = tex.baseTexture;\n      var frame = this.uClampFrame;\n      var margin = this.clampMargin / texBase.resolution;\n      var offset = this.clampOffset;\n      frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n      frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n      frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n      frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n      this.uClampOffset[0] = offset / texBase.realWidth;\n      this.uClampOffset[1] = offset / texBase.realHeight;\n      this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0;\n      return true;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value) {\n      this._texture = value;\n      this._textureID = -1;\n    }\n  }]);\n  return TextureMatrix;\n}();\nexport { TextureMatrix };","map":null,"metadata":{},"sourceType":"module"}