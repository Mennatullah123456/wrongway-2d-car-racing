{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Geometry } from '../geometry/Geometry.mjs';\nimport { Buffer } from '../geometry/Buffer.mjs';\nvar QuadUv = /*#__PURE__*/function (_Geometry) {\n  _inherits(QuadUv, _Geometry);\n  function QuadUv() {\n    var _this;\n    _classCallCheck(this, QuadUv);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuadUv).call(this));\n    _this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n    _this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    _this.vertexBuffer = new Buffer(_this.vertices);\n    _this.uvBuffer = new Buffer(_this.uvs);\n    _this.addAttribute(\"aVertexPosition\", _this.vertexBuffer).addAttribute(\"aTextureCoord\", _this.uvBuffer).addIndex([0, 1, 2, 0, 2, 3]);\n    return _this;\n  }\n  _createClass(QuadUv, [{\n    key: \"map\",\n    value: function map(targetTextureFrame, destinationFrame) {\n      var x = 0;\n      var y = 0;\n      this.uvs[0] = x;\n      this.uvs[1] = y;\n      this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n      this.uvs[3] = y;\n      this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n      this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n      this.uvs[6] = x;\n      this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n      x = destinationFrame.x;\n      y = destinationFrame.y;\n      this.vertices[0] = x;\n      this.vertices[1] = y;\n      this.vertices[2] = x + destinationFrame.width;\n      this.vertices[3] = y;\n      this.vertices[4] = x + destinationFrame.width;\n      this.vertices[5] = y + destinationFrame.height;\n      this.vertices[6] = x;\n      this.vertices[7] = y + destinationFrame.height;\n      this.invalidate();\n      return this;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      this.vertexBuffer._updateID++;\n      this.uvBuffer._updateID++;\n      return this;\n    }\n  }]);\n  return QuadUv;\n}(Geometry);\nexport { QuadUv };","map":null,"metadata":{},"sourceType":"module"}