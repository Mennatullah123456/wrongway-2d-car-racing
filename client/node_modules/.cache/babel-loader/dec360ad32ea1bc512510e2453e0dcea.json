{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar extensions = require('@pixi/extensions');\nvar tempRect = new math.Rectangle();\nvar tempRect2 = new math.Rectangle();\nvar RenderTextureSystem = /*#__PURE__*/function () {\n  function RenderTextureSystem(renderer) {\n    _classCallCheck(this, RenderTextureSystem);\n    this.renderer = renderer;\n    this.defaultMaskStack = [];\n    this.current = null;\n    this.sourceFrame = new math.Rectangle();\n    this.destinationFrame = new math.Rectangle();\n    this.viewportFrame = new math.Rectangle();\n  }\n  _createClass(RenderTextureSystem, [{\n    key: \"bind\",\n    value: function bind() {\n      var renderTexture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var sourceFrame = arguments.length > 1 ? arguments[1] : undefined;\n      var destinationFrame = arguments.length > 2 ? arguments[2] : undefined;\n      var renderer = this.renderer;\n      this.current = renderTexture;\n      var baseTexture;\n      var framebuffer;\n      var resolution;\n      if (renderTexture) {\n        baseTexture = renderTexture.baseTexture;\n        resolution = baseTexture.resolution;\n        if (!sourceFrame) {\n          tempRect.width = renderTexture.frame.width;\n          tempRect.height = renderTexture.frame.height;\n          sourceFrame = tempRect;\n        }\n        if (!destinationFrame) {\n          tempRect2.x = renderTexture.frame.x;\n          tempRect2.y = renderTexture.frame.y;\n          tempRect2.width = sourceFrame.width;\n          tempRect2.height = sourceFrame.height;\n          destinationFrame = tempRect2;\n        }\n        framebuffer = baseTexture.framebuffer;\n      } else {\n        resolution = renderer.resolution;\n        if (!sourceFrame) {\n          tempRect.width = renderer._view.screen.width;\n          tempRect.height = renderer._view.screen.height;\n          sourceFrame = tempRect;\n        }\n        if (!destinationFrame) {\n          destinationFrame = tempRect;\n          destinationFrame.width = sourceFrame.width;\n          destinationFrame.height = sourceFrame.height;\n        }\n      }\n      var viewportFrame = this.viewportFrame;\n      viewportFrame.x = destinationFrame.x * resolution;\n      viewportFrame.y = destinationFrame.y * resolution;\n      viewportFrame.width = destinationFrame.width * resolution;\n      viewportFrame.height = destinationFrame.height * resolution;\n      if (!renderTexture) {\n        viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n      }\n      viewportFrame.ceil();\n      this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n      this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n      if (renderTexture) {\n        this.renderer.mask.setMaskStack(baseTexture.maskStack);\n      } else {\n        this.renderer.mask.setMaskStack(this.defaultMaskStack);\n      }\n      this.sourceFrame.copyFrom(sourceFrame);\n      this.destinationFrame.copyFrom(destinationFrame);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(clearColor, mask) {\n      if (this.current) {\n        clearColor = clearColor || this.current.baseTexture.clearColor;\n      } else {\n        clearColor = clearColor || this.renderer.background.colorRgba;\n      }\n      var destinationFrame = this.destinationFrame;\n      var baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen;\n      var clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n      if (clearMask) {\n        var _this$viewportFrame = this.viewportFrame,\n          x = _this$viewportFrame.x,\n          y = _this$viewportFrame.y,\n          width = _this$viewportFrame.width,\n          height = _this$viewportFrame.height;\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n        this.renderer.gl.scissor(x, y, width, height);\n      }\n      this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);\n      if (clearMask) {\n        this.renderer.scissor.pop();\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.bind(null);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.bind(null);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return RenderTextureSystem;\n}();\nRenderTextureSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"renderTexture\"\n};\nextensions.extensions.add(RenderTextureSystem);\nexports.RenderTextureSystem = RenderTextureSystem;","map":null,"metadata":{},"sourceType":"script"}