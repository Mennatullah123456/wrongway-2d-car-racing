{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar AbstractMaskSystem = require('./AbstractMaskSystem.js');\nvar extensions = require('@pixi/extensions');\nvar settings = require('@pixi/settings');\nvar StencilSystem = /*#__PURE__*/function (_AbstractMaskSystem$A) {\n  _inherits(StencilSystem, _AbstractMaskSystem$A);\n  function StencilSystem(renderer) {\n    var _this;\n    _classCallCheck(this, StencilSystem);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StencilSystem).call(this, renderer));\n    _this.glConst = settings.settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    return _this;\n  }\n  _createClass(StencilSystem, [{\n    key: \"getStackLength\",\n    value: function getStackLength() {\n      var maskData = this.maskStack[this.maskStack.length - 1];\n      if (maskData) {\n        return maskData._stencilCounter;\n      }\n      return 0;\n    }\n  }, {\n    key: \"push\",\n    value: function push(maskData) {\n      var maskObject = maskData.maskObject;\n      var gl = this.renderer.gl;\n      var prevMaskCount = maskData._stencilCounter;\n      if (prevMaskCount === 0) {\n        this.renderer.framebuffer.forceStencil();\n        gl.clearStencil(0);\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n      }\n      maskData._stencilCounter++;\n      var colorMask = maskData._colorMask;\n      if (colorMask !== 0) {\n        maskData._colorMask = 0;\n        gl.colorMask(false, false, false, false);\n      }\n      gl.stencilFunc(gl.EQUAL, prevMaskCount, 4294967295);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n      maskObject.renderable = true;\n      maskObject.render(this.renderer);\n      this.renderer.batch.flush();\n      maskObject.renderable = false;\n      if (colorMask !== 0) {\n        maskData._colorMask = colorMask;\n        gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n      }\n      this._useCurrent();\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(maskObject) {\n      var gl = this.renderer.gl;\n      if (this.getStackLength() === 0) {\n        gl.disable(gl.STENCIL_TEST);\n      } else {\n        var maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n        var colorMask = maskData ? maskData._colorMask : 15;\n        if (colorMask !== 0) {\n          maskData._colorMask = 0;\n          gl.colorMask(false, false, false, false);\n        }\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n        if (colorMask !== 0) {\n          maskData._colorMask = colorMask;\n          gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n        }\n        this._useCurrent();\n      }\n    }\n  }, {\n    key: \"_useCurrent\",\n    value: function _useCurrent() {\n      var gl = this.renderer.gl;\n      gl.stencilFunc(gl.EQUAL, this.getStackLength(), 4294967295);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n  }]);\n  return StencilSystem;\n}(AbstractMaskSystem.AbstractMaskSystem);\nStencilSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"stencil\"\n};\nextensions.extensions.add(StencilSystem);\nexports.StencilSystem = StencilSystem;","map":null,"metadata":{},"sourceType":"script"}