{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { BaseImageResource } from './BaseImageResource.mjs';\nimport { Ticker } from '@pixi/ticker';\nvar _VideoResource = /*#__PURE__*/function (_BaseImageResource) {\n  _inherits(_VideoResource, _BaseImageResource);\n  function _VideoResource(source, options) {\n    var _this;\n    _classCallCheck(this, _VideoResource);\n    options = options || {};\n    if (!(source instanceof HTMLVideoElement)) {\n      var videoElement = document.createElement(\"video\");\n      videoElement.setAttribute(\"preload\", \"auto\");\n      videoElement.setAttribute(\"webkit-playsinline\", \"\");\n      videoElement.setAttribute(\"playsinline\", \"\");\n      if (typeof source === \"string\") {\n        source = [source];\n      }\n      var firstSrc = source[0].src || source[0];\n      BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin);\n      for (var i = 0; i < source.length; ++i) {\n        var sourceElement = document.createElement(\"source\");\n        var _source$i = source[i],\n          src = _source$i.src,\n          mime = _source$i.mime;\n        src = src || source[i];\n        var baseSrc = src.split(\"?\").shift().toLowerCase();\n        var ext = baseSrc.slice(baseSrc.lastIndexOf(\".\") + 1);\n        mime = mime || _VideoResource.MIME_TYPES[ext] || \"video/\".concat(ext);\n        sourceElement.src = src;\n        sourceElement.type = mime;\n        videoElement.appendChild(sourceElement);\n      }\n      source = videoElement;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_VideoResource).call(this, source));\n    _this.noSubImage = true;\n    _this._autoUpdate = true;\n    _this._isConnectedToTicker = false;\n    _this._updateFPS = options.updateFPS || 0;\n    _this._msToNextUpdate = 0;\n    _this.autoPlay = options.autoPlay !== false;\n    _this._load = null;\n    _this._resolve = null;\n    _this._onCanPlay = _this._onCanPlay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._onError = _this._onError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    if (options.autoLoad !== false) {\n      _this.load();\n    }\n    return _this;\n  }\n  _createClass(_VideoResource, [{\n    key: \"update\",\n    value: function update() {\n      var _deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (!this.destroyed) {\n        var elapsedMS = Ticker.shared.elapsedMS * this.source.playbackRate;\n        this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n        if (!this._updateFPS || this._msToNextUpdate <= 0) {\n          _get(_getPrototypeOf(_VideoResource.prototype), \"update\", this).call(this);\n          this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0;\n        }\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n      if (this._load) {\n        return this._load;\n      }\n      var source = this.source;\n      if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {\n        source.complete = true;\n      }\n      source.addEventListener(\"play\", this._onPlayStart.bind(this));\n      source.addEventListener(\"pause\", this._onPlayStop.bind(this));\n      if (!this._isSourceReady()) {\n        source.addEventListener(\"canplay\", this._onCanPlay);\n        source.addEventListener(\"canplaythrough\", this._onCanPlay);\n        source.addEventListener(\"error\", this._onError, true);\n      } else {\n        this._onCanPlay();\n      }\n      this._load = new Promise(function (resolve) {\n        if (_this2.valid) {\n          resolve(_this2);\n        } else {\n          _this2._resolve = resolve;\n          source.load();\n        }\n      });\n      return this._load;\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(event) {\n      this.source.removeEventListener(\"error\", this._onError, true);\n      this.onError.emit(event);\n    }\n  }, {\n    key: \"_isSourcePlaying\",\n    value: function _isSourcePlaying() {\n      var source = this.source;\n      return !source.paused && !source.ended && this._isSourceReady();\n    }\n  }, {\n    key: \"_isSourceReady\",\n    value: function _isSourceReady() {\n      var source = this.source;\n      return source.readyState > 2;\n    }\n  }, {\n    key: \"_onPlayStart\",\n    value: function _onPlayStart() {\n      if (!this.valid) {\n        this._onCanPlay();\n      }\n      if (this.autoUpdate && !this._isConnectedToTicker) {\n        Ticker.shared.add(this.update, this);\n        this._isConnectedToTicker = true;\n      }\n    }\n  }, {\n    key: \"_onPlayStop\",\n    value: function _onPlayStop() {\n      if (this._isConnectedToTicker) {\n        Ticker.shared.remove(this.update, this);\n        this._isConnectedToTicker = false;\n      }\n    }\n  }, {\n    key: \"_onCanPlay\",\n    value: function _onCanPlay() {\n      var source = this.source;\n      source.removeEventListener(\"canplay\", this._onCanPlay);\n      source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n      var valid = this.valid;\n      this.resize(source.videoWidth, source.videoHeight);\n      if (!valid && this._resolve) {\n        this._resolve(this);\n        this._resolve = null;\n      }\n      if (this._isSourcePlaying()) {\n        this._onPlayStart();\n      } else if (this.autoPlay) {\n        source.play();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isConnectedToTicker) {\n        Ticker.shared.remove(this.update, this);\n        this._isConnectedToTicker = false;\n      }\n      var source = this.source;\n      if (source) {\n        source.removeEventListener(\"error\", this._onError, true);\n        source.pause();\n        source.src = \"\";\n        source.load();\n      }\n      _get(_getPrototypeOf(_VideoResource.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"autoUpdate\",\n    get: function get() {\n      return this._autoUpdate;\n    },\n    set: function set(value) {\n      if (value !== this._autoUpdate) {\n        this._autoUpdate = value;\n        if (!this._autoUpdate && this._isConnectedToTicker) {\n          Ticker.shared.remove(this.update, this);\n          this._isConnectedToTicker = false;\n        } else if (this._autoUpdate && !this._isConnectedToTicker && this._isSourcePlaying()) {\n          Ticker.shared.add(this.update, this);\n          this._isConnectedToTicker = true;\n        }\n      }\n    }\n  }, {\n    key: \"updateFPS\",\n    get: function get() {\n      return this._updateFPS;\n    },\n    set: function set(value) {\n      if (value !== this._updateFPS) {\n        this._updateFPS = value;\n      }\n    }\n  }], [{\n    key: \"test\",\n    value: function test(source, extension) {\n      return globalThis.HTMLVideoElement && source instanceof HTMLVideoElement || _VideoResource.TYPES.includes(extension);\n    }\n  }]);\n  return _VideoResource;\n}(BaseImageResource);\nvar VideoResource = _VideoResource;\nVideoResource.TYPES = [\"mp4\", \"m4v\", \"webm\", \"ogg\", \"ogv\", \"h264\", \"avi\", \"mov\"];\nVideoResource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nexport { VideoResource };","map":null,"metadata":{},"sourceType":"module"}