{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { uid } from '@pixi/utils';\nimport { BaseImageResource } from './BaseImageResource.mjs';\nimport { settings } from '@pixi/settings';\nvar _SVGResource = /*#__PURE__*/function (_BaseImageResource) {\n  _inherits(_SVGResource, _BaseImageResource);\n  function _SVGResource(sourceBase64, options) {\n    var _this;\n    _classCallCheck(this, _SVGResource);\n    options = options || {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_SVGResource).call(this, settings.ADAPTER.createCanvas()));\n    _this._width = 0;\n    _this._height = 0;\n    _this.svg = sourceBase64;\n    _this.scale = options.scale || 1;\n    _this._overrideWidth = options.width;\n    _this._overrideHeight = options.height;\n    _this._resolve = null;\n    _this._crossorigin = options.crossorigin;\n    _this._load = null;\n    if (options.autoLoad !== false) {\n      _this.load();\n    }\n    return _this;\n  }\n  _createClass(_SVGResource, [{\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n      if (this._load) {\n        return this._load;\n      }\n      this._load = new Promise(function (resolve) {\n        _this2._resolve = function () {\n          _this2.resize(_this2.source.width, _this2.source.height);\n          resolve(_this2);\n        };\n        if (_SVGResource.SVG_XML.test(_this2.svg.trim())) {\n          if (!btoa) {\n            throw new Error(\"Your browser doesn't support base64 conversions.\");\n          }\n          _this2.svg = \"data:image/svg+xml;base64,\".concat(btoa(unescape(encodeURIComponent(_this2.svg))));\n        }\n        _this2._loadSvg();\n      });\n      return this._load;\n    }\n  }, {\n    key: \"_loadSvg\",\n    value: function _loadSvg() {\n      var _this3 = this;\n      var tempImage = new Image();\n      BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);\n      tempImage.src = this.svg;\n      tempImage.onerror = function (event) {\n        if (!_this3._resolve) {\n          return;\n        }\n        tempImage.onerror = null;\n        _this3.onError.emit(event);\n      };\n      tempImage.onload = function () {\n        if (!_this3._resolve) {\n          return;\n        }\n        var svgWidth = tempImage.width;\n        var svgHeight = tempImage.height;\n        if (!svgWidth || !svgHeight) {\n          throw new Error(\"The SVG image must have width and height defined (in pixels), canvas API needs them.\");\n        }\n        var width = svgWidth * _this3.scale;\n        var height = svgHeight * _this3.scale;\n        if (_this3._overrideWidth || _this3._overrideHeight) {\n          width = _this3._overrideWidth || _this3._overrideHeight / svgHeight * svgWidth;\n          height = _this3._overrideHeight || _this3._overrideWidth / svgWidth * svgHeight;\n        }\n        width = Math.round(width);\n        height = Math.round(height);\n        var canvas = _this3.source;\n        canvas.width = width;\n        canvas.height = height;\n        canvas._pixiId = \"canvas_\".concat(uid());\n        canvas.getContext(\"2d\").drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);\n        _this3._resolve();\n        _this3._resolve = null;\n      };\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(_SVGResource.prototype), \"dispose\", this).call(this);\n      this._resolve = null;\n      this._crossorigin = null;\n    }\n  }], [{\n    key: \"getSize\",\n    value: function getSize(svgString) {\n      var sizeMatch = _SVGResource.SVG_SIZE.exec(svgString);\n      var size = {};\n      if (sizeMatch) {\n        size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n        size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n      }\n      return size;\n    }\n  }, {\n    key: \"test\",\n    value: function test(source, extension) {\n      return extension === \"svg\" || typeof source === \"string\" && source.startsWith(\"data:image/svg+xml\") || typeof source === \"string\" && _SVGResource.SVG_XML.test(source);\n    }\n  }]);\n  return _SVGResource;\n}(BaseImageResource);\nvar SVGResource = _SVGResource;\nSVGResource.SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m;\nSVGResource.SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i;\nexport { SVGResource };","map":null,"metadata":{},"sourceType":"module"}