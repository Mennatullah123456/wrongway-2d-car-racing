{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar settings = require('@pixi/settings');\nvar Program = require('../shader/Program.js');\nvar Shader = require('../shader/Shader.js');\nvar State = require('../state/State.js');\nvar defaultFilter$1 = require('./defaultFilter.js');\nvar defaultFilter = require('./defaultFilter2.js');\nvar Filter = /*#__PURE__*/function (_Shader$Shader) {\n  _inherits(Filter, _Shader$Shader);\n  function Filter(vertexSrc, fragmentSrc, uniforms) {\n    var _this;\n    _classCallCheck(this, Filter);\n    var program = Program.Program.from(vertexSrc || Filter.defaultVertexSrc, fragmentSrc || Filter.defaultFragmentSrc);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, program, uniforms));\n    _this.padding = 0;\n    _this.resolution = settings.settings.FILTER_RESOLUTION;\n    _this.multisample = settings.settings.FILTER_MULTISAMPLE;\n    _this.enabled = true;\n    _this.autoFit = true;\n    _this.state = new State.State();\n    return _this;\n  }\n  _createClass(Filter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode, _currentState) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }, {\n    key: \"blendMode\",\n    get: function get() {\n      return this.state.blendMode;\n    },\n    set: function set(value) {\n      this.state.blendMode = value;\n    }\n  }, {\n    key: \"resolution\",\n    get: function get() {\n      return this._resolution;\n    },\n    set: function set(value) {\n      this._resolution = value;\n    }\n  }], [{\n    key: \"defaultVertexSrc\",\n    get: function get() {\n      return defaultFilter[\"default\"];\n    }\n  }, {\n    key: \"defaultFragmentSrc\",\n    get: function get() {\n      return defaultFilter$1[\"default\"];\n    }\n  }]);\n  return Filter;\n}(Shader.Shader);\nexports.Filter = Filter;","map":null,"metadata":{},"sourceType":"script"}