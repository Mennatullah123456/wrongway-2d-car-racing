{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar AbstractMultiResource = require('./AbstractMultiResource.js');\nvar constants = require('@pixi/constants');\nvar _CubeResource = /*#__PURE__*/function (_AbstractMultiResourc) {\n  _inherits(_CubeResource, _AbstractMultiResourc);\n  function _CubeResource(source, options) {\n    var _this;\n    _classCallCheck(this, _CubeResource);\n    var _ref = options || {},\n      width = _ref.width,\n      height = _ref.height,\n      autoLoad = _ref.autoLoad,\n      linkBaseTexture = _ref.linkBaseTexture;\n    if (source && source.length !== _CubeResource.SIDES) {\n      throw new Error(\"Invalid length. Got \".concat(source.length, \", expected 6\"));\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_CubeResource).call(this, 6, {\n      width: width,\n      height: height\n    }));\n    for (var i = 0; i < _CubeResource.SIDES; i++) {\n      _this.items[i].target = constants.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n    }\n    _this.linkBaseTexture = linkBaseTexture !== false;\n    if (source) {\n      _this.initFromArray(source, options);\n    }\n    if (autoLoad !== false) {\n      _this.load();\n    }\n    return _this;\n  }\n  _createClass(_CubeResource, [{\n    key: \"bind\",\n    value: function bind(baseTexture) {\n      _get(_getPrototypeOf(_CubeResource.prototype), \"bind\", this).call(this, baseTexture);\n      baseTexture.target = constants.TARGETS.TEXTURE_CUBE_MAP;\n    }\n  }, {\n    key: \"addBaseTextureAt\",\n    value: function addBaseTextureAt(baseTexture, index, linkBaseTexture) {\n      if (linkBaseTexture === void 0) {\n        linkBaseTexture = this.linkBaseTexture;\n      }\n      if (!this.items[index]) {\n        throw new Error(\"Index \".concat(index, \" is out of bounds\"));\n      }\n      if (!this.linkBaseTexture || baseTexture.parentTextureArray || Object.keys(baseTexture._glTextures).length > 0) {\n        if (baseTexture.resource) {\n          this.addResourceAt(baseTexture.resource, index);\n        } else {\n          throw new Error(\"CubeResource does not support copying of renderTexture.\");\n        }\n      } else {\n        baseTexture.target = constants.TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index;\n        baseTexture.parentTextureArray = this.baseTexture;\n        this.items[index] = baseTexture;\n      }\n      if (baseTexture.valid && !this.valid) {\n        this.resize(baseTexture.realWidth, baseTexture.realHeight);\n      }\n      this.items[index] = baseTexture;\n      return this;\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(renderer, _baseTexture, glTexture) {\n      var dirty = this.itemDirtyIds;\n      for (var i = 0; i < _CubeResource.SIDES; i++) {\n        var side = this.items[i];\n        if (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId) {\n          if (side.valid && side.resource) {\n            side.resource.upload(renderer, side, glTexture);\n            dirty[i] = side.dirtyId;\n          } else if (dirty[i] < -1) {\n            renderer.gl.texImage2D(side.target, 0, glTexture.internalFormat, _baseTexture.realWidth, _baseTexture.realHeight, 0, _baseTexture.format, glTexture.type, null);\n            dirty[i] = -1;\n          }\n        }\n      }\n      return true;\n    }\n  }], [{\n    key: \"test\",\n    value: function test(source) {\n      return Array.isArray(source) && source.length === _CubeResource.SIDES;\n    }\n  }]);\n  return _CubeResource;\n}(AbstractMultiResource.AbstractMultiResource);\nvar CubeResource = _CubeResource;\nCubeResource.SIDES = 6;\nexports.CubeResource = CubeResource;","map":null,"metadata":{},"sourceType":"script"}