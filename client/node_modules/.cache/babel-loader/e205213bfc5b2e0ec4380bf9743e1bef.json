{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\97150\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar SimplePlane = require('./SimplePlane.js');\nvar DEFAULT_BORDER_SIZE = 10;\nvar NineSlicePlane = /*#__PURE__*/function (_SimplePlane$SimplePl) {\n  _inherits(NineSlicePlane, _SimplePlane$SimplePl);\n  function NineSlicePlane(texture) {\n    var _this;\n    var leftWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_BORDER_SIZE;\n    var topHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BORDER_SIZE;\n    var rightWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_BORDER_SIZE;\n    var bottomHeight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_BORDER_SIZE;\n    _classCallCheck(this, NineSlicePlane);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NineSlicePlane).call(this, core.Texture.WHITE, 4, 4));\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    _this._width = _this._origWidth;\n    _this._height = _this._origHeight;\n    _this._leftWidth = leftWidth;\n    _this._rightWidth = rightWidth;\n    _this._topHeight = topHeight;\n    _this._bottomHeight = bottomHeight;\n    _this.texture = texture;\n    return _this;\n  }\n  _createClass(NineSlicePlane, [{\n    key: \"textureUpdated\",\n    value: function textureUpdated() {\n      this._textureID = this.shader.texture._updateID;\n      this._refresh();\n    }\n  }, {\n    key: \"updateHorizontalVertices\",\n    value: function updateHorizontalVertices() {\n      var vertices = this.vertices;\n      var scale = this._getMinScale();\n      vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n      vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n      vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n  }, {\n    key: \"updateVerticalVertices\",\n    value: function updateVerticalVertices() {\n      var vertices = this.vertices;\n      var scale = this._getMinScale();\n      vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n      vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n      vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n  }, {\n    key: \"_getMinScale\",\n    value: function _getMinScale() {\n      var w = this._leftWidth + this._rightWidth;\n      var scaleW = this._width > w ? 1 : this._width / w;\n      var h = this._topHeight + this._bottomHeight;\n      var scaleH = this._height > h ? 1 : this._height / h;\n      var scale = Math.min(scaleW, scaleH);\n      return scale;\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var texture = this.texture;\n      var uvs = this.geometry.buffers[1].data;\n      this._origWidth = texture.orig.width;\n      this._origHeight = texture.orig.height;\n      var _uvw = 1 / this._origWidth;\n      var _uvh = 1 / this._origHeight;\n      uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n      uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n      uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n      uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n      uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n      uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n      uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n      uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n      this.updateHorizontalVertices();\n      this.updateVerticalVertices();\n      this.geometry.buffers[0].update();\n      this.geometry.buffers[1].update();\n    }\n  }, {\n    key: \"vertices\",\n    get: function get() {\n      return this.geometry.getBuffer(\"aVertexPosition\").data;\n    },\n    set: function set(value) {\n      this.geometry.getBuffer(\"aVertexPosition\").data = value;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n      this._refresh();\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n      this._refresh();\n    }\n  }, {\n    key: \"leftWidth\",\n    get: function get() {\n      return this._leftWidth;\n    },\n    set: function set(value) {\n      this._leftWidth = value;\n      this._refresh();\n    }\n  }, {\n    key: \"rightWidth\",\n    get: function get() {\n      return this._rightWidth;\n    },\n    set: function set(value) {\n      this._rightWidth = value;\n      this._refresh();\n    }\n  }, {\n    key: \"topHeight\",\n    get: function get() {\n      return this._topHeight;\n    },\n    set: function set(value) {\n      this._topHeight = value;\n      this._refresh();\n    }\n  }, {\n    key: \"bottomHeight\",\n    get: function get() {\n      return this._bottomHeight;\n    },\n    set: function set(value) {\n      this._bottomHeight = value;\n      this._refresh();\n    }\n  }]);\n  return NineSlicePlane;\n}(SimplePlane.SimplePlane);\nexports.NineSlicePlane = NineSlicePlane;","map":null,"metadata":{},"sourceType":"script"}